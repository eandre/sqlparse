// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
//line sql-gen.y:24
package parser

import __yyfmt__ "fmt"

//line sql-gen.y:24
import (
	"fmt"
	"strings"

	"go/constant"

	"github.com/eandre/sqlparse/coltypes"
	"github.com/eandre/sqlparse/lex"
	"github.com/eandre/sqlparse/pkg/sql/privilege"
	"github.com/eandre/sqlparse/sem/tree"
)

const MaxUint = ^uint(0)

const MaxInt = int(MaxUint >> 1)

func unimplemented(sqllex sqlLexer, feature string) int {
	sqllex.(*Scanner).Unimplemented(feature)
	return 1
}

func unimplementedWithIssue(sqllex sqlLexer, issue int) int {
	sqllex.(*Scanner).UnimplementedWithIssue(issue)
	return 1
}
func unimplementedWithIssueDetail(sqllex sqlLexer, issue int, detail string) int {
	sqllex.(*Scanner).UnimplementedWithIssueDetail(issue, detail)
	return 1
}

//line sql-gen.y:60
type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}
func (u *sqlSymUnion) strVal() *tree.StrVal {
	if stmt, ok := u.val.(*tree.StrVal); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) auditMode() tree.AuditMode {
	return u.val.(tree.AuditMode)
}
func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}
func (u *sqlSymUnion) strPtr() *string {
	return u.val.(*string)
}
func (u *sqlSymUnion) strs() []string {
	return u.val.([]string)
}
func (u *sqlSymUnion) newTableWithIdx() *tree.TableNameWithIndex {
	tn := u.val.(tree.TableNameWithIndex)
	return &tn
}
func (u *sqlSymUnion) tableWithIdx() tree.TableNameWithIndex {
	return u.val.(tree.TableNameWithIndex)
}
func (u *sqlSymUnion) newTableWithIdxList() tree.TableNameWithIndexList {
	return u.val.(tree.TableNameWithIndexList)
}
func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}
func (u *sqlSymUnion) unresolvedName() *tree.UnresolvedName {
	return u.val.(*tree.UnresolvedName)
}
func (u *sqlSymUnion) functionReference() tree.FunctionReference {
	return u.val.(tree.FunctionReference)
}
func (u *sqlSymUnion) tablePatterns() tree.TablePatterns {
	return u.val.(tree.TablePatterns)
}
func (u *sqlSymUnion) tableNames() tree.TableNames {
	return u.val.(tree.TableNames)
}
func (u *sqlSymUnion) indexFlags() *tree.IndexFlags {
	return u.val.(*tree.IndexFlags)
}
func (u *sqlSymUnion) arraySubscript() *tree.ArraySubscript {
	return u.val.(*tree.ArraySubscript)
}
func (u *sqlSymUnion) arraySubscripts() tree.ArraySubscripts {
	if as, ok := u.val.(tree.ArraySubscripts); ok {
		return as
	}
	return nil
}
func (u *sqlSymUnion) stmt() tree.Statement {
	if stmt, ok := u.val.(tree.Statement); ok {
		return stmt
	}
	return nil
}
func (u *sqlSymUnion) stmts() []tree.Statement {
	return u.val.([]tree.Statement)
}
func (u *sqlSymUnion) cte() *tree.CTE {
	if cte, ok := u.val.(*tree.CTE); ok {
		return cte
	}
	return nil
}
func (u *sqlSymUnion) ctes() []*tree.CTE {
	return u.val.([]*tree.CTE)
}
func (u *sqlSymUnion) with() *tree.With {
	if with, ok := u.val.(*tree.With); ok {
		return with
	}
	return nil
}
func (u *sqlSymUnion) slct() *tree.Select {
	return u.val.(*tree.Select)
}
func (u *sqlSymUnion) selectStmt() tree.SelectStatement {
	return u.val.(tree.SelectStatement)
}
func (u *sqlSymUnion) colDef() *tree.ColumnTableDef {
	return u.val.(*tree.ColumnTableDef)
}
func (u *sqlSymUnion) constraintDef() tree.ConstraintTableDef {
	return u.val.(tree.ConstraintTableDef)
}
func (u *sqlSymUnion) tblDef() tree.TableDef {
	return u.val.(tree.TableDef)
}
func (u *sqlSymUnion) tblDefs() tree.TableDefs {
	return u.val.(tree.TableDefs)
}
func (u *sqlSymUnion) colQual() tree.NamedColumnQualification {
	return u.val.(tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colQualElem() tree.ColumnQualification {
	return u.val.(tree.ColumnQualification)
}
func (u *sqlSymUnion) colQuals() []tree.NamedColumnQualification {
	return u.val.([]tree.NamedColumnQualification)
}
func (u *sqlSymUnion) colType() coltypes.T {
	if colType, ok := u.val.(coltypes.T); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) tableRefCols() []tree.ColumnID {
	if refCols, ok := u.val.([]tree.ColumnID); ok {
		return refCols
	}
	return nil
}
func (u *sqlSymUnion) castTargetType() coltypes.CastTargetType {
	return u.val.(coltypes.CastTargetType)
}
func (u *sqlSymUnion) colTypes() []coltypes.T {
	return u.val.([]coltypes.T)
}
func (u *sqlSymUnion) int64() int64 {
	return u.val.(int64)
}
func (u *sqlSymUnion) seqOpt() tree.SequenceOption {
	return u.val.(tree.SequenceOption)
}
func (u *sqlSymUnion) seqOpts() []tree.SequenceOption {
	return u.val.([]tree.SequenceOption)
}
func (u *sqlSymUnion) expr() tree.Expr {
	if expr, ok := u.val.(tree.Expr); ok {
		return expr
	}
	return nil
}
func (u *sqlSymUnion) exprs() tree.Exprs {
	return u.val.(tree.Exprs)
}
func (u *sqlSymUnion) selExpr() tree.SelectExpr {
	return u.val.(tree.SelectExpr)
}
func (u *sqlSymUnion) selExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}
func (u *sqlSymUnion) retClause() tree.ReturningClause {
	return u.val.(tree.ReturningClause)
}
func (u *sqlSymUnion) aliasClause() tree.AliasClause {
	return u.val.(tree.AliasClause)
}
func (u *sqlSymUnion) asOfClause() tree.AsOfClause {
	return u.val.(tree.AsOfClause)
}
func (u *sqlSymUnion) tblExpr() tree.TableExpr {
	return u.val.(tree.TableExpr)
}
func (u *sqlSymUnion) tblExprs() tree.TableExprs {
	return u.val.(tree.TableExprs)
}
func (u *sqlSymUnion) from() *tree.From {
	return u.val.(*tree.From)
}
func (u *sqlSymUnion) int32s() []int32 {
	return u.val.([]int32)
}
func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}
func (u *sqlSymUnion) when() *tree.When {
	return u.val.(*tree.When)
}
func (u *sqlSymUnion) whens() []*tree.When {
	return u.val.([]*tree.When)
}
func (u *sqlSymUnion) updateExpr() *tree.UpdateExpr {
	return u.val.(*tree.UpdateExpr)
}
func (u *sqlSymUnion) updateExprs() tree.UpdateExprs {
	return u.val.(tree.UpdateExprs)
}
func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}
func (u *sqlSymUnion) targetList() tree.TargetList {
	return u.val.(tree.TargetList)
}
func (u *sqlSymUnion) targetListPtr() *tree.TargetList {
	return u.val.(*tree.TargetList)
}
func (u *sqlSymUnion) privilegeType() privilege.Kind {
	return u.val.(privilege.Kind)
}
func (u *sqlSymUnion) privilegeList() privilege.List {
	return u.val.(privilege.List)
}
func (u *sqlSymUnion) onConflict() *tree.OnConflict {
	return u.val.(*tree.OnConflict)
}
func (u *sqlSymUnion) orderBy() tree.OrderBy {
	return u.val.(tree.OrderBy)
}
func (u *sqlSymUnion) order() *tree.Order {
	return u.val.(*tree.Order)
}
func (u *sqlSymUnion) orders() []*tree.Order {
	return u.val.([]*tree.Order)
}
func (u *sqlSymUnion) groupBy() tree.GroupBy {
	return u.val.(tree.GroupBy)
}
func (u *sqlSymUnion) windowFrame() *tree.WindowFrame {
	return u.val.(*tree.WindowFrame)
}
func (u *sqlSymUnion) windowFrameBounds() tree.WindowFrameBounds {
	return u.val.(tree.WindowFrameBounds)
}
func (u *sqlSymUnion) windowFrameBound() *tree.WindowFrameBound {
	return u.val.(*tree.WindowFrameBound)
}
func (u *sqlSymUnion) distinctOn() tree.DistinctOn {
	return u.val.(tree.DistinctOn)
}
func (u *sqlSymUnion) dir() tree.Direction {
	return u.val.(tree.Direction)
}
func (u *sqlSymUnion) alterTableCmd() tree.AlterTableCmd {
	return u.val.(tree.AlterTableCmd)
}
func (u *sqlSymUnion) alterTableCmds() tree.AlterTableCmds {
	return u.val.(tree.AlterTableCmds)
}
func (u *sqlSymUnion) alterIndexCmd() tree.AlterIndexCmd {
	return u.val.(tree.AlterIndexCmd)
}
func (u *sqlSymUnion) alterIndexCmds() tree.AlterIndexCmds {
	return u.val.(tree.AlterIndexCmds)
}
func (u *sqlSymUnion) isoLevel() tree.IsolationLevel {
	return u.val.(tree.IsolationLevel)
}
func (u *sqlSymUnion) userPriority() tree.UserPriority {
	return u.val.(tree.UserPriority)
}
func (u *sqlSymUnion) readWriteMode() tree.ReadWriteMode {
	return u.val.(tree.ReadWriteMode)
}
func (u *sqlSymUnion) idxElem() tree.IndexElem {
	return u.val.(tree.IndexElem)
}
func (u *sqlSymUnion) idxElems() tree.IndexElemList {
	return u.val.(tree.IndexElemList)
}
func (u *sqlSymUnion) dropBehavior() tree.DropBehavior {
	return u.val.(tree.DropBehavior)
}
func (u *sqlSymUnion) validationBehavior() tree.ValidationBehavior {
	return u.val.(tree.ValidationBehavior)
}
func (u *sqlSymUnion) interleave() *tree.InterleaveDef {
	return u.val.(*tree.InterleaveDef)
}
func (u *sqlSymUnion) partitionBy() *tree.PartitionBy {
	return u.val.(*tree.PartitionBy)
}
func (u *sqlSymUnion) listPartition() tree.ListPartition {
	return u.val.(tree.ListPartition)
}
func (u *sqlSymUnion) listPartitions() []tree.ListPartition {
	return u.val.([]tree.ListPartition)
}
func (u *sqlSymUnion) rangePartition() tree.RangePartition {
	return u.val.(tree.RangePartition)
}
func (u *sqlSymUnion) rangePartitions() []tree.RangePartition {
	return u.val.([]tree.RangePartition)
}
func (u *sqlSymUnion) setZoneConfig() *tree.SetZoneConfig {
	return u.val.(*tree.SetZoneConfig)
}
func (u *sqlSymUnion) tuples() []*tree.Tuple {
	return u.val.([]*tree.Tuple)
}
func (u *sqlSymUnion) tuple() *tree.Tuple {
	return u.val.(*tree.Tuple)
}
func (u *sqlSymUnion) windowDef() *tree.WindowDef {
	return u.val.(*tree.WindowDef)
}
func (u *sqlSymUnion) window() tree.Window {
	return u.val.(tree.Window)
}
func (u *sqlSymUnion) op() tree.Operator {
	return u.val.(tree.Operator)
}
func (u *sqlSymUnion) cmpOp() tree.ComparisonOperator {
	return u.val.(tree.ComparisonOperator)
}
func (u *sqlSymUnion) durationField() tree.DurationField {
	return u.val.(tree.DurationField)
}
func (u *sqlSymUnion) kvOption() tree.KVOption {
	return u.val.(tree.KVOption)
}
func (u *sqlSymUnion) kvOptions() []tree.KVOption {
	if colType, ok := u.val.([]tree.KVOption); ok {
		return colType
	}
	return nil
}
func (u *sqlSymUnion) transactionModes() tree.TransactionModes {
	return u.val.(tree.TransactionModes)
}
func (u *sqlSymUnion) referenceAction() tree.ReferenceAction {
	return u.val.(tree.ReferenceAction)
}
func (u *sqlSymUnion) referenceActions() tree.ReferenceActions {
	return u.val.(tree.ReferenceActions)
}

func (u *sqlSymUnion) scrubOptions() tree.ScrubOptions {
	return u.val.(tree.ScrubOptions)
}
func (u *sqlSymUnion) scrubOption() tree.ScrubOption {
	return u.val.(tree.ScrubOption)
}
func (u *sqlSymUnion) resolvableFuncRefFromName() tree.ResolvableFunctionReference {
	return tree.ResolvableFunctionReference{FunctionReference: u.unresolvedName()}
}
func (u *sqlSymUnion) rowsFromExpr() *tree.RowsFromExpr {
	return u.val.(*tree.RowsFromExpr)
}
func newNameFromStr(s string) *tree.Name {
	return (*tree.Name)(&s)
}

//line sql-gen.y:567
type sqlSymType struct {
	yys   int
	id    int
	pos   int
	str   string
	union sqlSymUnion
}

const IDENT = lex.IDENT
const SCONST = lex.SCONST
const BCONST = lex.BCONST
const BITCONST = lex.BITCONST
const ICONST = lex.ICONST
const FCONST = lex.FCONST
const PLACEHOLDER = lex.PLACEHOLDER
const TYPECAST = lex.TYPECAST
const TYPEANNOTATE = lex.TYPEANNOTATE
const DOT_DOT = lex.DOT_DOT
const LESS_EQUALS = lex.LESS_EQUALS
const GREATER_EQUALS = lex.GREATER_EQUALS
const NOT_EQUALS = lex.NOT_EQUALS
const NOT_REGMATCH = lex.NOT_REGMATCH
const REGIMATCH = lex.REGIMATCH
const NOT_REGIMATCH = lex.NOT_REGIMATCH
const ERROR = lex.ERROR
const ABORT = lex.ABORT
const ACTION = lex.ACTION
const ADD = lex.ADD
const ADMIN = lex.ADMIN
const AGGREGATE = lex.AGGREGATE
const ALL = lex.ALL
const ALTER = lex.ALTER
const ANALYSE = lex.ANALYSE
const ANALYZE = lex.ANALYZE
const AND = lex.AND
const ANY = lex.ANY
const ANNOTATE_TYPE = lex.ANNOTATE_TYPE
const ARRAY = lex.ARRAY
const AS = lex.AS
const ASC = lex.ASC
const ASYMMETRIC = lex.ASYMMETRIC
const AT = lex.AT
const BACKUP = lex.BACKUP
const BEGIN = lex.BEGIN
const BETWEEN = lex.BETWEEN
const BIGINT = lex.BIGINT
const BIGSERIAL = lex.BIGSERIAL
const BIT = lex.BIT
const BLOB = lex.BLOB
const BOOL = lex.BOOL
const BOOLEAN = lex.BOOLEAN
const BOTH = lex.BOTH
const BY = lex.BY
const BYTEA = lex.BYTEA
const BYTES = lex.BYTES
const CACHE = lex.CACHE
const CANCEL = lex.CANCEL
const CASCADE = lex.CASCADE
const CASE = lex.CASE
const CAST = lex.CAST
const CHANGEFEED = lex.CHANGEFEED
const CHAR = lex.CHAR
const CHARACTER = lex.CHARACTER
const CHARACTERISTICS = lex.CHARACTERISTICS
const CHECK = lex.CHECK
const CLUSTER = lex.CLUSTER
const COALESCE = lex.COALESCE
const COLLATE = lex.COLLATE
const COLLATION = lex.COLLATION
const COLUMN = lex.COLUMN
const COLUMNS = lex.COLUMNS
const COMMENT = lex.COMMENT
const COMMIT = lex.COMMIT
const COMMITTED = lex.COMMITTED
const COMPACT = lex.COMPACT
const CONCAT = lex.CONCAT
const CONFIGURATION = lex.CONFIGURATION
const CONFIGURATIONS = lex.CONFIGURATIONS
const CONFIGURE = lex.CONFIGURE
const CONFLICT = lex.CONFLICT
const CONSTRAINT = lex.CONSTRAINT
const CONSTRAINTS = lex.CONSTRAINTS
const CONTAINS = lex.CONTAINS
const CONVERSION = lex.CONVERSION
const COPY = lex.COPY
const COVERING = lex.COVERING
const CREATE = lex.CREATE
const CROSS = lex.CROSS
const CUBE = lex.CUBE
const CURRENT = lex.CURRENT
const CURRENT_CATALOG = lex.CURRENT_CATALOG
const CURRENT_DATE = lex.CURRENT_DATE
const CURRENT_SCHEMA = lex.CURRENT_SCHEMA
const CURRENT_ROLE = lex.CURRENT_ROLE
const CURRENT_TIME = lex.CURRENT_TIME
const CURRENT_TIMESTAMP = lex.CURRENT_TIMESTAMP
const CURRENT_USER = lex.CURRENT_USER
const CYCLE = lex.CYCLE
const DATA = lex.DATA
const DATABASE = lex.DATABASE
const DATABASES = lex.DATABASES
const DATE = lex.DATE
const DAY = lex.DAY
const DEC = lex.DEC
const DECIMAL = lex.DECIMAL
const DEFAULT = lex.DEFAULT
const DEALLOCATE = lex.DEALLOCATE
const DEFERRABLE = lex.DEFERRABLE
const DEFERRED = lex.DEFERRED
const DELETE = lex.DELETE
const DESC = lex.DESC
const DISCARD = lex.DISCARD
const DISTINCT = lex.DISTINCT
const DO = lex.DO
const DOMAIN = lex.DOMAIN
const DOUBLE = lex.DOUBLE
const DROP = lex.DROP
const ELSE = lex.ELSE
const ENCODING = lex.ENCODING
const END = lex.END
const ENUM = lex.ENUM
const ESCAPE = lex.ESCAPE
const EXCEPT = lex.EXCEPT
const EXISTS = lex.EXISTS
const EXECUTE = lex.EXECUTE
const EXPERIMENTAL = lex.EXPERIMENTAL
const EXPERIMENTAL_FINGERPRINTS = lex.EXPERIMENTAL_FINGERPRINTS
const EXPERIMENTAL_REPLICA = lex.EXPERIMENTAL_REPLICA
const EXPERIMENTAL_AUDIT = lex.EXPERIMENTAL_AUDIT
const EXPLAIN = lex.EXPLAIN
const EXPORT = lex.EXPORT
const EXTENSION = lex.EXTENSION
const EXTRACT = lex.EXTRACT
const EXTRACT_DURATION = lex.EXTRACT_DURATION
const FALSE = lex.FALSE
const FAMILY = lex.FAMILY
const FETCH = lex.FETCH
const FETCHVAL = lex.FETCHVAL
const FETCHTEXT = lex.FETCHTEXT
const FETCHVAL_PATH = lex.FETCHVAL_PATH
const FETCHTEXT_PATH = lex.FETCHTEXT_PATH
const FILES = lex.FILES
const FILTER = lex.FILTER
const FIRST = lex.FIRST
const FLOAT = lex.FLOAT
const FLOAT4 = lex.FLOAT4
const FLOAT8 = lex.FLOAT8
const FLOORDIV = lex.FLOORDIV
const FOLLOWING = lex.FOLLOWING
const FOR = lex.FOR
const FORCE_INDEX = lex.FORCE_INDEX
const FOREIGN = lex.FOREIGN
const FROM = lex.FROM
const FULL = lex.FULL
const FUNCTION = lex.FUNCTION
const GLOBAL = lex.GLOBAL
const GRANT = lex.GRANT
const GRANTS = lex.GRANTS
const GREATEST = lex.GREATEST
const GROUP = lex.GROUP
const GROUPING = lex.GROUPING
const GROUPS = lex.GROUPS
const HAVING = lex.HAVING
const HIGH = lex.HIGH
const HISTOGRAM = lex.HISTOGRAM
const HOUR = lex.HOUR
const IMMEDIATE = lex.IMMEDIATE
const IMPORT = lex.IMPORT
const INCREMENT = lex.INCREMENT
const INCREMENTAL = lex.INCREMENTAL
const IF = lex.IF
const IFERROR = lex.IFERROR
const IFNULL = lex.IFNULL
const ILIKE = lex.ILIKE
const IN = lex.IN
const ISERROR = lex.ISERROR
const INET = lex.INET
const INET_CONTAINED_BY_OR_EQUALS = lex.INET_CONTAINED_BY_OR_EQUALS
const INET_CONTAINS_OR_CONTAINED_BY = lex.INET_CONTAINS_OR_CONTAINED_BY
const INET_CONTAINS_OR_EQUALS = lex.INET_CONTAINS_OR_EQUALS
const INDEX = lex.INDEX
const INDEXES = lex.INDEXES
const INJECT = lex.INJECT
const INTERLEAVE = lex.INTERLEAVE
const INITIALLY = lex.INITIALLY
const INNER = lex.INNER
const INSERT = lex.INSERT
const INT = lex.INT
const INT2VECTOR = lex.INT2VECTOR
const INT2 = lex.INT2
const INT4 = lex.INT4
const INT8 = lex.INT8
const INT64 = lex.INT64
const INTEGER = lex.INTEGER
const INTERSECT = lex.INTERSECT
const INTERVAL = lex.INTERVAL
const INTO = lex.INTO
const INVERTED = lex.INVERTED
const IS = lex.IS
const ISNULL = lex.ISNULL
const ISOLATION = lex.ISOLATION
const JOB = lex.JOB
const JOBS = lex.JOBS
const JOIN = lex.JOIN
const JSON = lex.JSON
const JSONB = lex.JSONB
const JSON_SOME_EXISTS = lex.JSON_SOME_EXISTS
const JSON_ALL_EXISTS = lex.JSON_ALL_EXISTS
const KEY = lex.KEY
const KEYS = lex.KEYS
const KV = lex.KV
const LANGUAGE = lex.LANGUAGE
const LATERAL = lex.LATERAL
const LC_CTYPE = lex.LC_CTYPE
const LC_COLLATE = lex.LC_COLLATE
const LEADING = lex.LEADING
const LEASE = lex.LEASE
const LEAST = lex.LEAST
const LEFT = lex.LEFT
const LESS = lex.LESS
const LEVEL = lex.LEVEL
const LIKE = lex.LIKE
const LIMIT = lex.LIMIT
const LIST = lex.LIST
const LOCAL = lex.LOCAL
const LOCALTIME = lex.LOCALTIME
const LOCALTIMESTAMP = lex.LOCALTIMESTAMP
const LOW = lex.LOW
const LSHIFT = lex.LSHIFT
const MATCH = lex.MATCH
const MATERIALIZED = lex.MATERIALIZED
const MINVALUE = lex.MINVALUE
const MAXVALUE = lex.MAXVALUE
const MINUTE = lex.MINUTE
const MONTH = lex.MONTH
const NAN = lex.NAN
const NAME = lex.NAME
const NAMES = lex.NAMES
const NATURAL = lex.NATURAL
const NEXT = lex.NEXT
const NO = lex.NO
const NO_INDEX_JOIN = lex.NO_INDEX_JOIN
const NORMAL = lex.NORMAL
const NOT = lex.NOT
const NOTHING = lex.NOTHING
const NOTNULL = lex.NOTNULL
const NULL = lex.NULL
const NULLIF = lex.NULLIF
const NUMERIC = lex.NUMERIC
const OF = lex.OF
const OFF = lex.OFF
const OFFSET = lex.OFFSET
const OID = lex.OID
const OIDS = lex.OIDS
const OIDVECTOR = lex.OIDVECTOR
const ON = lex.ON
const ONLY = lex.ONLY
const OPTION = lex.OPTION
const OPTIONS = lex.OPTIONS
const OR = lex.OR
const ORDER = lex.ORDER
const ORDINALITY = lex.ORDINALITY
const OUT = lex.OUT
const OUTER = lex.OUTER
const OVER = lex.OVER
const OVERLAPS = lex.OVERLAPS
const OVERLAY = lex.OVERLAY
const OWNED = lex.OWNED
const OPERATOR = lex.OPERATOR
const PARENT = lex.PARENT
const PARTIAL = lex.PARTIAL
const PARTITION = lex.PARTITION
const PASSWORD = lex.PASSWORD
const PAUSE = lex.PAUSE
const PHYSICAL = lex.PHYSICAL
const PLACING = lex.PLACING
const PLANS = lex.PLANS
const POSITION = lex.POSITION
const PRECEDING = lex.PRECEDING
const PRECISION = lex.PRECISION
const PREPARE = lex.PREPARE
const PRIMARY = lex.PRIMARY
const PRIORITY = lex.PRIORITY
const PROCEDURAL = lex.PROCEDURAL
const PUBLICATION = lex.PUBLICATION
const QUERIES = lex.QUERIES
const QUERY = lex.QUERY
const RANGE = lex.RANGE
const RANGES = lex.RANGES
const READ = lex.READ
const REAL = lex.REAL
const RECURSIVE = lex.RECURSIVE
const REF = lex.REF
const REFERENCES = lex.REFERENCES
const REGCLASS = lex.REGCLASS
const REGPROC = lex.REGPROC
const REGPROCEDURE = lex.REGPROCEDURE
const REGNAMESPACE = lex.REGNAMESPACE
const REGTYPE = lex.REGTYPE
const REMOVE_PATH = lex.REMOVE_PATH
const RENAME = lex.RENAME
const REPEATABLE = lex.REPEATABLE
const REPLACE = lex.REPLACE
const RELEASE = lex.RELEASE
const RESET = lex.RESET
const RESTORE = lex.RESTORE
const RESTRICT = lex.RESTRICT
const RESUME = lex.RESUME
const RETURNING = lex.RETURNING
const REVOKE = lex.REVOKE
const RIGHT = lex.RIGHT
const ROLE = lex.ROLE
const ROLES = lex.ROLES
const ROLLBACK = lex.ROLLBACK
const ROLLUP = lex.ROLLUP
const ROW = lex.ROW
const ROWS = lex.ROWS
const RSHIFT = lex.RSHIFT
const RULE = lex.RULE
const SAVEPOINT = lex.SAVEPOINT
const SCATTER = lex.SCATTER
const SCHEMA = lex.SCHEMA
const SCHEMAS = lex.SCHEMAS
const SCRUB = lex.SCRUB
const SEARCH = lex.SEARCH
const SECOND = lex.SECOND
const SELECT = lex.SELECT
const SEQUENCE = lex.SEQUENCE
const SEQUENCES = lex.SEQUENCES
const SERIAL = lex.SERIAL
const SERIAL2 = lex.SERIAL2
const SERIAL4 = lex.SERIAL4
const SERIAL8 = lex.SERIAL8
const SERIALIZABLE = lex.SERIALIZABLE
const SERVER = lex.SERVER
const SESSION = lex.SESSION
const SESSIONS = lex.SESSIONS
const SESSION_USER = lex.SESSION_USER
const SET = lex.SET
const SETTING = lex.SETTING
const SETTINGS = lex.SETTINGS
const SHOW = lex.SHOW
const SIMILAR = lex.SIMILAR
const SIMPLE = lex.SIMPLE
const SMALLINT = lex.SMALLINT
const SMALLSERIAL = lex.SMALLSERIAL
const SNAPSHOT = lex.SNAPSHOT
const SOME = lex.SOME
const SPLIT = lex.SPLIT
const SQL = lex.SQL
const START = lex.START
const STATISTICS = lex.STATISTICS
const STATUS = lex.STATUS
const STDIN = lex.STDIN
const STRICT = lex.STRICT
const STRING = lex.STRING
const STORE = lex.STORE
const STORED = lex.STORED
const STORING = lex.STORING
const SUBSTRING = lex.SUBSTRING
const SYMMETRIC = lex.SYMMETRIC
const SYNTAX = lex.SYNTAX
const SYSTEM = lex.SYSTEM
const SUBSCRIPTION = lex.SUBSCRIPTION
const TABLE = lex.TABLE
const TABLES = lex.TABLES
const TEMP = lex.TEMP
const TEMPLATE = lex.TEMPLATE
const TEMPORARY = lex.TEMPORARY
const TESTING_RANGES = lex.TESTING_RANGES
const EXPERIMENTAL_RANGES = lex.EXPERIMENTAL_RANGES
const TESTING_RELOCATE = lex.TESTING_RELOCATE
const EXPERIMENTAL_RELOCATE = lex.EXPERIMENTAL_RELOCATE
const TEXT = lex.TEXT
const THEN = lex.THEN
const TIME = lex.TIME
const TIMETZ = lex.TIMETZ
const TIMESTAMP = lex.TIMESTAMP
const TIMESTAMPTZ = lex.TIMESTAMPTZ
const TO = lex.TO
const TRAILING = lex.TRAILING
const TRACE = lex.TRACE
const TRANSACTION = lex.TRANSACTION
const TREAT = lex.TREAT
const TRIGGER = lex.TRIGGER
const TRIM = lex.TRIM
const TRUE = lex.TRUE
const TRUNCATE = lex.TRUNCATE
const TRUSTED = lex.TRUSTED
const TYPE = lex.TYPE
const TRACING = lex.TRACING
const UNBOUNDED = lex.UNBOUNDED
const UNCOMMITTED = lex.UNCOMMITTED
const UNION = lex.UNION
const UNIQUE = lex.UNIQUE
const UNKNOWN = lex.UNKNOWN
const UNLOGGED = lex.UNLOGGED
const UPDATE = lex.UPDATE
const UPSERT = lex.UPSERT
const USE = lex.USE
const USER = lex.USER
const USERS = lex.USERS
const USING = lex.USING
const UUID = lex.UUID
const VALID = lex.VALID
const VALIDATE = lex.VALIDATE
const VALUE = lex.VALUE
const VALUES = lex.VALUES
const VARBIT = lex.VARBIT
const VARCHAR = lex.VARCHAR
const VARIADIC = lex.VARIADIC
const VIEW = lex.VIEW
const VARYING = lex.VARYING
const VIRTUAL = lex.VIRTUAL
const WHEN = lex.WHEN
const WHERE = lex.WHERE
const WINDOW = lex.WINDOW
const WITH = lex.WITH
const WITHIN = lex.WITHIN
const WITHOUT = lex.WITHOUT
const WORK = lex.WORK
const WRITE = lex.WRITE
const YEAR = lex.YEAR
const ZONE = lex.ZONE
const NOT_LA = lex.NOT_LA
const WITH_LA = lex.WITH_LA
const AS_LA = lex.AS_LA
const CONTAINED_BY = lex.CONTAINED_BY
const POSTFIXOP = lex.POSTFIXOP
const UMINUS = lex.UMINUS
const HELPTOKEN = lex.HELPTOKEN

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"SCONST",
	"BCONST",
	"BITCONST",
	"ICONST",
	"FCONST",
	"PLACEHOLDER",
	"TYPECAST",
	"TYPEANNOTATE",
	"DOT_DOT",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"NOT_REGMATCH",
	"REGIMATCH",
	"NOT_REGIMATCH",
	"ERROR",
	"ABORT",
	"ACTION",
	"ADD",
	"ADMIN",
	"AGGREGATE",
	"ALL",
	"ALTER",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ANNOTATE_TYPE",
	"ARRAY",
	"AS",
	"ASC",
	"ASYMMETRIC",
	"AT",
	"BACKUP",
	"BEGIN",
	"BETWEEN",
	"BIGINT",
	"BIGSERIAL",
	"BIT",
	"BLOB",
	"BOOL",
	"BOOLEAN",
	"BOTH",
	"BY",
	"BYTEA",
	"BYTES",
	"CACHE",
	"CANCEL",
	"CASCADE",
	"CASE",
	"CAST",
	"CHANGEFEED",
	"CHAR",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COLUMNS",
	"COMMENT",
	"COMMIT",
	"COMMITTED",
	"COMPACT",
	"CONCAT",
	"CONFIGURATION",
	"CONFIGURATIONS",
	"CONFIGURE",
	"CONFLICT",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTAINS",
	"CONVERSION",
	"COPY",
	"COVERING",
	"CREATE",
	"CROSS",
	"CUBE",
	"CURRENT",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_SCHEMA",
	"CURRENT_ROLE",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CYCLE",
	"DATA",
	"DATABASE",
	"DATABASES",
	"DATE",
	"DAY",
	"DEC",
	"DECIMAL",
	"DEFAULT",
	"DEALLOCATE",
	"DEFERRABLE",
	"DEFERRED",
	"DELETE",
	"DESC",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOMAIN",
	"DOUBLE",
	"DROP",
	"ELSE",
	"ENCODING",
	"END",
	"ENUM",
	"ESCAPE",
	"EXCEPT",
	"EXISTS",
	"EXECUTE",
	"EXPERIMENTAL",
	"EXPERIMENTAL_FINGERPRINTS",
	"EXPERIMENTAL_REPLICA",
	"EXPERIMENTAL_AUDIT",
	"EXPLAIN",
	"EXPORT",
	"EXTENSION",
	"EXTRACT",
	"EXTRACT_DURATION",
	"FALSE",
	"FAMILY",
	"FETCH",
	"FETCHVAL",
	"FETCHTEXT",
	"FETCHVAL_PATH",
	"FETCHTEXT_PATH",
	"FILES",
	"FILTER",
	"FIRST",
	"FLOAT",
	"FLOAT4",
	"FLOAT8",
	"FLOORDIV",
	"FOLLOWING",
	"FOR",
	"FORCE_INDEX",
	"FOREIGN",
	"FROM",
	"FULL",
	"FUNCTION",
	"GLOBAL",
	"GRANT",
	"GRANTS",
	"GREATEST",
	"GROUP",
	"GROUPING",
	"GROUPS",
	"HAVING",
	"HIGH",
	"HISTOGRAM",
	"HOUR",
	"IMMEDIATE",
	"IMPORT",
	"INCREMENT",
	"INCREMENTAL",
	"IF",
	"IFERROR",
	"IFNULL",
	"ILIKE",
	"IN",
	"ISERROR",
	"INET",
	"INET_CONTAINED_BY_OR_EQUALS",
	"INET_CONTAINS_OR_CONTAINED_BY",
	"INET_CONTAINS_OR_EQUALS",
	"INDEX",
	"INDEXES",
	"INJECT",
	"INTERLEAVE",
	"INITIALLY",
	"INNER",
	"INSERT",
	"INT",
	"INT2VECTOR",
	"INT2",
	"INT4",
	"INT8",
	"INT64",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVERTED",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOB",
	"JOBS",
	"JOIN",
	"JSON",
	"JSONB",
	"JSON_SOME_EXISTS",
	"JSON_ALL_EXISTS",
	"KEY",
	"KEYS",
	"KV",
	"LANGUAGE",
	"LATERAL",
	"LC_CTYPE",
	"LC_COLLATE",
	"LEADING",
	"LEASE",
	"LEAST",
	"LEFT",
	"LESS",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LIST",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOW",
	"LSHIFT",
	"MATCH",
	"MATERIALIZED",
	"MINVALUE",
	"MAXVALUE",
	"MINUTE",
	"MONTH",
	"NAN",
	"NAME",
	"NAMES",
	"NATURAL",
	"NEXT",
	"NO",
	"NO_INDEX_JOIN",
	"NORMAL",
	"NOT",
	"NOTHING",
	"NOTNULL",
	"NULL",
	"NULLIF",
	"NUMERIC",
	"OF",
	"OFF",
	"OFFSET",
	"OID",
	"OIDS",
	"OIDVECTOR",
	"ON",
	"ONLY",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT",
	"OUTER",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OPERATOR",
	"PARENT",
	"PARTIAL",
	"PARTITION",
	"PASSWORD",
	"PAUSE",
	"PHYSICAL",
	"PLACING",
	"PLANS",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PREPARE",
	"PRIMARY",
	"PRIORITY",
	"PROCEDURAL",
	"PUBLICATION",
	"QUERIES",
	"QUERY",
	"RANGE",
	"RANGES",
	"READ",
	"REAL",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REGCLASS",
	"REGPROC",
	"REGPROCEDURE",
	"REGNAMESPACE",
	"REGTYPE",
	"REMOVE_PATH",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"RELEASE",
	"RESET",
	"RESTORE",
	"RESTRICT",
	"RESUME",
	"RETURNING",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLES",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RSHIFT",
	"RULE",
	"SAVEPOINT",
	"SCATTER",
	"SCHEMA",
	"SCHEMAS",
	"SCRUB",
	"SEARCH",
	"SECOND",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIAL",
	"SERIAL2",
	"SERIAL4",
	"SERIAL8",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSIONS",
	"SESSION_USER",
	"SET",
	"SETTING",
	"SETTINGS",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SMALLINT",
	"SMALLSERIAL",
	"SNAPSHOT",
	"SOME",
	"SPLIT",
	"SQL",
	"START",
	"STATISTICS",
	"STATUS",
	"STDIN",
	"STRICT",
	"STRING",
	"STORE",
	"STORED",
	"STORING",
	"SUBSTRING",
	"SYMMETRIC",
	"SYNTAX",
	"SYSTEM",
	"SUBSCRIPTION",
	"TABLE",
	"TABLES",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TESTING_RANGES",
	"EXPERIMENTAL_RANGES",
	"TESTING_RELOCATE",
	"EXPERIMENTAL_RELOCATE",
	"TEXT",
	"THEN",
	"TIME",
	"TIMETZ",
	"TIMESTAMP",
	"TIMESTAMPTZ",
	"TO",
	"TRAILING",
	"TRACE",
	"TRANSACTION",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE",
	"TRUNCATE",
	"TRUSTED",
	"TYPE",
	"TRACING",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLOGGED",
	"UPDATE",
	"UPSERT",
	"USE",
	"USER",
	"USERS",
	"USING",
	"UUID",
	"VALID",
	"VALIDATE",
	"VALUE",
	"VALUES",
	"VARBIT",
	"VARCHAR",
	"VARIADIC",
	"VIEW",
	"VARYING",
	"VIRTUAL",
	"WHEN",
	"WHERE",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRITE",
	"YEAR",
	"ZONE",
	"NOT_LA",
	"WITH_LA",
	"AS_LA",
	"'<'",
	"'>'",
	"'='",
	"CONTAINED_BY",
	"'?'",
	"'~'",
	"POSTFIXOP",
	"'|'",
	"'#'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"HELPTOKEN",
	"';'",
	"','",
	"'@'",
	"'{'",
	"'}'",
	"':'",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql-gen.y:9178

//line yacctab:1
var sqlExca = [...]int{
	-1, 0,
	1, 28,
	446, 28,
	-2, 956,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 70,
	176, 793,
	193, 793,
	207, 228,
	279, 228,
	287, 649,
	314, 228,
	323, 649,
	360, 649,
	384, 228,
	407, 649,
	-2, 0,
	-1, 76,
	207, 232,
	-2, 0,
	-1, 77,
	105, 956,
	182, 956,
	393, 956,
	394, 956,
	-2, 0,
	-1, 88,
	118, 930,
	132, 930,
	190, 930,
	218, 930,
	247, 930,
	256, 930,
	389, 930,
	-2, 917,
	-1, 116,
	123, 575,
	206, 575,
	377, 575,
	-2, 0,
	-1, 117,
	4, 958,
	21, 958,
	22, 958,
	23, 958,
	24, 958,
	25, 958,
	27, 958,
	32, 958,
	37, 958,
	38, 958,
	39, 958,
	40, 958,
	41, 958,
	42, 958,
	43, 958,
	44, 958,
	45, 958,
	46, 958,
	48, 958,
	49, 958,
	50, 958,
	51, 958,
	52, 958,
	53, 958,
	56, 958,
	57, 958,
	58, 958,
	59, 958,
	61, 958,
	62, 958,
	66, 958,
	67, 958,
	68, 958,
	69, 958,
	70, 958,
	72, 958,
	73, 958,
	74, 958,
	75, 958,
	77, 958,
	79, 958,
	80, 958,
	81, 958,
	84, 958,
	85, 958,
	93, 958,
	94, 958,
	95, 958,
	96, 958,
	97, 958,
	98, 958,
	99, 958,
	100, 958,
	102, 958,
	104, 958,
	105, 958,
	107, 958,
	110, 958,
	111, 958,
	112, 958,
	114, 958,
	116, 958,
	117, 958,
	119, 958,
	120, 958,
	121, 958,
	122, 958,
	123, 958,
	124, 958,
	125, 958,
	126, 958,
	127, 958,
	128, 958,
	129, 958,
	131, 958,
	137, 958,
	138, 958,
	139, 958,
	140, 958,
	141, 958,
	142, 958,
	144, 958,
	146, 958,
	150, 958,
	151, 958,
	153, 958,
	154, 958,
	156, 958,
	157, 958,
	159, 958,
	160, 958,
	161, 958,
	162, 958,
	163, 958,
	164, 958,
	165, 958,
	166, 958,
	167, 958,
	168, 958,
	171, 958,
	172, 958,
	176, 958,
	177, 958,
	178, 958,
	179, 958,
	182, 958,
	183, 958,
	184, 958,
	185, 958,
	186, 958,
	187, 958,
	188, 958,
	189, 958,
	191, 958,
	193, 958,
	196, 958,
	197, 958,
	198, 958,
	200, 958,
	201, 958,
	204, 958,
	205, 958,
	206, 958,
	207, 958,
	209, 958,
	210, 958,
	212, 958,
	213, 958,
	215, 958,
	216, 958,
	219, 958,
	220, 958,
	223, 958,
	225, 958,
	226, 958,
	227, 958,
	228, 958,
	229, 958,
	230, 958,
	231, 958,
	232, 958,
	233, 958,
	235, 958,
	236, 958,
	237, 958,
	238, 958,
	240, 958,
	243, 958,
	244, 958,
	245, 958,
	246, 958,
	248, 958,
	249, 958,
	250, 958,
	252, 958,
	253, 958,
	254, 958,
	257, 958,
	258, 958,
	260, 958,
	262, 958,
	263, 958,
	264, 958,
	265, 958,
	266, 958,
	267, 958,
	268, 958,
	269, 958,
	270, 958,
	272, 958,
	273, 958,
	274, 958,
	275, 958,
	276, 958,
	278, 958,
	280, 958,
	281, 958,
	282, 958,
	283, 958,
	284, 958,
	285, 958,
	286, 958,
	287, 958,
	288, 958,
	290, 958,
	291, 958,
	292, 958,
	293, 958,
	294, 958,
	296, 958,
	297, 958,
	298, 958,
	299, 958,
	300, 958,
	301, 958,
	302, 958,
	303, 958,
	305, 958,
	307, 958,
	308, 958,
	309, 958,
	310, 958,
	311, 958,
	312, 958,
	314, 958,
	315, 958,
	316, 958,
	317, 958,
	318, 958,
	319, 958,
	320, 958,
	321, 958,
	323, 958,
	324, 958,
	325, 958,
	326, 958,
	327, 958,
	328, 958,
	329, 958,
	330, 958,
	331, 958,
	332, 958,
	334, 958,
	335, 958,
	336, 958,
	337, 958,
	339, 958,
	340, 958,
	341, 958,
	342, 958,
	344, 958,
	345, 958,
	346, 958,
	347, 958,
	348, 958,
	349, 958,
	350, 958,
	351, 958,
	352, 958,
	353, 958,
	354, 958,
	355, 958,
	357, 958,
	358, 958,
	359, 958,
	361, 958,
	362, 958,
	363, 958,
	364, 958,
	365, 958,
	366, 958,
	367, 958,
	368, 958,
	369, 958,
	371, 958,
	372, 958,
	373, 958,
	374, 958,
	377, 958,
	378, 958,
	379, 958,
	380, 958,
	381, 958,
	383, 958,
	384, 958,
	385, 958,
	387, 958,
	388, 958,
	391, 958,
	392, 958,
	393, 958,
	394, 958,
	395, 958,
	397, 958,
	399, 958,
	400, 958,
	401, 958,
	402, 958,
	403, 958,
	404, 958,
	405, 958,
	407, 958,
	408, 958,
	409, 958,
	414, 958,
	415, 958,
	416, 958,
	417, 958,
	418, 958,
	419, 958,
	-2, 0,
	-1, 118,
	1, 850,
	196, 850,
	278, 850,
	285, 850,
	445, 850,
	446, 850,
	-2, 0,
	-1, 120,
	1, 850,
	445, 850,
	446, 850,
	-2, 0,
	-1, 121,
	1, 850,
	445, 850,
	446, 850,
	-2, 0,
	-1, 122,
	1, 854,
	445, 854,
	446, 854,
	-2, 0,
	-1, 146,
	118, 929,
	132, 929,
	190, 929,
	218, 929,
	247, 929,
	256, 929,
	389, 929,
	-2, 926,
	-1, 176,
	4, 965,
	5, 965,
	6, 965,
	7, 965,
	8, 965,
	9, 965,
	10, 965,
	21, 965,
	22, 965,
	23, 965,
	24, 965,
	25, 965,
	27, 965,
	32, 965,
	33, 965,
	37, 965,
	38, 965,
	39, 965,
	40, 965,
	41, 965,
	42, 965,
	43, 965,
	44, 965,
	45, 965,
	46, 965,
	48, 965,
	49, 965,
	50, 965,
	51, 965,
	52, 965,
	53, 965,
	54, 965,
	55, 965,
	56, 965,
	57, 965,
	58, 965,
	59, 965,
	61, 965,
	62, 965,
	64, 965,
	66, 965,
	67, 965,
	68, 965,
	69, 965,
	70, 965,
	72, 965,
	73, 965,
	74, 965,
	75, 965,
	77, 965,
	79, 965,
	80, 965,
	81, 965,
	83, 965,
	84, 965,
	85, 965,
	86, 965,
	87, 965,
	88, 965,
	89, 965,
	90, 965,
	91, 965,
	92, 965,
	93, 965,
	94, 965,
	95, 965,
	96, 965,
	97, 965,
	98, 965,
	99, 965,
	100, 965,
	101, 965,
	102, 965,
	104, 965,
	105, 965,
	107, 965,
	110, 965,
	111, 965,
	112, 965,
	114, 965,
	116, 965,
	117, 965,
	119, 965,
	120, 965,
	121, 965,
	122, 965,
	123, 965,
	124, 965,
	125, 965,
	126, 965,
	127, 965,
	128, 965,
	129, 965,
	130, 965,
	131, 965,
	137, 965,
	138, 965,
	139, 965,
	140, 965,
	141, 965,
	142, 965,
	144, 965,
	146, 965,
	149, 965,
	150, 965,
	151, 965,
	153, 965,
	154, 965,
	156, 965,
	157, 965,
	159, 965,
	160, 965,
	161, 965,
	162, 965,
	163, 965,
	164, 965,
	165, 965,
	166, 965,
	167, 965,
	168, 965,
	169, 965,
	171, 965,
	172, 965,
	176, 965,
	177, 965,
	178, 965,
	179, 965,
	181, 965,
	182, 965,
	183, 965,
	184, 965,
	185, 965,
	186, 965,
	187, 965,
	188, 965,
	189, 965,
	191, 965,
	193, 965,
	194, 965,
	195, 965,
	196, 965,
	197, 965,
	198, 965,
	199, 965,
	200, 965,
	201, 965,
	204, 965,
	205, 965,
	206, 965,
	207, 965,
	209, 965,
	210, 965,
	212, 965,
	213, 965,
	214, 965,
	215, 965,
	216, 965,
	217, 965,
	219, 965,
	220, 965,
	223, 965,
	225, 965,
	226, 965,
	227, 965,
	228, 965,
	229, 965,
	230, 965,
	231, 965,
	232, 965,
	233, 965,
	234, 965,
	235, 965,
	236, 965,
	237, 965,
	238, 965,
	239, 965,
	240, 965,
	241, 965,
	242, 965,
	243, 965,
	244, 965,
	245, 965,
	246, 965,
	248, 965,
	249, 965,
	250, 965,
	253, 965,
	254, 965,
	257, 965,
	258, 965,
	259, 965,
	260, 965,
	261, 965,
	262, 965,
	263, 965,
	264, 965,
	265, 965,
	266, 965,
	267, 965,
	268, 965,
	269, 965,
	270, 965,
	272, 965,
	273, 965,
	274, 965,
	275, 965,
	276, 965,
	278, 965,
	280, 965,
	281, 965,
	282, 965,
	283, 965,
	284, 965,
	285, 965,
	286, 965,
	287, 965,
	288, 965,
	290, 965,
	291, 965,
	292, 965,
	293, 965,
	294, 965,
	296, 965,
	297, 965,
	298, 965,
	299, 965,
	300, 965,
	301, 965,
	302, 965,
	303, 965,
	305, 965,
	306, 965,
	307, 965,
	308, 965,
	309, 965,
	310, 965,
	311, 965,
	312, 965,
	314, 965,
	315, 965,
	316, 965,
	317, 965,
	318, 965,
	319, 965,
	320, 965,
	321, 965,
	323, 965,
	324, 965,
	325, 965,
	326, 965,
	327, 965,
	328, 965,
	329, 965,
	330, 965,
	331, 965,
	332, 965,
	333, 965,
	334, 965,
	335, 965,
	336, 965,
	337, 965,
	338, 965,
	339, 965,
	340, 965,
	341, 965,
	342, 965,
	344, 965,
	345, 965,
	346, 965,
	347, 965,
	348, 965,
	349, 965,
	350, 965,
	351, 965,
	352, 965,
	353, 965,
	354, 965,
	355, 965,
	357, 965,
	358, 965,
	359, 965,
	361, 965,
	362, 965,
	363, 965,
	364, 965,
	365, 965,
	366, 965,
	367, 965,
	368, 965,
	369, 965,
	371, 965,
	372, 965,
	373, 965,
	374, 965,
	377, 965,
	378, 965,
	379, 965,
	380, 965,
	381, 965,
	382, 965,
	383, 965,
	384, 965,
	385, 965,
	387, 965,
	388, 965,
	390, 965,
	391, 965,
	392, 965,
	393, 965,
	394, 965,
	395, 965,
	396, 965,
	397, 965,
	399, 965,
	400, 965,
	401, 965,
	402, 965,
	403, 965,
	404, 965,
	405, 965,
	407, 965,
	408, 965,
	409, 965,
	414, 965,
	415, 965,
	416, 965,
	417, 965,
	418, 965,
	419, 965,
	420, 965,
	428, 965,
	433, 965,
	434, 965,
	435, 965,
	442, 965,
	448, 965,
	-2, 0,
	-1, 179,
	1, 28,
	446, 28,
	-2, 956,
	-1, 536,
	148, 1617,
	375, 1617,
	425, 1617,
	444, 1617,
	-2, 0,
	-1, 537,
	148, 1693,
	375, 1693,
	425, 1693,
	444, 1693,
	-2, 0,
	-1, 538,
	148, 1607,
	375, 1607,
	425, 1607,
	444, 1607,
	-2, 0,
	-1, 540,
	148, 1775,
	375, 1775,
	425, 1775,
	444, 1775,
	-2, 0,
	-1, 542,
	148, 1804,
	375, 1804,
	425, 1804,
	444, 1804,
	-2, 0,
	-1, 549,
	148, 1701,
	375, 1701,
	425, 1701,
	444, 1701,
	-2, 450,
	-1, 566,
	444, 1567,
	447, 1567,
	-2, 618,
	-1, 567,
	444, 1569,
	447, 1569,
	-2, 619,
	-1, 568,
	444, 1568,
	447, 1568,
	-2, 620,
	-1, 569,
	447, 1516,
	-2, 621,
	-1, 713,
	1, 548,
	441, 548,
	443, 548,
	445, 548,
	446, 548,
	-2, 0,
	-1, 714,
	1, 617,
	145, 617,
	441, 617,
	443, 617,
	445, 617,
	446, 617,
	-2, 0,
	-1, 720,
	1, 562,
	441, 562,
	443, 562,
	445, 562,
	446, 562,
	-2, 0,
	-1, 722,
	1, 566,
	441, 566,
	443, 566,
	445, 566,
	446, 566,
	-2, 0,
	-1, 724,
	1, 576,
	441, 576,
	443, 576,
	445, 576,
	446, 576,
	-2, 0,
	-1, 725,
	1, 582,
	441, 582,
	443, 582,
	445, 582,
	446, 582,
	-2, 0,
	-1, 726,
	1, 585,
	441, 585,
	443, 585,
	445, 585,
	446, 585,
	-2, 0,
	-1, 730,
	1, 599,
	441, 599,
	443, 599,
	445, 599,
	446, 599,
	-2, 0,
	-1, 731,
	1, 601,
	441, 601,
	443, 601,
	445, 601,
	446, 601,
	-2, 0,
	-1, 774,
	132, 969,
	218, 969,
	247, 969,
	-2, 926,
	-1, 789,
	132, 968,
	218, 968,
	247, 968,
	-2, 926,
	-1, 813,
	444, 1566,
	-2, 458,
	-1, 842,
	442, 1558,
	-2, 1549,
	-1, 848,
	5, 1093,
	-2, 1598,
	-1, 849,
	5, 1094,
	-2, 1602,
	-1, 850,
	5, 1095,
	-2, 1601,
	-1, 851,
	5, 1096,
	-2, 1801,
	-1, 852,
	5, 1097,
	-2, 1703,
	-1, 853,
	5, 1098,
	-2, 1767,
	-1, 854,
	5, 1099,
	-2, 1769,
	-1, 855,
	5, 1100,
	-2, 1780,
	-1, 856,
	5, 1101,
	-2, 1770,
	-1, 857,
	5, 1102,
	-2, 1771,
	-1, 858,
	5, 1103,
	-2, 1597,
	-1, 859,
	5, 1104,
	-2, 1815,
	-1, 860,
	5, 1105,
	-2, 1668,
	-1, 861,
	5, 1106,
	-2, 1710,
	-1, 862,
	5, 1107,
	-2, 1712,
	-1, 863,
	5, 1108,
	-2, 1672,
	-1, 864,
	5, 1109,
	442, 1576,
	-2, 1567,
	-1, 865,
	5, 1162,
	442, 1162,
	-2, 1850,
	-1, 870,
	442, 1577,
	-2, 1568,
	-1, 872,
	5, 1113,
	-2, 1848,
	-1, 873,
	5, 1114,
	-2, 1849,
	-1, 874,
	5, 1115,
	-2, 1671,
	-1, 875,
	5, 1116,
	-2, 1861,
	-1, 876,
	5, 1117,
	-2, 1673,
	-1, 877,
	5, 1118,
	-2, 1674,
	-1, 878,
	5, 1119,
	-2, 1675,
	-1, 879,
	5, 1120,
	-2, 1830,
	-1, 880,
	5, 1121,
	-2, 1859,
	-1, 881,
	5, 1122,
	-2, 1652,
	-1, 882,
	5, 1123,
	-2, 1653,
	-1, 883,
	5, 1137,
	-2, 1842,
	-1, 885,
	5, 1112,
	-2, 1838,
	-1, 886,
	5, 1112,
	-2, 1837,
	-1, 887,
	5, 1112,
	-2, 1854,
	-1, 888,
	5, 1129,
	-2, 1832,
	-1, 889,
	5, 1130,
	-2, 1599,
	-1, 890,
	5, 1140,
	-2, 1831,
	-1, 891,
	5, 1142,
	-2, 1869,
	-1, 893,
	5, 1153,
	-2, 1627,
	-1, 894,
	5, 1154,
	-2, 1863,
	-1, 895,
	5, 1156,
	-2, 1864,
	-1, 896,
	5, 1158,
	-2, 1865,
	-1, 897,
	5, 1160,
	-2, 1802,
	-1, 898,
	5, 1080,
	-2, 1681,
	-1, 899,
	5, 1081,
	-2, 1682,
	-1, 900,
	444, 1564,
	-2, 1548,
	-1, 901,
	442, 1889,
	-2, 1565,
	-1, 921,
	5, 1148,
	-2, 1790,
	-1, 938,
	5, 1147,
	-2, 1870,
	-1, 948,
	5, 1149,
	408, 1149,
	-2, 1833,
	-1, 949,
	5, 1150,
	408, 1150,
	-2, 1834,
	-1, 985,
	442, 1576,
	-2, 1567,
	-1, 1014,
	148, 1804,
	375, 1804,
	425, 1804,
	444, 1804,
	-2, 0,
	-1, 1015,
	196, 862,
	278, 862,
	285, 862,
	-2, 438,
	-1, 1133,
	296, 1546,
	435, 1546,
	-2, 1545,
	-1, 1189,
	287, 649,
	407, 649,
	-2, 227,
	-1, 1209,
	268, 954,
	-2, 766,
	-1, 1218,
	251, 1571,
	-2, 0,
	-1, 1282,
	1, 330,
	441, 330,
	443, 330,
	445, 330,
	446, 330,
	-2, 928,
	-1, 1285,
	4, 1868,
	11, 1868,
	12, 1868,
	14, 1868,
	15, 1868,
	16, 1868,
	17, 1868,
	18, 1868,
	19, 1868,
	21, 1868,
	22, 1868,
	23, 1868,
	24, 1868,
	25, 1868,
	27, 1868,
	30, 1868,
	32, 1868,
	34, 1868,
	37, 1868,
	38, 1868,
	39, 1868,
	40, 1868,
	41, 1868,
	42, 1868,
	43, 1868,
	44, 1868,
	45, 1868,
	46, 1868,
	48, 1868,
	49, 1868,
	50, 1868,
	51, 1868,
	52, 1868,
	53, 1868,
	56, 1868,
	57, 1868,
	58, 1868,
	59, 1868,
	61, 1868,
	62, 1868,
	63, 1868,
	66, 1868,
	67, 1868,
	68, 1868,
	69, 1868,
	70, 1868,
	71, 1868,
	72, 1868,
	73, 1868,
	74, 1868,
	75, 1868,
	77, 1868,
	78, 1868,
	79, 1868,
	80, 1868,
	81, 1868,
	83, 1868,
	84, 1868,
	85, 1868,
	93, 1868,
	94, 1868,
	95, 1868,
	96, 1868,
	97, 1868,
	98, 1868,
	99, 1868,
	100, 1868,
	102, 1868,
	104, 1868,
	105, 1868,
	107, 1868,
	110, 1868,
	111, 1868,
	112, 1868,
	114, 1868,
	116, 1868,
	117, 1868,
	119, 1868,
	120, 1868,
	121, 1868,
	122, 1868,
	123, 1868,
	124, 1868,
	125, 1868,
	126, 1868,
	127, 1868,
	128, 1868,
	129, 1868,
	133, 1868,
	134, 1868,
	135, 1868,
	136, 1868,
	137, 1868,
	138, 1868,
	139, 1868,
	140, 1868,
	141, 1868,
	142, 1868,
	143, 1868,
	144, 1868,
	146, 1868,
	149, 1868,
	150, 1868,
	151, 1868,
	153, 1868,
	154, 1868,
	156, 1868,
	157, 1868,
	159, 1868,
	160, 1868,
	161, 1868,
	162, 1868,
	163, 1868,
	164, 1868,
	165, 1868,
	166, 1868,
	167, 1868,
	168, 1868,
	169, 1868,
	170, 1868,
	171, 1868,
	172, 1868,
	173, 1868,
	174, 1868,
	175, 1868,
	177, 1868,
	178, 1868,
	179, 1868,
	181, 1868,
	182, 1868,
	183, 1868,
	184, 1868,
	185, 1868,
	186, 1868,
	187, 1868,
	188, 1868,
	189, 1868,
	191, 1868,
	193, 1868,
	194, 1868,
	195, 1868,
	196, 1868,
	197, 1868,
	198, 1868,
	199, 1868,
	200, 1868,
	201, 1868,
	202, 1868,
	203, 1868,
	204, 1868,
	205, 1868,
	206, 1868,
	207, 1868,
	209, 1868,
	210, 1868,
	212, 1868,
	213, 1868,
	214, 1868,
	215, 1868,
	216, 1868,
	217, 1868,
	219, 1868,
	220, 1868,
	223, 1868,
	224, 1868,
	225, 1868,
	226, 1868,
	227, 1868,
	228, 1868,
	229, 1868,
	230, 1868,
	231, 1868,
	232, 1868,
	233, 1868,
	234, 1868,
	235, 1868,
	236, 1868,
	237, 1868,
	238, 1868,
	241, 1868,
	243, 1868,
	244, 1868,
	245, 1868,
	246, 1868,
	248, 1868,
	249, 1868,
	250, 1868,
	253, 1868,
	254, 1868,
	255, 1868,
	257, 1868,
	258, 1868,
	260, 1868,
	262, 1868,
	263, 1868,
	264, 1868,
	265, 1868,
	266, 1868,
	267, 1868,
	268, 1868,
	269, 1868,
	270, 1868,
	272, 1868,
	273, 1868,
	274, 1868,
	275, 1868,
	276, 1868,
	278, 1868,
	280, 1868,
	281, 1868,
	282, 1868,
	283, 1868,
	284, 1868,
	285, 1868,
	286, 1868,
	287, 1868,
	288, 1868,
	290, 1868,
	291, 1868,
	292, 1868,
	293, 1868,
	294, 1868,
	295, 1868,
	296, 1868,
	297, 1868,
	298, 1868,
	299, 1868,
	300, 1868,
	301, 1868,
	302, 1868,
	303, 1868,
	305, 1868,
	306, 1868,
	307, 1868,
	308, 1868,
	309, 1868,
	310, 1868,
	311, 1868,
	312, 1868,
	313, 1868,
	314, 1868,
	315, 1868,
	316, 1868,
	317, 1868,
	318, 1868,
	319, 1868,
	320, 1868,
	321, 1868,
	323, 1868,
	324, 1868,
	325, 1868,
	326, 1868,
	327, 1868,
	328, 1868,
	329, 1868,
	330, 1868,
	331, 1868,
	332, 1868,
	334, 1868,
	335, 1868,
	336, 1868,
	337, 1868,
	338, 1868,
	339, 1868,
	340, 1868,
	341, 1868,
	342, 1868,
	344, 1868,
	345, 1868,
	346, 1868,
	347, 1868,
	348, 1868,
	349, 1868,
	350, 1868,
	351, 1868,
	352, 1868,
	353, 1868,
	354, 1868,
	355, 1868,
	357, 1868,
	358, 1868,
	359, 1868,
	361, 1868,
	362, 1868,
	363, 1868,
	364, 1868,
	365, 1868,
	366, 1868,
	367, 1868,
	368, 1868,
	369, 1868,
	371, 1868,
	372, 1868,
	373, 1868,
	374, 1868,
	377, 1868,
	378, 1868,
	379, 1868,
	380, 1868,
	381, 1868,
	383, 1868,
	384, 1868,
	385, 1868,
	387, 1868,
	388, 1868,
	391, 1868,
	392, 1868,
	393, 1868,
	394, 1868,
	395, 1868,
	397, 1868,
	399, 1868,
	400, 1868,
	401, 1868,
	402, 1868,
	403, 1868,
	404, 1868,
	405, 1868,
	407, 1868,
	408, 1868,
	409, 1868,
	414, 1868,
	415, 1868,
	416, 1868,
	417, 1868,
	418, 1868,
	419, 1868,
	420, 1868,
	421, 1868,
	423, 1868,
	424, 1868,
	425, 1868,
	426, 1868,
	427, 1868,
	428, 1868,
	430, 1868,
	431, 1868,
	432, 1868,
	433, 1868,
	434, 1868,
	435, 1868,
	436, 1868,
	437, 1868,
	438, 1868,
	440, 1868,
	443, 1868,
	444, 1868,
	447, 1868,
	448, 1868,
	-2, 0,
	-1, 1288,
	148, 1775,
	375, 1775,
	425, 1775,
	444, 1775,
	-2, 0,
	-1, 1355,
	1, 1822,
	441, 1822,
	443, 1822,
	444, 1822,
	445, 1822,
	446, 1822,
	-2, 597,
	-1, 1356,
	1, 1773,
	441, 1773,
	443, 1773,
	444, 1773,
	445, 1773,
	446, 1773,
	-2, 598,
	-1, 1369,
	196, 862,
	278, 862,
	285, 862,
	-2, 857,
	-1, 1374,
	132, 968,
	218, 968,
	247, 968,
	-2, 926,
	-1, 1467,
	118, 930,
	132, 930,
	190, 930,
	218, 930,
	247, 930,
	256, 930,
	389, 930,
	-2, 1318,
	-1, 1516,
	443, 1451,
	-2, 0,
	-1, 1551,
	118, 930,
	132, 930,
	190, 930,
	218, 930,
	247, 930,
	256, 930,
	389, 930,
	-2, 1038,
	-1, 1604,
	442, 1152,
	-2, 1140,
	-1, 1643,
	196, 862,
	278, 862,
	285, 862,
	-2, 440,
	-1, 1892,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1198,
	-1, 1893,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1199,
	-1, 1894,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1200,
	-1, 1895,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1201,
	-1, 1896,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1202,
	-1, 1897,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1203,
	-1, 1898,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1204,
	-1, 1899,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1205,
	-1, 1911,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1217,
	-1, 1912,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1218,
	-1, 1913,
	14, 0,
	15, 0,
	16, 0,
	78, 0,
	202, 0,
	203, 0,
	423, 0,
	424, 0,
	425, 0,
	426, 0,
	427, 0,
	-2, 1219,
	-1, 1916,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1224,
	-1, 1922,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1228,
	-1, 1924,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1236,
	-1, 1925,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1237,
	-1, 1926,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1238,
	-1, 1927,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1239,
	-1, 2018,
	5, 1109,
	148, 1462,
	442, 1576,
	-2, 1567,
	-1, 2019,
	148, 1463,
	-2, 1826,
	-1, 2020,
	148, 1464,
	-2, 1700,
	-1, 2021,
	148, 1465,
	-2, 1628,
	-1, 2022,
	148, 1466,
	-2, 1662,
	-1, 2023,
	148, 1467,
	-2, 1698,
	-1, 2024,
	148, 1468,
	-2, 1766,
	-1, 2092,
	1, 1039,
	83, 1039,
	118, 1039,
	132, 1039,
	145, 1039,
	149, 1039,
	155, 1039,
	158, 1039,
	181, 1039,
	190, 1039,
	199, 1039,
	214, 1039,
	218, 1039,
	234, 1039,
	247, 1039,
	251, 1039,
	256, 1039,
	304, 1039,
	306, 1039,
	389, 1039,
	398, 1039,
	411, 1039,
	412, 1039,
	413, 1039,
	422, 1039,
	441, 1039,
	443, 1039,
	445, 1039,
	446, 1039,
	447, 1039,
	-2, 1038,
	-1, 2097,
	442, 1550,
	-2, 1562,
	-1, 2116,
	442, 1151,
	-2, 1141,
	-1, 2325,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1226,
	-1, 2326,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1230,
	-1, 2332,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1232,
	-1, 2506,
	196, 862,
	278, 862,
	285, 862,
	-2, 437,
	-1, 2577,
	443, 1521,
	447, 1521,
	-2, 1537,
	-1, 2589,
	268, 954,
	-2, 766,
	-1, 2666,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1234,
	-1, 2673,
	194, 0,
	195, 0,
	241, 0,
	-2, 1253,
	-1, 2734,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1282,
	-1, 2735,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1283,
	-1, 2736,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1284,
	-1, 2740,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1288,
	-1, 2741,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1289,
	-1, 2742,
	14, 0,
	15, 0,
	16, 0,
	423, 0,
	424, 0,
	425, 0,
	-2, 1290,
	-1, 2784,
	442, 1551,
	-2, 1563,
	-1, 2863,
	444, 1971,
	-2, 903,
	-1, 2904,
	194, 0,
	195, 0,
	241, 0,
	-2, 1254,
	-1, 2907,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1257,
	-1, 2908,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1259,
	-1, 3049,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1258,
	-1, 3050,
	17, 0,
	18, 0,
	19, 0,
	40, 0,
	169, 0,
	170, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1260,
	-1, 3060,
	194, 0,
	-2, 1291,
	-1, 3150,
	194, 0,
	-2, 1292,
	-1, 3256,
	40, 0,
	169, 0,
	217, 0,
	338, 0,
	420, 0,
	428, 0,
	-2, 1829,
}

const sqlPrivate = 57344

const sqlLast = 66974

var sqlAct = [...]int{

	870, 3088, 3336, 3113, 3005, 3255, 3265, 3231, 3326, 3091,
	2240, 3229, 2578, 3266, 2049, 3215, 3228, 2802, 3267, 1807,
	2248, 3077, 2704, 3254, 3116, 3154, 3018, 1879, 2514, 2854,
	2849, 1939, 2606, 2963, 1274, 3041, 2859, 799, 2084, 1574,
	208, 2353, 208, 208, 2575, 2598, 208, 208, 208, 208,
	208, 2600, 547, 208, 1382, 2803, 1137, 3064, 790, 2280,
	2483, 568, 2611, 2237, 1038, 2218, 2472, 978, 1546, 2215,
	2318, 2080, 2432, 1575, 987, 1786, 2351, 1544, 1130, 208,
	664, 2279, 2939, 568, 1765, 2249, 1768, 2271, 1465, 2448,
	2273, 1695, 1758, 1525, 2459, 2085, 1686, 1757, 2137, 2146,
	2431, 1876, 3155, 2757, 1475, 2198, 1952, 1872, 2314, 1149,
	2216, 1270, 1713, 2610, 1970, 1672, 5, 2144, 798, 139,
	3114, 2087, 1719, 1674, 1146, 866, 1026, 87, 1369, 2488,
	1526, 1982, 2046, 1936, 2176, 787, 2199, 1139, 2576, 1283,
	1563, 2175, 1267, 1203, 1754, 2283, 2242, 569, 202, 1488,
	1017, 1964, 515, 952, 842, 200, 2072, 973, 2057, 2014,
	570, 1257, 201, 499, 970, 1535, 33, 1456, 523, 1953,
	1383, 208, 208, 146, 1381, 147, 531, 564, 1281, 1774,
	1233, 609, 640, 1685, 541, 826, 518, 975, 1157, 789,
	950, 1387, 705, 1368, 659, 2773, 139, 1215, 2774, 1808,
	526, 2349, 1788, 3364, 1788, 1788, 3355, 2066, 2200, 573,
	2066, 3354, 3335, 1545, 827, 2066, 1726, 2241, 2200, 794,
	2661, 2404, 2405, 576, 2422, 2423, 2424, 794, 3322, 2618,
	3320, 573, 2977, 1800, 2977, 3286, 3285, 3282, 3279, 2066,
	2066, 3283, 3280, 2760, 2584, 576, 3276, 1554, 1178, 1172,
	1726, 3252, 3251, 2617, 3248, 1726, 1726, 2504, 1800, 3247,
	673, 809, 3210, 1800, 3201, 3200, 2109, 3194, 2977, 2977,
	3188, 1726, 2368, 3186, 2977, 3152, 795, 2977, 2369, 2109,
	3138, 2419, 1395, 1396, 1726, 1428, 1429, 1430, 1438, 1439,
	1440, 3135, 953, 953, 1722, 2977, 3105, 2066, 139, 3104,
	1726, 1431, 3097, 1726, 2059, 3096, 1726, 3211, 1398, 2977,
	3070, 1444, 3051, 775, 1726, 774, 2109, 3032, 3001, 2995,
	2976, 2630, 2066, 2066, 2977, 2906, 2873, 2865, 2779, 2109,
	2866, 2866, 2780, 984, 1397, 2769, 2763, 2697, 782, 2770,
	2066, 1726, 1417, 2637, 2445, 2193, 2443, 2638, 2066, 1414,
	2066, 2083, 2442, 2410, 2396, 2381, 2066, 2370, 2066, 2382,
	2269, 2066, 954, 892, 1804, 2122, 2108, 2106, 3139, 2066,
	2109, 1395, 1396, 2103, 2099, 2065, 1803, 2066, 1726, 2066,
	1804, 1004, 1800, 956, 999, 957, 176, 2760, 2058, 2996,
	1726, 2638, 2190, 2135, 1646, 2630, 2224, 1398, 2317, 2163,
	1725, 1726, 2133, 1521, 1420, 1421, 1422, 1423, 1967, 1156,
	2066, 179, 1177, 1171, 1403, 2245, 2619, 958, 2352, 1166,
	1665, 955, 781, 1397, 178, 780, 967, 779, 778, 777,
	176, 773, 772, 771, 2420, 2620, 2005, 770, 769, 768,
	1435, 1445, 767, 766, 1425, 1426, 1427, 765, 2404, 2405,
	764, 1789, 763, 1789, 1789, 176, 1000, 762, 703, 702,
	701, 700, 699, 2404, 2405, 1441, 1442, 177, 178, 698,
	697, 1968, 696, 1412, 1413, 695, 694, 170, 693, 692,
	691, 690, 689, 688, 687, 171, 686, 685, 1433, 684,
	683, 682, 681, 178, 680, 1418, 679, 672, 671, 869,
	631, 630, 660, 1403, 208, 797, 148, 589, 2419, 176,
	588, 177, 1443, 208, 587, 579, 578, 577, 554, 553,
	552, 551, 535, 2421, 198, 197, 1432, 59, 2617, 662,
	196, 195, 194, 193, 208, 192, 177, 191, 60, 1969,
	1966, 208, 190, 1726, 189, 188, 170, 178, 187, 186,
	148, 185, 64, 1466, 171, 184, 1000, 208, 1041, 208,
	208, 1142, 208, 1041, 208, 183, 1424, 182, 176, 176,
	181, 180, 208, 208, 2954, 148, 2918, 2003, 2867, 2777,
	2410, 2486, 70, 1025, 1419, 2375, 2364, 1030, 2300, 2203,
	177, 2100, 2091, 997, 2230, 2410, 1796, 208, 1787, 1852,
	170, 1547, 2001, 2058, 1810, 1670, 178, 178, 171, 1436,
	1561, 208, 76, 1142, 1142, 208, 208, 1482, 208, 1162,
	1999, 86, 1997, 1394, 3272, 77, 2404, 2405, 1032, 148,
	208, 1971, 868, 2416, 2417, 2418, 176, 1477, 208, 989,
	2415, 2413, 2414, 2406, 2407, 2408, 2409, 2411, 2412, 177,
	177, 3253, 208, 208, 208, 208, 208, 1142, 1142, 170,
	170, 2420, 1142, 78, 208, 1142, 208, 171, 171, 825,
	1809, 1015, 3184, 3145, 178, 1152, 2420, 3142, 981, 3140,
	1000, 3087, 3033, 2956, 2938, 1395, 1396, 2937, 148, 148,
	2641, 1434, 1278, 2925, 1409, 1410, 1416, 1415, 1411, 1437,
	3026, 1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405,
	1142, 1398, 2924, 1160, 2928, 1133, 2923, 177, 2927, 1159,
	573, 1034, 2922, 1127, 1132, 1012, 2916, 170, 1965, 2915,
	208, 2914, 1158, 2913, 576, 171, 2839, 1397, 2792, 176,
	2791, 2789, 1220, 2783, 208, 1417, 2404, 2405, 2754, 1165,
	2421, 1170, 2114, 1176, 2753, 2752, 2244, 1762, 2410, 208,
	2681, 2231, 2677, 2481, 2439, 2421, 1478, 2430, 1476, 79,
	1216, 1216, 2403, 2404, 2405, 2400, 2399, 178, 2397, 1286,
	1271, 139, 2380, 2358, 2357, 2350, 2270, 2404, 2405, 795,
	2092, 2900, 1975, 1399, 1400, 1401, 1402, 1404, 1405, 1284,
	145, 82, 1394, 83, 966, 1477, 1393, 1420, 1421, 1422,
	1423, 980, 1731, 1217, 1261, 1264, 1374, 1403, 1729, 1464,
	177, 3362, 176, 3334, 3333, 176, 3287, 988, 2404, 2405,
	170, 2706, 3243, 1375, 663, 3241, 1293, 116, 171, 2420,
	3179, 3177, 3174, 1296, 3173, 1666, 2177, 1425, 1426, 1427,
	1395, 1396, 3169, 3163, 2313, 3134, 3133, 1942, 3083, 148,
	178, 3062, 3038, 178, 3037, 3016, 3013, 2415, 2413, 2414,
	2406, 2407, 2408, 2409, 2411, 2412, 1398, 2004, 2410, 2111,
	3009, 824, 2953, 117, 2414, 2406, 2407, 2408, 2409, 2411,
	2412, 3025, 2936, 2887, 2498, 149, 2884, 2818, 1418, 1300,
	2817, 2806, 1397, 177, 2805, 2410, 177, 2765, 1367, 1039,
	1373, 2672, 2631, 170, 1150, 2592, 170, 2564, 2545, 2410,
	2229, 171, 2524, 2523, 171, 1380, 2500, 2444, 2421, 2379,
	2378, 2363, 2341, 2212, 1489, 1372, 1948, 1486, 2118, 2117,
	2095, 2077, 661, 1370, 2064, 148, 1995, 1460, 1560, 1524,
	1520, 1519, 208, 1518, 1517, 1516, 2524, 1515, 1514, 1513,
	2410, 1512, 795, 1510, 1811, 1509, 1508, 1395, 1396, 1424,
	1507, 1506, 775, 1505, 774, 1504, 1376, 1503, 208, 1502,
	1532, 1501, 1403, 1500, 1390, 1391, 2420, 1419, 2465, 208,
	1041, 208, 208, 1398, 1499, 1498, 1479, 1461, 1142, 568,
	208, 208, 1656, 1655, 568, 208, 1665, 1662, 1459, 1568,
	208, 1454, 1011, 1002, 994, 3157, 2548, 2955, 2002, 1397,
	2910, 2788, 2772, 2768, 2367, 2078, 1641, 1478, 1523, 2404,
	2405, 2496, 1457, 1041, 1665, 1029, 1490, 1491, 1665, 1556,
	1547, 2420, 1665, 2000, 1555, 2415, 2413, 2414, 2406, 2407,
	2408, 2409, 2411, 2412, 1529, 1530, 2032, 3178, 1542, 2601,
	982, 1998, 1640, 1996, 1668, 3031, 2997, 2775, 2633, 1027,
	2632, 2200, 1365, 953, 1495, 2421, 1493, 1315, 2179, 1808,
	1496, 2386, 1494, 2385, 2384, 1028, 1543, 2383, 139, 1690,
	2323, 2165, 1024, 3143, 1652, 3141, 1469, 2816, 760, 1659,
	1474, 2580, 795, 2579, 1408, 1406, 1407, 1399, 1400, 1401,
	1402, 1404, 1405, 3065, 1484, 3117, 1759, 1566, 2647, 2559,
	1708, 3086, 3337, 2241, 2708, 1983, 3273, 984, 2573, 984,
	2421, 1751, 1552, 2116, 1511, 1505, 761, 2373, 1967, 1492,
	1571, 1505, 1522, 1643, 1193, 1638, 1567, 573, 3284, 3281,
	2613, 2798, 573, 3225, 2850, 1680, 1142, 208, 1304, 1664,
	1549, 576, 2277, 1041, 3311, 1763, 576, 3193, 2406, 2407,
	2408, 2409, 2411, 2412, 3310, 2987, 1570, 1191, 2148, 2508,
	1181, 1637, 3274, 2123, 756, 3359, 3111, 1572, 3108, 1607,
	626, 3107, 754, 2413, 2414, 2406, 2407, 2408, 2409, 2411,
	2412, 1968, 208, 208, 752, 3106, 750, 2832, 2829, 208,
	1657, 2408, 2409, 2411, 2412, 555, 747, 1581, 1660, 208,
	1696, 2302, 2828, 1339, 2795, 2794, 1842, 1840, 208, 2362,
	208, 2139, 208, 2361, 2139, 2360, 208, 1700, 3004, 1661,
	2359, 1694, 2821, 1710, 965, 2138, 1712, 1192, 208, 1716,
	2406, 2407, 2408, 2409, 2411, 2412, 1463, 2327, 2195, 1653,
	2189, 1994, 2186, 2167, 2105, 2151, 793, 627, 1923, 1969,
	1966, 1371, 1155, 1720, 1401, 1402, 1404, 1405, 1993, 1697,
	2238, 1747, 1992, 1991, 1029, 1881, 2112, 2835, 1142, 208,
	1142, 744, 1226, 788, 1225, 1142, 1029, 1204, 1849, 208,
	208, 1302, 2305, 2338, 1159, 573, 1338, 2547, 561, 1142,
	1142, 3046, 208, 1771, 1780, 2648, 2098, 1158, 208, 576,
	3192, 2166, 1245, 568, 208, 2336, 208, 2497, 208, 1812,
	208, 1687, 208, 1202, 1028, 1675, 1715, 1791, 792, 1676,
	1793, 1564, 208, 1795, 208, 1724, 1028, 1798, 1187, 1224,
	1701, 1223, 1675, 208, 1297, 1850, 1676, 1778, 1750, 1684,
	1817, 1971, 1938, 1938, 1821, 3245, 1606, 2158, 1934, 2157,
	1201, 1740, 208, 1741, 793, 1824, 2974, 3093, 208, 1777,
	803, 992, 1688, 1689, 1671, 1739, 621, 1378, 1312, 563,
	1932, 1010, 2983, 2304, 1405, 2150, 2650, 1334, 1041, 2808,
	1946, 3269, 2971, 1675, 794, 1944, 2649, 1676, 1773, 2301,
	2297, 1776, 1971, 1702, 1703, 795, 678, 2691, 3302, 3208,
	3329, 2608, 1698, 1813, 1677, 1284, 2333, 1189, 1350, 3349,
	1856, 1666, 1663, 2688, 1983, 1316, 1679, 2334, 1859, 2183,
	2339, 1677, 1851, 2972, 991, 2556, 792, 1298, 1335, 1699,
	1556, 2551, 3310, 1679, 1707, 620, 2412, 1788, 1965, 1666,
	2177, 2315, 2316, 1666, 2177, 1690, 1805, 1666, 2177, 1877,
	1878, 573, 981, 1012, 981, 1954, 1955, 1337, 629, 628,
	557, 1692, 1848, 1041, 580, 576, 2303, 2609, 3170, 1364,
	1681, 1928, 1677, 1954, 1980, 1204, 562, 1682, 2507, 1929,
	1831, 2689, 1930, 2536, 1679, 1935, 2509, 1681, 2149, 1971,
	1854, 658, 794, 1487, 1727, 2830, 3301, 1857, 3270, 2226,
	3181, 2187, 208, 2377, 1974, 2013, 2567, 2017, 2017, 2030,
	2981, 1954, 1704, 1682, 2050, 2052, 559, 791, 2892, 2056,
	2608, 2819, 2535, 3056, 2136, 3206, 1041, 208, 1853, 1453,
	1855, 2538, 1644, 1858, 1303, 2088, 208, 758, 1681, 208,
	757, 775, 1041, 1868, 775, 775, 1869, 1870, 748, 2073,
	1920, 794, 2540, 556, 3207, 2096, 2888, 2335, 1990, 1682,
	748, 2967, 749, 1979, 2968, 2894, 2337, 795, 1244, 2104,
	2786, 3271, 748, 1971, 2093, 1705, 1682, 619, 1005, 618,
	795, 1841, 1839, 3327, 795, 980, 3268, 980, 2542, 560,
	1581, 1581, 1321, 2079, 1186, 2539, 3309, 2089, 2090, 2970,
	558, 2809, 1347, 1950, 3344, 1673, 3307, 622, 3123, 3015,
	2841, 2973, 1301, 511, 735, 2596, 784, 1386, 735, 2233,
	208, 2126, 1931, 953, 2982, 791, 3300, 1682, 1977, 745,
	3094, 1933, 735, 2128, 1752, 3099, 786, 506, 1531, 1021,
	786, 1003, 998, 498, 2893, 2570, 3043, 1313, 1385, 3328,
	2934, 1041, 1578, 2025, 786, 2054, 208, 1691, 3350, 581,
	582, 795, 2329, 1937, 208, 2129, 2041, 1711, 2062, 2063,
	2107, 984, 139, 2743, 208, 785, 2074, 2075, 2127, 1918,
	1921, 3330, 2974, 2070, 1348, 3160, 1789, 208, 984, 1823,
	1142, 1552, 1299, 1678, 3098, 1947, 3081, 1945, 1314, 2797,
	1377, 1311, 208, 1041, 1009, 736, 208, 208, 2971, 736,
	1678, 2964, 2969, 2113, 1469, 2140, 2597, 1690, 2986, 990,
	2489, 1022, 2520, 736, 2962, 2985, 1021, 1917, 1023, 1880,
	2966, 1453, 208, 208, 1384, 2516, 208, 1016, 1538, 1606,
	1606, 1534, 1651, 584, 583, 3343, 3042, 2121, 2234, 2972,
	2170, 208, 1490, 1491, 1349, 2152, 2154, 2037, 208, 2217,
	208, 1678, 208, 1386, 2069, 2184, 2169, 2214, 208, 1277,
	1541, 208, 2120, 208, 2197, 208, 2124, 208, 208, 2965,
	208, 1142, 1142, 1142, 1772, 1142, 1761, 2935, 2071, 208,
	208, 1760, 208, 585, 586, 1735, 3182, 2687, 208, 3216,
	2213, 2143, 1864, 1539, 2744, 2473, 1649, 1538, 1022, 208,
	2745, 208, 2289, 2196, 1984, 1023, 2265, 2266, 1845, 1647,
	1385, 1650, 2855, 2178, 2180, 2181, 2182, 3019, 2160, 208,
	208, 208, 2162, 208, 982, 2235, 982, 2211, 2168, 1541,
	3044, 1322, 1133, 737, 1247, 2171, 3082, 737, 1919, 2526,
	2525, 2185, 1818, 1159, 573, 2321, 208, 1536, 206, 2462,
	2068, 737, 2192, 2984, 2210, 900, 2201, 677, 576, 670,
	2276, 2067, 1539, 2221, 1534, 2252, 2102, 2205, 2101, 2207,
	2225, 2254, 2223, 507, 1232, 1230, 513, 2967, 2261, 792,
	2968, 1581, 1537, 2097, 3165, 1540, 2474, 3089, 1865, 2291,
	2267, 2292, 139, 2247, 2263, 204, 1384, 501, 502, 2461,
	1682, 519, 501, 519, 529, 534, 3, 3006, 550, 2642,
	2262, 2243, 1284, 2243, 2268, 2970, 204, 1770, 3314, 2290,
	2278, 1021, 2258, 2330, 2259, 508, 2260, 2973, 3183, 1718,
	1538, 2307, 3115, 738, 667, 783, 1218, 738, 204, 2295,
	2569, 2296, 2758, 2355, 2356, 208, 3079, 2490, 2940, 1717,
	3219, 738, 1988, 1219, 1540, 3166, 1362, 1344, 2365, 1342,
	1332, 2310, 1541, 509, 3090, 510, 1330, 3316, 2312, 2172,
	2173, 739, 1328, 1326, 1324, 739, 1318, 1714, 3061, 2933,
	1536, 3080, 1228, 2834, 2433, 2671, 2492, 2309, 2398, 739,
	2340, 2194, 2134, 2164, 3264, 1539, 2119, 1562, 813, 1987,
	1688, 1689, 1559, 1022, 1363, 2434, 981, 1294, 3220, 788,
	1023, 2299, 2298, 3167, 2294, 1537, 1847, 3213, 1838, 2960,
	1828, 1639, 1497, 981, 2328, 1208, 501, 501, 2969, 746,
	1606, 1041, 2853, 2441, 204, 1578, 1578, 2814, 2446, 2812,
	795, 2796, 2595, 2453, 2454, 2582, 2460, 208, 2581, 2455,
	208, 2239, 675, 676, 668, 669, 2228, 208, 2227, 2208,
	208, 208, 1041, 1802, 1231, 1229, 512, 1801, 1799, 1797,
	1794, 1041, 1792, 1669, 3311, 1790, 208, 3127, 1781, 1732,
	1730, 1721, 1709, 2372, 1706, 2366, 986, 1540, 2469, 1388,
	208, 2699, 1693, 2599, 1683, 3237, 2319, 3035, 2477, 2478,
	3034, 1183, 1361, 1343, 2139, 1341, 1331, 208, 208, 208,
	2139, 3129, 1329, 208, 2156, 2155, 208, 2468, 1327, 1325,
	1323, 2153, 1317, 208, 208, 208, 208, 208, 1227, 2505,
	2864, 2480, 2476, 2484, 1690, 1825, 2467, 208, 208, 980,
	2470, 2510, 2464, 2485, 2522, 208, 2436, 2437, 2438, 3172,
	751, 753, 2528, 2495, 2532, 2533, 980, 208, 1142, 2447,
	208, 1837, 1359, 1360, 3147, 2941, 1041, 2320, 2037, 2037,
	2174, 1389, 2517, 2159, 1041, 1392, 2501, 2502, 2475, 208,
	1395, 1396, 208, 208, 984, 514, 2191, 962, 2521, 1395,
	1396, 2161, 984, 984, 1142, 208, 984, 1142, 1142, 1142,
	3212, 3185, 2491, 2550, 208, 2845, 1398, 2840, 2782, 2246,
	208, 963, 2585, 2055, 1642, 208, 2493, 208, 1573, 3325,
	984, 2494, 2506, 3342, 208, 2513, 1680, 2404, 2405, 2511,
	2503, 1466, 1397, 525, 2787, 2557, 2694, 2565, 1395, 1396,
	2527, 1397, 2530, 2131, 2130, 2131, 2541, 1142, 1142, 2499,
	2615, 1680, 2604, 2132, 1989, 208, 208, 1962, 1306, 208,
	2629, 3351, 2546, 2583, 1305, 2555, 2037, 2037, 2037, 2603,
	2552, 208, 1041, 208, 208, 1041, 208, 2450, 2169, 2566,
	2645, 1720, 2911, 2561, 2560, 2457, 2458, 1720, 2686, 2463,
	1464, 2553, 208, 964, 1581, 2554, 1462, 3073, 2543, 1567,
	2544, 3029, 3008, 2883, 2623, 2624, 2625, 1346, 2626, 2627,
	1345, 2872, 1750, 2848, 2838, 2837, 2836, 2811, 2622, 2593,
	1135, 2591, 2256, 2232, 2209, 1949, 1784, 1783, 2562, 1581,
	2563, 1782, 2612, 1764, 2602, 1041, 1578, 2621, 2614, 2655,
	2640, 2612, 795, 1743, 1742, 2644, 1041, 1738, 208, 1737,
	1736, 2674, 1734, 1733, 1379, 1358, 2628, 1357, 139, 995,
	1340, 1336, 1333, 1319, 1256, 1255, 1254, 1253, 667, 1252,
	1251, 1250, 1209, 1212, 1249, 1248, 1246, 1241, 1240, 1239,
	1238, 2652, 2452, 1237, 1200, 1199, 1198, 2656, 982, 1006,
	2657, 2709, 1197, 1196, 813, 2659, 550, 2653, 813, 1195,
	1194, 2683, 2684, 2685, 1188, 982, 1125, 1182, 1180, 1179,
	1008, 1125, 204, 2479, 204, 204, 1007, 1147, 937, 204,
	847, 1645, 2487, 759, 1290, 2755, 2679, 204, 1161, 613,
	743, 3092, 1877, 2713, 1352, 75, 1190, 600, 69, 208,
	2810, 2710, 3224, 1606, 2698, 2690, 2692, 2693, 1877, 2723,
	2705, 208, 1185, 733, 2534, 1827, 1320, 1041, 1753, 1829,
	2712, 2466, 2076, 3205, 2919, 2376, 1207, 3153, 3055, 1307,
	204, 204, 2720, 1147, 2747, 208, 2722, 2771, 1606, 2751,
	1986, 1483, 71, 835, 920, 204, 2961, 2799, 2282, 2281,
	802, 1044, 1654, 1243, 841, 1667, 2115, 2016, 1577, 844,
	1579, 846, 845, 2748, 1580, 1485, 843, 204, 204, 204,
	204, 1147, 1576, 2222, 2250, 1235, 723, 1658, 208, 550,
	2776, 204, 1943, 2764, 2759, 2487, 1581, 2761, 2762, 981,
	2822, 2756, 1981, 139, 2371, 1480, 815, 981, 981, 837,
	1978, 981, 1001, 814, 2471, 2607, 2778, 2781, 3024, 2831,
	1863, 208, 208, 208, 2311, 208, 1860, 616, 2833, 2790,
	2037, 2037, 2401, 1963, 993, 981, 1041, 208, 2038, 2031,
	2826, 1142, 2027, 1581, 1581, 1366, 2813, 1455, 2815, 2251,
	1031, 818, 1941, 1471, 2345, 204, 2482, 984, 208, 1581,
	1581, 2616, 2800, 2110, 1871, 961, 960, 2868, 959, 204,
	3230, 208, 208, 1142, 1142, 1142, 3227, 208, 208, 208,
	2861, 2820, 208, 208, 534, 2793, 2827, 2169, 2890, 208,
	1581, 2856, 1648, 1150, 2125, 2879, 1039, 2857, 2860, 2785,
	1447, 2844, 1041, 831, 2451, 2643, 2891, 2851, 2037, 2037,
	2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037, 2037,
	2037, 2037, 2037, 2037, 2037, 2037, 2037, 2847, 2037, 1205,
	3171, 1446, 980, 2909, 755, 2858, 3162, 1020, 1019, 1018,
	980, 980, 2862, 2869, 980, 1606, 2519, 208, 2870, 3348,
	2767, 2807, 2905, 175, 172, 174, 2696, 2880, 2881, 2875,
	2882, 2874, 173, 2824, 2568, 91, 2885, 2702, 980, 2886,
	38, 2896, 37, 2897, 36, 2252, 18, 115, 1750, 114,
	113, 112, 111, 110, 109, 108, 107, 106, 105, 104,
	103, 102, 1606, 1606, 101, 100, 99, 98, 97, 96,
	95, 94, 93, 92, 35, 546, 208, 1867, 1606, 1606,
	543, 51, 50, 984, 90, 89, 1041, 17, 1041, 1578,
	34, 15, 55, 56, 14, 30, 31, 1569, 81, 80,
	29, 16, 28, 2932, 26, 208, 208, 208, 27, 1606,
	12, 9, 8, 11, 13, 25, 144, 208, 143, 74,
	142, 73, 141, 208, 1578, 208, 140, 72, 208, 208,
	208, 208, 208, 2979, 2958, 24, 10, 23, 136, 208,
	208, 1142, 68, 1041, 138, 1142, 137, 501, 2784, 65,
	2948, 2952, 135, 2989, 2943, 2944, 2946, 2949, 2484, 134,
	2994, 208, 66, 133, 1041, 132, 2959, 1142, 204, 2947,
	204, 67, 131, 204, 22, 6, 2450, 208, 1125, 3003,
	54, 7, 3040, 2646, 1161, 2978, 204, 84, 85, 32,
	63, 62, 61, 21, 204, 1161, 519, 1581, 208, 204,
	1161, 53, 3023, 1041, 2998, 550, 2033, 20, 166, 165,
	164, 163, 3036, 159, 3002, 813, 2945, 3020, 2999, 158,
	2604, 1125, 2957, 3021, 3011, 984, 162, 160, 3010, 1041,
	161, 157, 3022, 130, 168, 3017, 167, 3030, 155, 3028,
	2988, 152, 151, 154, 156, 984, 153, 150, 2993, 169,
	129, 982, 58, 128, 127, 1723, 126, 2980, 125, 982,
	982, 124, 57, 982, 19, 1041, 3067, 3045, 2990, 2991,
	2, 208, 981, 208, 1, 1041, 208, 0, 3047, 0,
	0, 0, 0, 0, 208, 0, 3063, 982, 0, 0,
	0, 0, 0, 0, 2612, 1750, 0, 0, 0, 3052,
	0, 3075, 3076, 2342, 2343, 0, 0, 208, 0, 0,
	0, 3068, 3069, 0, 0, 0, 0, 3007, 2942, 0,
	208, 1578, 3012, 0, 0, 3071, 208, 0, 0, 0,
	3074, 1142, 0, 3119, 0, 0, 208, 0, 3039, 0,
	0, 3120, 3027, 3095, 3122, 3110, 1606, 0, 0, 3072,
	0, 1125, 204, 0, 0, 0, 0, 208, 0, 3109,
	0, 0, 0, 3132, 3118, 3136, 3137, 0, 1578, 1578,
	0, 3101, 0, 3131, 3102, 3103, 208, 3130, 3126, 0,
	0, 3124, 208, 0, 1578, 1578, 0, 3125, 0, 1806,
	208, 0, 0, 0, 0, 2860, 0, 204, 204, 0,
	0, 2427, 2428, 2429, 204, 980, 3168, 2604, 1819, 1820,
	0, 3159, 3151, 0, 1769, 1578, 0, 208, 208, 3158,
	3156, 0, 0, 204, 3146, 204, 0, 204, 981, 0,
	0, 501, 0, 0, 208, 1142, 3180, 0, 0, 2951,
	208, 0, 0, 1785, 1142, 1142, 3176, 0, 0, 0,
	0, 0, 208, 0, 208, 3199, 0, 0, 0, 0,
	0, 1581, 3187, 0, 0, 0, 3191, 0, 3195, 0,
	0, 0, 3209, 3196, 208, 0, 3128, 0, 3197, 3198,
	208, 208, 3221, 1041, 550, 3202, 0, 0, 0, 0,
	0, 3190, 208, 0, 1147, 204, 3232, 0, 0, 3238,
	0, 0, 3233, 0, 3235, 2037, 3240, 550, 3242, 0,
	3226, 0, 1581, 204, 3249, 3246, 0, 0, 204, 204,
	3250, 204, 208, 204, 0, 204, 3234, 204, 3244, 0,
	0, 0, 0, 3275, 3175, 0, 0, 1843, 0, 1844,
	0, 3260, 3261, 0, 2037, 3263, 0, 3262, 204, 0,
	0, 0, 3288, 0, 1039, 3290, 208, 3292, 0, 0,
	0, 980, 0, 3297, 0, 3298, 0, 534, 0, 3291,
	981, 3293, 3299, 550, 3289, 208, 3294, 3295, 3296, 0,
	3053, 0, 0, 0, 0, 0, 1125, 1581, 0, 0,
	981, 3308, 3203, 0, 3204, 3306, 3305, 0, 208, 0,
	0, 3315, 0, 3312, 3319, 3232, 3321, 3313, 3277, 0,
	1606, 3318, 3324, 0, 0, 3323, 3053, 0, 0, 0,
	3222, 0, 0, 0, 0, 0, 1880, 2033, 2033, 3332,
	3331, 0, 0, 2037, 3339, 0, 0, 1395, 1396, 0,
	3338, 3341, 3340, 0, 3345, 0, 0, 0, 0, 0,
	0, 0, 1578, 3352, 982, 3353, 0, 0, 3346, 3347,
	0, 1606, 3239, 1398, 0, 0, 3356, 3357, 3358, 3360,
	3361, 1125, 0, 2252, 0, 0, 0, 0, 3365, 0,
	0, 0, 0, 0, 0, 0, 0, 3363, 0, 1397,
	0, 0, 0, 0, 0, 2667, 2668, 0, 0, 0,
	0, 0, 0, 980, 0, 0, 0, 0, 0, 0,
	2404, 2405, 0, 2422, 2423, 2424, 0, 501, 0, 1395,
	1396, 0, 0, 980, 0, 2033, 2033, 2033, 0, 2902,
	0, 0, 204, 0, 1125, 0, 1606, 0, 3317, 0,
	0, 0, 501, 0, 0, 1398, 0, 0, 0, 204,
	1125, 501, 0, 0, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1395, 1396, 0, 1403,
	2419, 1397, 0, 2724, 2725, 2726, 2727, 2728, 2729, 2730,
	2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740,
	2741, 2742, 1398, 2746, 0, 0, 0, 0, 0, 1425,
	1426, 1427, 0, 0, 0, 0, 0, 0, 0, 2188,
	982, 0, 0, 0, 0, 0, 0, 0, 1397, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1880, 519, 0, 0, 0, 0,
	0, 0, 2410, 0, 0, 0, 0, 0, 0, 0,
	1418, 1403, 0, 0, 0, 0, 0, 0, 0, 1125,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2147, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 1425, 1426, 1427, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 2425, 0, 0, 0, 0, 1403, 0,
	2264, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 1125, 0, 0, 0, 0, 1578, 204, 0, 0,
	0, 204, 2202, 2420, 1466, 0, 0, 0, 1425, 1426,
	1427, 0, 1418, 0, 0, 0, 0, 0, 0, 1419,
	0, 0, 0, 59, 0, 0, 0, 204, 1161, 0,
	0, 204, 982, 0, 60, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1769, 1578, 64, 0,
	0, 0, 982, 2147, 0, 501, 0, 2255, 0, 1418,
	0, 0, 0, 204, 0, 0, 204, 0, 204, 0,
	204, 0, 204, 204, 0, 1147, 0, 0, 70, 0,
	0, 0, 0, 0, 2274, 667, 0, 2147, 0, 0,
	0, 0, 2421, 204, 0, 0, 0, 0, 0, 2033,
	2033, 1419, 0, 0, 1161, 0, 1161, 0, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 77, 1578, 0, 204, 204, 204, 0, 204, 0,
	0, 0, 0, 0, 0, 0, 1408, 1406, 1407, 1399,
	1400, 1401, 1402, 1404, 1405, 0, 0, 0, 1419, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 0, 78,
	0, 0, 0, 0, 0, 0, 0, 1533, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2033, 2033, 2033,
	2033, 2033, 2033, 2033, 2033, 2033, 2033, 2033, 2033, 2033,
	2033, 2033, 2033, 2033, 2033, 2033, 0, 2033, 0, 0,
	0, 0, 2416, 2417, 2418, 0, 0, 0, 0, 2415,
	2413, 2414, 2406, 2407, 2408, 2409, 2411, 2412, 0, 1406,
	1407, 1399, 1400, 1401, 1402, 1404, 1405, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 123, 0, 0, 0,
	1161, 0, 59, 0, 0, 0, 0, 0, 0, 0,
	0, 1395, 1396, 60, 118, 79, 0, 1407, 1399, 1400,
	1401, 1402, 1404, 1405, 0, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1398, 0, 0,
	0, 0, 40, 120, 0, 0, 145, 82, 0, 83,
	0, 0, 0, 0, 0, 39, 0, 70, 0, 0,
	0, 0, 0, 1397, 0, 0, 0, 801, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 42, 0, 1125,
	663, 0, 43, 116, 0, 204, 0, 76, 0, 0,
	121, 0, 0, 204, 204, 41, 86, 204, 0, 0,
	77, 44, 501, 0, 0, 501, 178, 0, 0, 0,
	1125, 0, 501, 0, 0, 501, 501, 2558, 0, 1125,
	0, 204, 0, 0, 0, 0, 0, 45, 0, 117,
	3060, 1161, 0, 0, 0, 0, 0, 0, 78, 0,
	813, 149, 0, 1403, 0, 1161, 0, 0, 0, 177,
	0, 0, 813, 2586, 0, 0, 2588, 2589, 2590, 170,
	0, 0, 204, 2147, 2515, 0, 0, 171, 2147, 3084,
	0, 2515, 0, 1425, 1426, 1427, 0, 0, 2147, 2515,
	2147, 2515, 2515, 0, 0, 0, 0, 0, 148, 0,
	0, 0, 204, 204, 0, 0, 0, 0, 0, 0,
	0, 0, 59, 0, 0, 0, 2635, 2636, 0, 0,
	0, 0, 204, 60, 1125, 1147, 0, 0, 0, 0,
	0, 0, 1125, 0, 1418, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 2572, 0, 0, 2574, 2577, 0,
	0, 0, 0, 0, 79, 0, 0, 0, 0, 0,
	204, 46, 0, 0, 0, 0, 0, 70, 3150, 204,
	0, 0, 0, 0, 0, 1147, 0, 1395, 1396, 0,
	2147, 0, 501, 0, 49, 145, 82, 0, 83, 2147,
	47, 0, 0, 0, 122, 0, 0, 76, 0, 0,
	48, 0, 0, 1398, 0, 0, 86, 176, 0, 0,
	77, 0, 0, 0, 0, 0, 0, 0, 0, 52,
	204, 1769, 116, 1419, 1769, 0, 0, 0, 0, 1397,
	1125, 119, 0, 1125, 0, 0, 2651, 1417, 1147, 204,
	0, 204, 0, 0, 0, 178, 0, 0, 78, 0,
	0, 0, 0, 0, 0, 0, 0, 204, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 117, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 0, 2670, 0, 0, 0, 0, 177, 0,
	0, 0, 0, 1125, 0, 0, 0, 0, 170, 1420,
	1421, 1422, 1423, 0, 1125, 0, 171, 0, 0, 1403,
	0, 0, 0, 2707, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 148, 0, 0,
	4, 0, 0, 0, 0, 0, 0, 0, 0, 1425,
	1426, 1427, 0, 1399, 1400, 1401, 1402, 1404, 1405, 0,
	0, 0, 0, 0, 79, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2033, 0, 0, 0, 0, 0,
	0, 0, 0, 801, 0, 0, 0, 801, 0, 0,
	0, 0, 0, 0, 0, 145, 82, 0, 83, 0,
	1418, 0, 0, 0, 0, 0, 0, 0, 204, 0,
	0, 0, 0, 2033, 501, 0, 0, 176, 0, 1163,
	0, 1167, 0, 1173, 0, 1125, 501, 0, 0, 663,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1161, 0, 0, 0, 0, 178, 0, 0, 0, 0,
	0, 0, 59, 0, 0, 0, 0, 0, 0, 0,
	0, 1424, 0, 60, 0, 0, 0, 0, 117, 0,
	0, 0, 2876, 2877, 2878, 0, 0, 64, 0, 1419,
	149, 0, 0, 550, 0, 0, 0, 0, 177, 0,
	0, 0, 2033, 0, 0, 0, 1292, 0, 170, 0,
	0, 0, 0, 1295, 0, 0, 171, 70, 0, 0,
	0, 0, 0, 0, 0, 0, 2842, 204, 204, 0,
	204, 0, 0, 0, 1125, 0, 0, 148, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 76, 0, 836,
	88, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	77, 0, 0, 2147, 204, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2274, 2274, 0, 0,
	0, 0, 667, 667, 2147, 0, 0, 1769, 1769, 0,
	0, 0, 0, 0, 204, 0, 0, 0, 78, 0,
	1125, 0, 0, 0, 0, 0, 1408, 1406, 1407, 1399,
	1400, 1401, 1402, 1404, 1405, 0, 0, 0, 0, 0,
	0, 1395, 1396, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1448, 1449, 1450, 1451, 1452, 1398, 0, 0,
	0, 0, 2920, 0, 0, 0, 0, 1395, 1396, 0,
	0, 0, 0, 1438, 1439, 1440, 0, 0, 0, 0,
	0, 0, 1468, 1397, 0, 0, 0, 0, 1481, 0,
	3000, 1417, 0, 1398, 0, 0, 1444, 0, 0, 776,
	0, 0, 0, 0, 0, 0, 0, 0, 796, 0,
	0, 0, 0, 0, 79, 0, 204, 0, 0, 1397,
	0, 1161, 0, 0, 1125, 0, 1125, 1417, 0, 0,
	0, 0, 0, 0, 0, 0, 204, 2665, 971, 88,
	0, 0, 0, 0, 0, 145, 82, 0, 83, 0,
	2147, 2515, 2147, 1420, 1421, 1422, 1423, 0, 0, 0,
	0, 0, 1161, 1403, 0, 0, 0, 176, 2147, 0,
	2515, 0, 0, 1161, 1161, 204, 2147, 2515, 0, 663,
	0, 1125, 116, 0, 204, 204, 0, 0, 0, 1420,
	1421, 1422, 1423, 1425, 1426, 1427, 0, 0, 0, 1403,
	0, 0, 1125, 0, 0, 178, 3014, 1527, 1527, 1527,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2147, 0, 0, 1435, 1445, 0, 117, 1425,
	1426, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 1125, 0, 1161, 1418, 0, 0, 0, 177, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 0, 0, 0, 171, 1125, 0, 0,
	0, 0, 0, 1433, 801, 0, 0, 0, 0, 0,
	1418, 0, 0, 0, 0, 0, 0, 1287, 2404, 2405,
	0, 2422, 2423, 2424, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1125, 0, 0, 0, 2901, 0, 0,
	0, 0, 0, 1125, 0, 1424, 2147, 0, 2515, 0,
	0, 3078, 0, 0, 0, 0, 0, 0, 0, 204,
	0, 0, 0, 1419, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 813, 0, 2419, 0,
	0, 1424, 550, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2577, 0, 0, 0, 1419,
	0, 204, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1161, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 0, 0, 0,
	0, 0, 204, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2410, 2707, 0, 0, 0, 0, 0, 501, 0, 0,
	0, 0, 0, 0, 0, 3078, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405, 0,
	0, 0, 2147, 2515, 0, 0, 0, 0, 0, 0,
	0, 2425, 0, 0, 901, 0, 1434, 0, 0, 204,
	0, 0, 0, 0, 1437, 2515, 1408, 1406, 1407, 1399,
	1400, 1401, 1402, 1404, 1405, 0, 0, 1161, 0, 1161,
	0, 2420, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 0, 0, 0, 3217,
	0, 1125, 0, 0, 0, 1161, 204, 813, 0, 0,
	0, 0, 0, 0, 0, 205, 0, 204, 0, 0,
	0, 0, 88, 0, 88, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2707, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2421, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3078, 796, 88, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 1861, 0, 1866, 0, 88, 0, 0, 0,
	1873, 0, 0, 1161, 0, 0, 0, 1882, 1883, 1884,
	1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
	1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904,
	1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914,
	1915, 1916, 0, 1922, 0, 1924, 1925, 1926, 1927, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2416, 2417, 2418, 0, 0, 1951, 0, 2415, 2413, 2414,
	2406, 2407, 2408, 2409, 2411, 2412, 0, 0, 0, 0,
	1468, 0, 0, 0, 1976, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 867, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 776, 0,
	0, 0, 2029, 0, 2040, 2042, 2047, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1458, 0, 0, 0,
	0, 203, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1467, 0, 0, 0, 1473, 0,
	0, 0, 574, 2404, 2405, 0, 2422, 2423, 2424, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2676, 0, 574, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1395, 1396, 0, 1428,
	1429, 1430, 1438, 1439, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1431, 0, 0, 0, 1395,
	1396, 0, 1398, 2419, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1398, 0, 0, 1397, 0,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 1414, 0, 0, 0, 0, 0, 2404,
	2405, 1397, 2422, 2423, 2424, 0, 0, 0, 0, 1417,
	983, 0, 0, 0, 0, 0, 0, 0, 2675, 88,
	0, 0, 1548, 0, 1551, 2410, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1420, 1421,
	1422, 1423, 0, 0, 0, 2664, 0, 0, 1403, 2419,
	0, 0, 0, 0, 0, 0, 0, 2204, 0, 2206,
	0, 1420, 1421, 1422, 1423, 0, 2425, 0, 0, 0,
	0, 1403, 0, 0, 1435, 1445, 0, 0, 1425, 1426,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2420, 0, 0, 1441,
	1442, 1425, 1426, 1427, 0, 0, 0, 1412, 1413, 0,
	0, 205, 1046, 205, 205, 1046, 0, 1046, 205, 0,
	0, 2410, 1433, 0, 0, 0, 205, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 0,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 0, 0, 0, 0, 0, 1046, 1046, 205,
	205, 0, 2425, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 2421, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1424, 0, 2420, 0, 0, 0, 205, 205, 205, 205,
	0, 1046, 1046, 0, 0, 0, 1046, 0, 1419, 1046,
	205, 0, 0, 1424, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1419, 0, 1436, 0, 2325, 2326, 0, 0, 0,
	0, 2332, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1046, 0, 0, 0, 0, 0,
	2346, 2347, 0, 0, 0, 0, 1976, 0, 0, 0,
	0, 0, 0, 0, 205, 2354, 0, 0, 0, 0,
	0, 2421, 0, 0, 0, 2416, 2417, 2418, 205, 0,
	0, 0, 2415, 2413, 2414, 2406, 2407, 2408, 2409, 2411,
	2412, 2374, 0, 0, 0, 2404, 2405, 0, 2422, 2423,
	2424, 0, 0, 2387, 0, 1434, 0, 796, 1409, 1410,
	1416, 1415, 1411, 1437, 0, 1408, 1406, 1407, 1399, 1400,
	1401, 1402, 1404, 1405, 0, 0, 0, 0, 2392, 0,
	0, 0, 2393, 0, 0, 0, 0, 0, 1408, 1406,
	1407, 1399, 1400, 1401, 1402, 1404, 1405, 0, 0, 0,
	0, 2047, 2047, 2047, 0, 2419, 0, 0, 203, 0,
	203, 203, 0, 0, 0, 203, 1527, 0, 0, 0,
	0, 0, 0, 574, 2456, 0, 0, 0, 0, 0,
	0, 2416, 2417, 2418, 0, 0, 0, 0, 2415, 2413,
	2414, 2406, 2407, 2408, 2409, 2411, 2412, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 776, 0, 0,
	776, 776, 0, 0, 0, 0, 203, 203, 0, 0,
	0, 0, 0, 0, 209, 0, 0, 2410, 0, 801,
	0, 203, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 801, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 203, 203, 203, 0, 2404, 2405,
	0, 2422, 2423, 2424, 0, 1940, 2537, 203, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2425, 796,
	0, 0, 0, 1395, 1396, 567, 0, 0, 0, 0,
	0, 0, 1467, 0, 0, 0, 1467, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 567, 2420, 1398,
	0, 0, 205, 0, 0, 0, 0, 0, 2419, 0,
	0, 0, 0, 0, 1046, 205, 205, 0, 0, 0,
	0, 203, 1046, 205, 0, 1397, 0, 0, 205, 0,
	0, 0, 871, 1417, 0, 203, 0, 0, 0, 2605,
	0, 0, 0, 0, 0, 0, 971, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1046, 0, 0,
	0, 0, 0, 1551, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2331,
	2410, 0, 0, 88, 0, 0, 0, 2421, 0, 0,
	0, 0, 0, 0, 0, 1420, 1421, 1422, 1423, 0,
	0, 0, 0, 0, 0, 1403, 0, 2426, 0, 0,
	0, 2658, 0, 0, 0, 1873, 0, 0, 0, 0,
	0, 2662, 2663, 0, 0, 2666, 0, 0, 0, 2669,
	0, 2425, 0, 0, 0, 1425, 1426, 1427, 2673, 0,
	0, 0, 0, 0, 0, 0, 0, 2680, 0, 0,
	2456, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2420, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2700, 0, 0, 0, 0, 0, 0, 0, 0,
	1046, 205, 0, 0, 0, 0, 1418, 1046, 2714, 2715,
	0, 2716, 2717, 2718, 0, 88, 2719, 2416, 2417, 2418,
	2721, 0, 0, 0, 2415, 2413, 2414, 2406, 2407, 2408,
	2409, 2411, 2412, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 205, 205, 0, 0,
	0, 2749, 2750, 205, 0, 0, 0, 0, 0, 0,
	88, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	2421, 0, 205, 0, 205, 0, 205, 1424, 0, 2766,
	0, 0, 0, 0, 1550, 0, 983, 0, 0, 203,
	0, 0, 0, 0, 0, 1419, 0, 0, 0, 0,
	0, 0, 203, 1550, 88, 0, 88, 0, 0, 0,
	574, 0, 0, 0, 0, 574, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1046, 88, 1046, 0, 0, 0, 0, 1046,
	0, 2801, 2804, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 1046, 1046, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 2823, 0, 0, 205, 205, 0,
	205, 0, 205, 0, 205, 0, 205, 0, 0, 0,
	2416, 2417, 2418, 0, 0, 0, 0, 2415, 2413, 2414,
	2406, 2407, 2408, 2409, 2411, 2412, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404,
	1405, 0, 0, 0, 0, 0, 1527, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2871, 0, 0,
	0, 0, 1046, 0, 0, 0, 0, 0, 0, 0,
	0, 1940, 0, 0, 0, 1395, 1396, 0, 0, 0,
	0, 0, 0, 0, 976, 0, 0, 0, 574, 0,
	0, 0, 1467, 0, 0, 0, 0, 0, 0, 0,
	0, 1398, 2898, 2899, 0, 0, 0, 0, 2903, 2904,
	0, 0, 1042, 2907, 2908, 1143, 0, 1042, 0, 0,
	2912, 0, 0, 0, 199, 0, 0, 1397, 0, 0,
	0, 0, 0, 203, 203, 1417, 0, 0, 0, 2917,
	203, 0, 0, 1395, 1396, 0, 2921, 1046, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	0, 203, 0, 203, 0, 0, 0, 1143, 1143, 1398,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2324, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1397, 0, 1420, 1421, 1422,
	1423, 0, 0, 1417, 0, 0, 0, 1403, 0, 971,
	1046, 1143, 1143, 0, 0, 0, 1143, 971, 971, 1143,
	0, 971, 0, 205, 0, 0, 1046, 0, 0, 0,
	1043, 203, 0, 1144, 0, 1043, 0, 1425, 1426, 1427,
	0, 0, 0, 2804, 0, 0, 0, 0, 0, 203,
	0, 0, 0, 0, 574, 203, 0, 203, 0, 203,
	0, 203, 0, 203, 1143, 1420, 1421, 1422, 1423, 0,
	0, 0, 0, 0, 0, 1403, 0, 0, 0, 0,
	0, 0, 0, 0, 203, 1144, 1144, 0, 1418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1425, 1426, 1427, 0, 0,
	0, 88, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 2804, 0, 0, 0, 0, 0, 0, 1144,
	1144, 0, 0, 0, 1144, 1046, 0, 1144, 3048, 3049,
	3050, 88, 0, 88, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 1418, 0, 205, 1424,
	0, 0, 0, 0, 3058, 3059, 0, 0, 0, 0,
	0, 205, 0, 0, 1046, 0, 0, 1419, 3066, 0,
	0, 0, 1144, 0, 0, 0, 205, 1046, 0, 0,
	205, 0, 0, 0, 796, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2804, 205, 0, 0, 88,
	205, 0, 0, 3100, 0, 0, 0, 1424, 0, 0,
	0, 0, 0, 0, 0, 801, 0, 0, 0, 0,
	0, 0, 3112, 0, 0, 1419, 0, 0, 0, 0,
	0, 2804, 205, 0, 2804, 205, 0, 205, 0, 205,
	0, 205, 205, 0, 0, 1046, 1046, 1046, 983, 1046,
	0, 0, 0, 0, 0, 2804, 2804, 0, 0, 0,
	0, 0, 205, 0, 0, 983, 0, 0, 0, 0,
	203, 0, 0, 0, 1408, 1406, 1407, 1399, 1400, 1401,
	1402, 1404, 1405, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 205, 205, 205, 0, 205, 0, 0,
	0, 3161, 0, 0, 3164, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 1042, 0, 0, 0, 0, 0,
	0, 0, 1143, 567, 0, 0, 0, 0, 567, 0,
	0, 0, 1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404,
	1405, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1042, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 971, 0, 0, 203, 801, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 1036, 88, 0, 3259, 3259, 3259, 0, 1154, 0,
	0, 0, 0, 203, 0, 0, 0, 574, 0, 0,
	0, 0, 1043, 3278, 0, 0, 0, 0, 0, 0,
	1144, 0, 0, 0, 0, 0, 0, 0, 0, 2804,
	0, 2804, 0, 203, 0, 0, 0, 203, 0, 0,
	0, 0, 0, 0, 3259, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1043, 0, 0, 0, 0,
	1143, 0, 0, 0, 1236, 0, 0, 1042, 0, 203,
	0, 0, 203, 0, 203, 1046, 203, 0, 203, 203,
	0, 0, 0, 0, 0, 0, 1260, 1260, 1260, 1154,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 203,
	1291, 0, 0, 0, 0, 0, 1046, 0, 0, 0,
	0, 0, 0, 3259, 0, 1046, 0, 0, 971, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 203, 203, 0, 203, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 0, 0, 0, 203, 0, 0,
	0, 0, 0, 0, 1351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1144, 0,
	0, 205, 205, 0, 0, 1043, 0, 0, 704, 205,
	735, 0, 1143, 0, 1143, 0, 0, 0, 0, 1143,
	0, 205, 1046, 0, 0, 0, 0, 0, 0, 0,
	1046, 0, 711, 1143, 1143, 0, 0, 0, 1046, 0,
	0, 0, 0, 0, 709, 0, 0, 567, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1046, 205,
	0, 1046, 1046, 1046, 0, 0, 0, 710, 205, 0,
	0, 0, 712, 0, 0, 0, 740, 0, 0, 0,
	971, 0, 718, 719, 0, 0, 0, 0, 729, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 736, 713, 0, 0, 0, 0, 0, 0, 0,
	0, 1046, 1046, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 1042, 0, 0, 0, 0, 0, 734, 0,
	1144, 0, 1144, 0, 0, 0, 1046, 1144, 205, 1046,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1144, 1144, 0, 0, 0, 205, 0, 0, 714,
	88, 983, 0, 0, 0, 88, 708, 0, 0, 983,
	983, 0, 0, 983, 0, 0, 0, 0, 0, 0,
	0, 0, 715, 716, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1550, 0, 1046,
	0, 0, 0, 0, 722, 0, 0, 1042, 0, 0,
	1046, 717, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 721, 0, 0, 0,
	0, 0, 1557, 0, 0, 0, 0, 0, 203, 737,
	1043, 0, 0, 0, 0, 1565, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 203, 203,
	1042, 0, 0, 0, 0, 0, 1550, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1042, 720, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 731, 0, 0, 0, 0, 0,
	0, 1046, 0, 0, 726, 1043, 203, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 706, 724, 738,
	0, 0, 0, 0, 0, 0, 0, 650, 0, 0,
	0, 1940, 0, 707, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 727, 0, 0, 0, 725, 0, 0,
	632, 741, 742, 0, 0, 0, 0, 739, 0, 0,
	0, 0, 0, 0, 728, 0, 203, 0, 1043, 0,
	0, 0, 0, 0, 0, 1042, 0, 0, 0, 0,
	633, 0, 0, 730, 1043, 203, 0, 203, 0, 634,
	0, 0, 0, 0, 0, 0, 205, 205, 0, 205,
	0, 0, 0, 203, 635, 732, 0, 0, 0, 0,
	1046, 205, 0, 0, 1143, 1046, 0, 0, 0, 0,
	655, 0, 0, 0, 0, 0, 0, 1042, 0, 0,
	0, 0, 0, 0, 0, 636, 1745, 0, 0, 0,
	0, 0, 0, 1756, 0, 0, 0, 1046, 1046, 1046,
	0, 0, 637, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1236, 205, 1775, 0, 1775, 0, 0, 0,
	0, 0, 638, 0, 0, 639, 1046, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 0, 0, 0, 0,
	0, 654, 0, 0, 0, 1143, 1143, 1143, 0, 1143,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1144, 0, 1815, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 983, 1043, 0, 0, 0, 0,
	0, 0, 1826, 0, 0, 0, 0, 0, 1832, 0,
	1833, 0, 1834, 0, 1835, 0, 1836, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1846, 0, 641,
	1046, 0, 1046, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 658, 642, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1144, 1144, 1144, 0, 1144, 0, 0,
	0, 0, 657, 0, 205, 0, 0, 0, 0, 643,
	0, 0, 644, 205, 205, 1046, 0, 1046, 652, 1046,
	0, 0, 0, 0, 0, 645, 0, 0, 0, 0,
	0, 0, 0, 203, 203, 0, 203, 0, 1046, 0,
	0, 1046, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 0, 0, 646, 653, 0, 0, 0, 0,
	0, 0, 0, 0, 647, 0, 0, 0, 0, 0,
	983, 0, 0, 0, 0, 649, 0, 1046, 0, 0,
	648, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 656, 0, 0, 0, 0, 0, 0, 0, 0,
	203, 0, 651, 1046, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1042, 0, 0, 0, 1046,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1046,
	0, 0, 0, 0, 0, 0, 0, 0, 205, 0,
	0, 0, 0, 2094, 0, 0, 1042, 0, 0, 0,
	0, 0, 0, 0, 0, 1042, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 0, 0, 1046, 0, 0, 0, 0,
	0, 0, 983, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 1550, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 0, 0, 0, 0,
	0, 0, 1143, 0, 0, 0, 0, 0, 0, 0,
	1042, 203, 0, 0, 0, 0, 0, 0, 1042, 0,
	203, 203, 0, 0, 1043, 0, 0, 0, 0, 0,
	0, 0, 0, 1043, 0, 0, 0, 0, 1143, 0,
	0, 1143, 1143, 1143, 0, 0, 0, 0, 205, 1046,
	0, 0, 0, 0, 0, 0, 0, 0, 1046, 1046,
	0, 0, 0, 0, 0, 0, 1154, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1143, 1143, 0, 0, 205, 2220, 1046, 0, 0,
	1756, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1042, 0, 0, 1042,
	1144, 0, 0, 0, 0, 0, 0, 0, 1043, 0,
	0, 0, 2257, 0, 0, 1260, 1043, 1260, 0, 1260,
	0, 1154, 1154, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1144, 0, 0, 1144,
	1144, 1144, 2293, 0, 0, 203, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1042,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1042, 0, 0, 2306, 1154, 2308, 1395, 1396, 0, 1428,
	1429, 1430, 1438, 1439, 1440, 0, 0, 203, 0, 1144,
	1144, 0, 0, 0, 0, 1431, 0, 0, 0, 0,
	2322, 0, 1398, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 1043, 0, 0, 1043, 203, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1397, 0,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 1414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1395, 1396, 0, 1428, 1429, 1430, 1438,
	1439, 1440, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1431, 0, 0, 0, 0, 1043, 0, 1398,
	0, 1042, 1444, 0, 0, 0, 0, 0, 1043, 0,
	0, 0, 0, 0, 0, 203, 0, 0, 1420, 1421,
	1422, 1423, 0, 0, 0, 1397, 0, 0, 1403, 0,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	1414, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1435, 1445, 0, 0, 1425, 1426,
	1427, 0, 203, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 203, 0, 0, 0, 0, 0, 1441,
	1442, 0, 0, 0, 0, 0, 0, 1412, 1413, 0,
	0, 0, 0, 0, 0, 1420, 1421, 1422, 1423, 0,
	0, 0, 1433, 0, 0, 1403, 0, 0, 0, 1418,
	1042, 0, 0, 0, 0, 1143, 0, 0, 0, 1043,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 0,
	0, 1435, 1445, 0, 0, 1425, 1426, 1427, 0, 0,
	1432, 0, 0, 0, 0, 0, 0, 1143, 1143, 1143,
	0, 0, 0, 0, 0, 0, 1441, 1442, 0, 0,
	0, 0, 0, 0, 1412, 1413, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1042, 0, 0, 1433,
	1424, 2512, 0, 0, 0, 0, 1418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 0,
	0, 0, 0, 1443, 0, 0, 0, 0, 0, 0,
	0, 2549, 2220, 0, 0, 0, 0, 1432, 0, 0,
	0, 0, 0, 1436, 0, 0, 0, 0, 1043, 0,
	0, 0, 0, 1144, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1424, 0, 0,
	0, 0, 0, 0, 0, 1144, 1144, 1144, 0, 2587,
	0, 0, 0, 0, 0, 1419, 0, 0, 2594, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1042, 0, 1042, 0, 1043, 0, 0, 0, 0, 0,
	1436, 0, 0, 0, 0, 1434, 0, 0, 1409, 1410,
	1416, 1415, 1411, 1437, 0, 1408, 1406, 1407, 1399, 1400,
	1401, 1402, 1404, 1405, 0, 0, 0, 0, 1972, 2639,
	0, 0, 1973, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1143, 0, 1042, 2654, 1143,
	1154, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2660, 0, 1042, 0,
	0, 1143, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1434, 0, 0, 1409, 1410, 1416, 1415, 1411,
	1437, 0, 1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404,
	1405, 0, 0, 0, 0, 0, 0, 1042, 1043, 2926,
	1043, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1395, 1396, 0, 1428, 1429, 1430, 1438, 1439, 1440,
	0, 0, 0, 1042, 0, 0, 0, 0, 0, 0,
	1431, 0, 0, 0, 0, 0, 0, 1398, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1144, 0, 1043, 0, 1144, 0, 1042,
	0, 0, 0, 1397, 0, 0, 0, 0, 0, 1042,
	0, 1417, 0, 0, 0, 0, 1043, 0, 1414, 1144,
	0, 0, 0, 0, 0, 0, 0, 0, 1395, 1396,
	0, 1428, 1429, 1430, 1438, 1439, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1431, 0, 0,
	0, 0, 0, 0, 1398, 1043, 0, 1444, 0, 0,
	0, 0, 0, 0, 0, 1143, 0, 0, 0, 0,
	0, 0, 0, 1420, 1421, 1422, 1423, 0, 0, 0,
	1397, 1043, 0, 1403, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 1414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1435,
	1445, 0, 0, 1425, 1426, 1427, 0, 1043, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1043, 0, 0,
	0, 0, 0, 0, 1441, 1442, 0, 0, 0, 0,
	0, 0, 1412, 1413, 0, 0, 0, 0, 0, 0,
	1420, 1421, 1422, 1423, 0, 0, 2843, 1433, 0, 2846,
	1403, 0, 0, 0, 1418, 0, 0, 0, 0, 1143,
	0, 2852, 0, 0, 0, 0, 0, 0, 1143, 1143,
	0, 1443, 0, 1144, 0, 0, 1435, 1445, 0, 0,
	1425, 1426, 1427, 0, 0, 1432, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 590, 0,
	0, 1441, 1442, 0, 0, 0, 0, 1042, 0, 1412,
	1413, 0, 0, 2889, 0, 0, 0, 0, 0, 0,
	0, 591, 0, 0, 1433, 1424, 0, 0, 0, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1419, 0, 0, 0, 0, 1443, 0,
	0, 592, 611, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 1436, 0,
	0, 0, 593, 0, 0, 594, 0, 1144, 0, 0,
	0, 0, 0, 0, 0, 0, 1144, 1144, 0, 0,
	0, 617, 0, 0, 0, 0, 0, 595, 0, 0,
	0, 0, 1424, 0, 0, 0, 615, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 0, 0, 596, 0, 1043, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 597, 0, 1436, 598, 621, 0, 0,
	1434, 624, 0, 1409, 1410, 1416, 1415, 1411, 1437, 0,
	1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405, 0,
	0, 0, 0, 0, 0, 0, 0, 2678, 0, 0,
	0, 0, 0, 0, 2992, 0, 0, 0, 0, 0,
	0, 0, 0, 2220, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 620, 0, 0, 0,
	0, 0, 601, 0, 0, 0, 0, 1434, 0, 0,
	1409, 1410, 1416, 1415, 1411, 1437, 0, 1408, 1406, 1407,
	1399, 1400, 1401, 1402, 1404, 1405, 0, 0, 0, 0,
	0, 599, 0, 0, 2395, 0, 0, 0, 0, 0,
	602, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 603, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 623, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 604, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3085, 0,
	0, 0, 0, 610, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 606, 0, 0, 619, 0,
	618, 0, 0, 0, 0, 607, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 608, 0, 0, 0,
	3121, 614, 0, 0, 0, 0, 625, 0, 622, 0,
	0, 0, 612, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3144, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3189, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1040, 0, 0, 0, 0, 3223, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3236, 213, 214, 215,
	216, 217, 1047, 218, 1048, 1049, 1050, 1051, 453, 1052,
	1053, 1054, 1055, 219, 220, 221, 454, 455, 222, 456,
	223, 224, 457, 1056, 225, 226, 227, 228, 229, 230,
	1057, 1058, 231, 458, 459, 460, 1059, 232, 461, 1060,
	1045, 1061, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 1062, 242, 0, 243, 244, 245, 1063, 922,
	246, 247, 1064, 1065, 1067, 1066, 1068, 1069, 1070, 248,
	249, 250, 251, 252, 253, 462, 463, 1071, 254, 1072,
	256, 255, 1073, 257, 1074, 1075, 258, 259, 260, 1076,
	261, 1077, 262, 263, 1078, 464, 264, 265, 267, 270,
	266, 271, 272, 273, 465, 466, 1079, 210, 1080, 0,
	0, 0, 0, 274, 275, 276, 467, 277, 278, 0,
	279, 1081, 280, 1082, 1083, 923, 281, 282, 1084, 283,
	468, 1085, 469, 284, 1086, 285, 286, 287, 288, 289,
	290, 291, 470, 471, 472, 925, 1087, 476, 293, 0,
	0, 0, 211, 292, 294, 301, 1088, 924, 295, 473,
	297, 296, 298, 299, 300, 474, 1089, 475, 1090, 302,
	926, 927, 303, 304, 305, 928, 306, 307, 0, 0,
	308, 309, 310, 311, 1091, 313, 312, 1092, 314, 477,
	929, 315, 316, 930, 1093, 317, 318, 1094, 1095, 319,
	0, 320, 321, 324, 322, 323, 325, 327, 328, 326,
	931, 329, 330, 332, 331, 1096, 212, 932, 1097, 478,
	479, 333, 334, 1098, 335, 336, 337, 1099, 1100, 339,
	340, 1101, 1102, 341, 480, 933, 342, 934, 481, 343,
	338, 344, 345, 346, 347, 348, 349, 1103, 350, 482,
	351, 483, 352, 1104, 353, 0, 354, 355, 356, 357,
	358, 359, 484, 360, 361, 1105, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	1106, 375, 935, 376, 377, 378, 379, 485, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 1107, 398,
	399, 392, 394, 395, 396, 393, 397, 400, 401, 1108,
	402, 382, 383, 403, 936, 404, 486, 405, 406, 1109,
	416, 407, 408, 409, 384, 410, 414, 415, 411, 412,
	413, 487, 1110, 418, 419, 417, 1111, 420, 421, 422,
	423, 424, 268, 425, 269, 426, 1112, 488, 489, 490,
	427, 1113, 1114, 428, 429, 491, 430, 492, 1115, 431,
	432, 433, 0, 434, 435, 1116, 1117, 436, 437, 438,
	439, 441, 1118, 442, 1119, 440, 443, 444, 445, 493,
	494, 495, 1120, 447, 446, 496, 1121, 1122, 1123, 1124,
	448, 449, 497, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1040,
	0, 0, 0, 0, 0, 0, 2081, 0, 0, 0,
	0, 0, 0, 0, 0, 2082, 213, 214, 215, 216,
	217, 1047, 218, 1048, 1049, 1050, 1051, 453, 1052, 1053,
	1054, 1055, 219, 220, 221, 454, 455, 222, 456, 223,
	224, 457, 1056, 225, 226, 227, 228, 229, 230, 1057,
	1058, 231, 458, 459, 460, 1059, 232, 461, 1060, 1045,
	1061, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 1062, 242, 0, 243, 244, 245, 1063, 922, 246,
	247, 1064, 1065, 1067, 1066, 1068, 1069, 1070, 248, 249,
	250, 251, 252, 253, 462, 463, 1071, 254, 1072, 256,
	255, 1073, 257, 1074, 1075, 258, 259, 260, 1076, 261,
	1077, 262, 263, 1078, 464, 264, 265, 267, 270, 266,
	271, 272, 273, 465, 466, 1079, 210, 1080, 0, 0,
	0, 0, 274, 275, 276, 467, 277, 278, 0, 279,
	1081, 280, 1082, 1083, 923, 281, 282, 1084, 283, 468,
	1085, 469, 284, 1086, 285, 286, 287, 288, 289, 290,
	291, 470, 471, 472, 925, 1087, 476, 293, 0, 0,
	0, 211, 292, 294, 301, 1088, 924, 295, 473, 297,
	296, 298, 299, 300, 474, 1089, 475, 1090, 302, 926,
	927, 303, 304, 305, 928, 306, 307, 0, 0, 308,
	309, 310, 311, 1091, 313, 312, 1092, 314, 477, 929,
	315, 316, 930, 1093, 317, 318, 1094, 1095, 319, 0,
	320, 321, 324, 322, 323, 325, 327, 328, 326, 931,
	329, 330, 332, 331, 1096, 212, 932, 1097, 478, 479,
	333, 334, 1098, 335, 336, 337, 1099, 1100, 339, 340,
	1101, 1102, 341, 480, 933, 342, 934, 481, 343, 338,
	344, 345, 346, 347, 348, 349, 1103, 350, 482, 351,
	483, 352, 1104, 353, 0, 354, 355, 356, 357, 358,
	359, 484, 360, 361, 1105, 362, 363, 364, 365, 366,
	0, 368, 369, 370, 367, 371, 372, 373, 374, 1106,
	375, 935, 376, 377, 378, 379, 485, 380, 0, 381,
	385, 386, 387, 388, 389, 390, 391, 1107, 398, 399,
	392, 394, 395, 396, 393, 397, 400, 401, 1108, 402,
	382, 383, 403, 936, 404, 486, 405, 406, 1109, 416,
	407, 408, 409, 384, 410, 414, 415, 411, 412, 413,
	487, 1110, 418, 419, 417, 1111, 420, 421, 422, 423,
	424, 268, 425, 269, 426, 1112, 488, 489, 490, 427,
	1113, 1114, 428, 429, 491, 430, 492, 1115, 431, 432,
	433, 0, 434, 435, 1116, 1117, 436, 437, 438, 439,
	441, 1118, 442, 1119, 440, 443, 444, 445, 493, 494,
	495, 1120, 447, 446, 496, 1121, 1122, 1123, 1124, 448,
	449, 497, 450, 451, 452, 0, 0, 0, 0, 1040,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2950, 213, 214, 215, 216,
	217, 1047, 218, 1048, 1049, 1050, 1051, 453, 1052, 1053,
	1054, 1055, 219, 220, 221, 454, 455, 222, 456, 223,
	224, 457, 1056, 225, 226, 227, 228, 229, 230, 1057,
	1058, 231, 458, 459, 460, 1059, 232, 461, 1060, 1045,
	1061, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 1062, 242, 0, 243, 244, 245, 1063, 922, 246,
	247, 1064, 1065, 1067, 1066, 1068, 1069, 1070, 248, 249,
	250, 251, 252, 253, 462, 463, 1071, 254, 1072, 256,
	255, 1073, 257, 1074, 1075, 258, 259, 260, 1076, 261,
	1077, 262, 263, 1078, 464, 264, 265, 267, 270, 266,
	271, 272, 273, 465, 466, 1079, 210, 1080, 0, 0,
	0, 0, 274, 275, 276, 467, 277, 278, 0, 279,
	1081, 280, 1082, 1083, 923, 281, 282, 1084, 283, 468,
	1085, 469, 284, 1086, 285, 286, 287, 288, 289, 290,
	291, 470, 471, 472, 925, 1087, 476, 293, 0, 0,
	0, 211, 292, 294, 301, 1088, 924, 295, 473, 297,
	296, 298, 299, 300, 474, 1089, 475, 1090, 302, 926,
	927, 303, 304, 305, 928, 306, 307, 0, 0, 308,
	309, 310, 311, 1091, 313, 312, 1092, 314, 477, 929,
	315, 316, 930, 1093, 317, 318, 1094, 1095, 319, 0,
	320, 321, 324, 322, 323, 325, 327, 328, 326, 931,
	329, 330, 332, 331, 1096, 212, 932, 1097, 478, 479,
	333, 334, 1098, 335, 336, 337, 1099, 1100, 339, 340,
	1101, 1102, 341, 480, 933, 342, 934, 481, 343, 338,
	344, 345, 346, 347, 348, 349, 1103, 350, 482, 351,
	483, 352, 1104, 353, 0, 354, 355, 356, 357, 358,
	359, 484, 360, 361, 1105, 362, 363, 364, 365, 366,
	0, 368, 369, 370, 367, 371, 372, 373, 374, 1106,
	375, 935, 376, 377, 378, 379, 485, 380, 0, 381,
	385, 386, 387, 388, 389, 390, 391, 1107, 398, 399,
	392, 394, 395, 396, 393, 397, 400, 401, 1108, 402,
	382, 383, 403, 936, 404, 486, 405, 406, 1109, 416,
	407, 408, 409, 384, 410, 414, 415, 411, 412, 413,
	487, 1110, 418, 419, 417, 1111, 420, 421, 422, 423,
	424, 268, 425, 269, 426, 1112, 488, 489, 490, 427,
	1113, 1114, 428, 429, 491, 430, 492, 1115, 431, 432,
	433, 0, 434, 435, 1116, 1117, 436, 437, 438, 439,
	441, 1118, 442, 1119, 440, 443, 444, 445, 493, 494,
	495, 1120, 447, 446, 496, 1121, 1122, 1123, 1124, 448,
	449, 497, 450, 451, 452, 1040, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3054, 0, 213, 214, 215, 216, 217, 1047, 218, 1048,
	1049, 1050, 1051, 453, 1052, 1053, 1054, 1055, 219, 220,
	221, 454, 455, 222, 456, 223, 224, 457, 1056, 225,
	226, 227, 228, 229, 230, 1057, 1058, 231, 458, 459,
	460, 1059, 232, 461, 1060, 1045, 1061, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 1062, 242, 0,
	243, 244, 245, 1063, 922, 246, 247, 1064, 1065, 1067,
	1066, 1068, 1069, 1070, 248, 249, 250, 251, 252, 253,
	462, 463, 1071, 254, 1072, 256, 255, 1073, 257, 1074,
	1075, 258, 259, 260, 1076, 261, 1077, 262, 263, 1078,
	464, 264, 265, 267, 270, 266, 271, 272, 273, 465,
	466, 1079, 210, 1080, 0, 0, 0, 0, 274, 275,
	276, 467, 277, 278, 0, 279, 1081, 280, 1082, 1083,
	923, 281, 282, 1084, 283, 468, 1085, 469, 284, 1086,
	285, 286, 287, 288, 289, 290, 291, 470, 471, 472,
	925, 1087, 476, 293, 0, 0, 0, 211, 292, 294,
	301, 1088, 924, 295, 473, 297, 296, 298, 299, 300,
	474, 1089, 475, 1090, 302, 926, 927, 303, 304, 305,
	928, 306, 307, 0, 0, 308, 309, 310, 311, 1091,
	313, 312, 1092, 314, 477, 929, 315, 316, 930, 1093,
	317, 318, 1094, 1095, 319, 0, 320, 321, 324, 322,
	323, 325, 327, 328, 326, 931, 329, 330, 332, 331,
	1096, 212, 932, 1097, 478, 479, 333, 334, 1098, 335,
	336, 337, 1099, 1100, 339, 340, 1101, 1102, 341, 480,
	933, 342, 934, 481, 343, 338, 344, 345, 346, 347,
	348, 349, 1103, 350, 482, 351, 483, 352, 1104, 353,
	0, 354, 355, 356, 357, 358, 359, 484, 360, 361,
	1105, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 1106, 375, 935, 376, 377,
	378, 379, 485, 380, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 1107, 398, 399, 392, 394, 395, 396,
	393, 397, 400, 401, 1108, 402, 382, 383, 403, 936,
	404, 486, 405, 406, 1109, 416, 407, 408, 409, 384,
	410, 414, 415, 411, 412, 413, 487, 1110, 418, 419,
	417, 1111, 420, 421, 422, 423, 424, 268, 425, 269,
	426, 1112, 488, 489, 490, 427, 1113, 1114, 428, 429,
	491, 430, 492, 1115, 431, 432, 433, 0, 434, 435,
	1116, 1117, 436, 437, 438, 439, 441, 1118, 442, 1119,
	440, 443, 444, 445, 493, 494, 495, 1120, 447, 446,
	496, 1121, 1122, 1123, 1124, 448, 449, 497, 450, 451,
	452, 1040, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2703, 0, 213, 214,
	215, 216, 217, 1047, 218, 1048, 1049, 1050, 1051, 453,
	1052, 1053, 1054, 1055, 219, 220, 221, 454, 455, 222,
	456, 223, 224, 457, 1056, 225, 226, 227, 228, 229,
	230, 1057, 1058, 231, 458, 459, 460, 1059, 232, 461,
	1060, 1045, 1061, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 1062, 242, 0, 243, 244, 245, 1063,
	922, 246, 247, 1064, 1065, 1067, 1066, 1068, 1069, 1070,
	248, 249, 250, 251, 252, 253, 462, 463, 1071, 254,
	1072, 256, 255, 1073, 257, 1074, 1075, 258, 259, 260,
	1076, 261, 1077, 262, 263, 1078, 464, 264, 265, 267,
	270, 266, 271, 272, 273, 465, 466, 1079, 210, 1080,
	0, 0, 0, 0, 274, 275, 276, 467, 277, 278,
	0, 279, 1081, 280, 1082, 1083, 923, 281, 282, 1084,
	283, 468, 1085, 469, 284, 1086, 285, 286, 287, 288,
	289, 290, 291, 470, 471, 472, 925, 1087, 476, 293,
	0, 0, 0, 211, 292, 294, 301, 1088, 924, 295,
	473, 297, 296, 298, 299, 300, 474, 1089, 475, 1090,
	302, 926, 927, 303, 304, 305, 928, 306, 307, 0,
	0, 308, 309, 310, 311, 1091, 313, 312, 1092, 314,
	477, 929, 315, 316, 930, 1093, 317, 318, 1094, 1095,
	319, 0, 320, 321, 324, 322, 323, 325, 327, 328,
	326, 931, 329, 330, 332, 331, 1096, 212, 932, 1097,
	478, 479, 333, 334, 1098, 335, 336, 337, 1099, 1100,
	339, 340, 1101, 1102, 341, 480, 933, 342, 934, 481,
	343, 338, 344, 345, 346, 347, 348, 349, 1103, 350,
	482, 351, 483, 352, 1104, 353, 0, 354, 355, 356,
	357, 358, 359, 484, 360, 361, 1105, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 1106, 375, 935, 376, 377, 378, 379, 485, 380,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 1107,
	398, 399, 392, 394, 395, 396, 393, 397, 400, 401,
	1108, 402, 382, 383, 403, 936, 404, 486, 405, 406,
	1109, 416, 407, 408, 409, 384, 410, 414, 415, 411,
	412, 413, 487, 1110, 418, 419, 417, 1111, 420, 421,
	422, 423, 424, 268, 425, 269, 426, 1112, 488, 489,
	490, 427, 1113, 1114, 428, 429, 491, 430, 492, 1115,
	431, 432, 433, 0, 434, 435, 1116, 1117, 436, 437,
	438, 439, 441, 1118, 442, 1119, 440, 443, 444, 445,
	493, 494, 495, 1120, 447, 446, 496, 1121, 1122, 1123,
	1124, 448, 449, 497, 450, 451, 452, 1040, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2695, 0, 213, 214, 215, 216, 217, 1047,
	218, 1048, 1049, 1050, 1051, 453, 1052, 1053, 1054, 1055,
	219, 220, 221, 454, 455, 222, 456, 223, 224, 457,
	1056, 225, 226, 227, 228, 229, 230, 1057, 1058, 231,
	458, 459, 460, 1059, 232, 461, 1060, 1045, 1061, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 1062,
	242, 0, 243, 244, 245, 1063, 922, 246, 247, 1064,
	1065, 1067, 1066, 1068, 1069, 1070, 248, 249, 250, 251,
	252, 253, 462, 463, 1071, 254, 1072, 256, 255, 1073,
	257, 1074, 1075, 258, 259, 260, 1076, 261, 1077, 262,
	263, 1078, 464, 264, 265, 267, 270, 266, 271, 272,
	273, 465, 466, 1079, 210, 1080, 0, 0, 0, 0,
	274, 275, 276, 467, 277, 278, 0, 279, 1081, 280,
	1082, 1083, 923, 281, 282, 1084, 283, 468, 1085, 469,
	284, 1086, 285, 286, 287, 288, 289, 290, 291, 470,
	471, 472, 925, 1087, 476, 293, 0, 0, 0, 211,
	292, 294, 301, 1088, 924, 295, 473, 297, 296, 298,
	299, 300, 474, 1089, 475, 1090, 302, 926, 927, 303,
	304, 305, 928, 306, 307, 0, 0, 308, 309, 310,
	311, 1091, 313, 312, 1092, 314, 477, 929, 315, 316,
	930, 1093, 317, 318, 1094, 1095, 319, 0, 320, 321,
	324, 322, 323, 325, 327, 328, 326, 931, 329, 330,
	332, 331, 1096, 212, 932, 1097, 478, 479, 333, 334,
	1098, 335, 336, 337, 1099, 1100, 339, 340, 1101, 1102,
	341, 480, 933, 342, 934, 481, 343, 338, 344, 345,
	346, 347, 348, 349, 1103, 350, 482, 351, 483, 352,
	1104, 353, 0, 354, 355, 356, 357, 358, 359, 484,
	360, 361, 1105, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 1106, 375, 935,
	376, 377, 378, 379, 485, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 1107, 398, 399, 392, 394,
	395, 396, 393, 397, 400, 401, 1108, 402, 382, 383,
	403, 936, 404, 486, 405, 406, 1109, 416, 407, 408,
	409, 384, 410, 414, 415, 411, 412, 413, 487, 1110,
	418, 419, 417, 1111, 420, 421, 422, 423, 424, 268,
	425, 269, 426, 1112, 488, 489, 490, 427, 1113, 1114,
	428, 429, 491, 430, 492, 1115, 431, 432, 433, 0,
	434, 435, 1116, 1117, 436, 437, 438, 439, 441, 1118,
	442, 1119, 440, 443, 444, 445, 493, 494, 495, 1120,
	447, 446, 496, 1121, 1122, 1123, 1124, 448, 449, 497,
	450, 451, 452, 1040, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2571, 0,
	213, 214, 215, 216, 217, 1047, 218, 1048, 1049, 1050,
	1051, 453, 1052, 1053, 1054, 1055, 219, 220, 221, 454,
	455, 222, 456, 223, 224, 457, 1056, 225, 226, 227,
	228, 229, 230, 1057, 1058, 231, 458, 459, 460, 1059,
	232, 461, 1060, 1045, 1061, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 1062, 242, 0, 243, 244,
	245, 1063, 922, 246, 247, 1064, 1065, 1067, 1066, 1068,
	1069, 1070, 248, 249, 250, 251, 252, 253, 462, 463,
	1071, 254, 1072, 256, 255, 1073, 257, 1074, 1075, 258,
	259, 260, 1076, 261, 1077, 262, 263, 1078, 464, 264,
	265, 267, 270, 266, 271, 272, 273, 465, 466, 1079,
	210, 1080, 0, 0, 0, 0, 274, 275, 276, 467,
	277, 278, 0, 279, 1081, 280, 1082, 1083, 923, 281,
	282, 1084, 283, 468, 1085, 469, 284, 1086, 285, 286,
	287, 288, 289, 290, 291, 470, 471, 472, 925, 1087,
	476, 293, 0, 0, 0, 211, 292, 294, 301, 1088,
	924, 295, 473, 297, 296, 298, 299, 300, 474, 1089,
	475, 1090, 302, 926, 927, 303, 304, 305, 928, 306,
	307, 0, 0, 308, 309, 310, 311, 1091, 313, 312,
	1092, 314, 477, 929, 315, 316, 930, 1093, 317, 318,
	1094, 1095, 319, 0, 320, 321, 324, 322, 323, 325,
	327, 328, 326, 931, 329, 330, 332, 331, 1096, 212,
	932, 1097, 478, 479, 333, 334, 1098, 335, 336, 337,
	1099, 1100, 339, 340, 1101, 1102, 341, 480, 933, 342,
	934, 481, 343, 338, 344, 345, 346, 347, 348, 349,
	1103, 350, 482, 351, 483, 352, 1104, 353, 0, 354,
	355, 356, 357, 358, 359, 484, 360, 361, 1105, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 1106, 375, 935, 376, 377, 378, 379,
	485, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 1107, 398, 399, 392, 394, 395, 396, 393, 397,
	400, 401, 1108, 402, 382, 383, 403, 936, 404, 486,
	405, 406, 1109, 416, 407, 408, 409, 384, 410, 414,
	415, 411, 412, 413, 487, 1110, 418, 419, 417, 1111,
	420, 421, 422, 423, 424, 268, 425, 269, 426, 1112,
	488, 489, 490, 427, 1113, 1114, 428, 429, 491, 430,
	492, 1115, 431, 432, 433, 0, 434, 435, 1116, 1117,
	436, 437, 438, 439, 441, 1118, 442, 1119, 440, 443,
	444, 445, 493, 494, 495, 1120, 447, 446, 496, 1121,
	1122, 1123, 1124, 448, 449, 497, 450, 451, 452, 1040,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1985, 0, 213, 214, 215, 216,
	217, 1047, 218, 1048, 1049, 1050, 1051, 453, 1052, 1053,
	1054, 1055, 219, 220, 221, 454, 455, 222, 456, 223,
	224, 457, 1056, 225, 226, 227, 228, 229, 230, 1057,
	1058, 231, 458, 459, 460, 1059, 232, 461, 1060, 1045,
	1061, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 1062, 242, 0, 243, 244, 245, 1063, 922, 246,
	247, 1064, 1065, 1067, 1066, 1068, 1069, 1070, 248, 249,
	250, 251, 252, 253, 462, 463, 1071, 254, 1072, 256,
	255, 1073, 257, 1074, 1075, 258, 259, 260, 1076, 261,
	1077, 262, 263, 1078, 464, 264, 265, 267, 270, 266,
	271, 272, 273, 465, 466, 1079, 210, 1080, 0, 0,
	0, 0, 274, 275, 276, 467, 277, 278, 0, 279,
	1081, 280, 1082, 1083, 923, 281, 282, 1084, 283, 468,
	1085, 469, 284, 1086, 285, 286, 287, 288, 289, 290,
	291, 470, 471, 472, 925, 1087, 476, 293, 0, 0,
	0, 211, 292, 294, 301, 1088, 924, 295, 473, 297,
	296, 298, 299, 300, 474, 1089, 475, 1090, 302, 926,
	927, 303, 304, 305, 928, 306, 307, 0, 0, 308,
	309, 310, 311, 1091, 313, 312, 1092, 314, 477, 929,
	315, 316, 930, 1093, 317, 318, 1094, 1095, 319, 0,
	320, 321, 324, 322, 323, 325, 327, 328, 326, 931,
	329, 330, 332, 331, 1096, 212, 932, 1097, 478, 479,
	333, 334, 1098, 335, 336, 337, 1099, 1100, 339, 340,
	1101, 1102, 341, 480, 933, 342, 934, 481, 343, 338,
	344, 345, 346, 347, 348, 349, 1103, 350, 482, 351,
	483, 352, 1104, 353, 0, 354, 355, 356, 357, 358,
	359, 484, 360, 361, 1105, 362, 363, 364, 365, 366,
	0, 368, 369, 370, 367, 371, 372, 373, 374, 1106,
	375, 935, 376, 377, 378, 379, 485, 380, 0, 381,
	385, 386, 387, 388, 389, 390, 391, 1107, 398, 399,
	392, 394, 395, 396, 393, 397, 400, 401, 1108, 402,
	382, 383, 403, 936, 404, 486, 405, 406, 1109, 416,
	407, 408, 409, 384, 410, 414, 415, 411, 412, 413,
	487, 1110, 418, 419, 417, 1111, 420, 421, 422, 423,
	424, 268, 425, 269, 426, 1112, 488, 489, 490, 427,
	1113, 1114, 428, 429, 491, 430, 492, 1115, 431, 432,
	433, 0, 434, 435, 1116, 1117, 436, 437, 438, 439,
	441, 1118, 442, 1119, 440, 443, 444, 445, 493, 494,
	495, 1120, 447, 446, 496, 1121, 1122, 1123, 1124, 448,
	449, 497, 450, 451, 452, 1148, 0, 1040, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1728, 0, 0, 0, 213, 214, 215, 216, 217, 1047,
	218, 1048, 1049, 1050, 1051, 453, 1052, 1053, 1054, 1055,
	219, 220, 221, 454, 455, 222, 456, 223, 224, 457,
	1056, 225, 226, 227, 228, 229, 230, 1057, 1058, 231,
	458, 459, 460, 1059, 232, 461, 1060, 1045, 1061, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 1062,
	242, 0, 243, 244, 245, 1063, 922, 246, 247, 1064,
	1065, 1067, 1066, 1068, 1069, 1070, 248, 249, 250, 251,
	252, 253, 462, 463, 1071, 254, 1072, 256, 255, 1073,
	257, 1074, 1075, 258, 259, 260, 1076, 261, 1077, 262,
	263, 1078, 464, 264, 265, 267, 270, 266, 271, 272,
	273, 465, 466, 1079, 210, 1080, 0, 0, 0, 0,
	274, 275, 276, 467, 277, 278, 0, 279, 1081, 280,
	1082, 1083, 923, 281, 282, 1084, 283, 468, 1085, 469,
	284, 1086, 285, 286, 287, 288, 289, 290, 291, 470,
	471, 472, 925, 1087, 476, 293, 0, 0, 0, 211,
	292, 294, 301, 1088, 924, 295, 473, 297, 296, 298,
	299, 300, 474, 1089, 475, 1090, 302, 926, 927, 303,
	304, 305, 928, 306, 307, 0, 0, 308, 309, 310,
	311, 1091, 313, 312, 1092, 314, 477, 929, 315, 316,
	930, 1093, 317, 318, 1094, 1095, 319, 0, 320, 321,
	324, 322, 323, 325, 327, 328, 326, 931, 329, 330,
	332, 331, 1096, 212, 932, 1097, 478, 479, 333, 334,
	1098, 335, 336, 337, 1099, 1100, 339, 340, 1101, 1102,
	341, 480, 933, 342, 934, 481, 343, 338, 344, 345,
	346, 347, 348, 349, 1103, 350, 482, 351, 483, 352,
	1104, 353, 0, 354, 355, 356, 357, 358, 359, 484,
	360, 361, 1105, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 1106, 375, 935,
	376, 377, 378, 379, 485, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 1107, 398, 399, 392, 394,
	395, 396, 393, 397, 400, 401, 1108, 402, 382, 383,
	403, 936, 404, 486, 405, 406, 1109, 416, 407, 408,
	409, 384, 410, 414, 415, 411, 412, 413, 487, 1110,
	418, 419, 417, 1111, 420, 421, 422, 423, 424, 268,
	425, 269, 426, 1112, 488, 489, 490, 427, 1113, 1114,
	428, 429, 491, 430, 492, 1115, 431, 432, 433, 0,
	434, 435, 1116, 1117, 436, 437, 438, 439, 441, 1118,
	442, 1119, 440, 443, 444, 445, 493, 494, 495, 1120,
	447, 446, 496, 1121, 1122, 1123, 1124, 448, 449, 497,
	450, 451, 452, 1037, 0, 1040, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 1047, 218, 1048,
	1049, 1050, 1051, 453, 1052, 1053, 1054, 1055, 219, 220,
	221, 454, 455, 222, 456, 223, 224, 457, 1056, 225,
	226, 227, 228, 229, 230, 1057, 1058, 231, 458, 459,
	460, 1059, 232, 461, 1060, 1045, 1061, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 1062, 242, 0,
	243, 244, 245, 1063, 922, 246, 247, 1064, 1065, 1067,
	1066, 1068, 1069, 1070, 248, 249, 250, 251, 252, 253,
	462, 463, 1071, 254, 1072, 256, 255, 1073, 257, 1074,
	1075, 258, 259, 260, 1076, 261, 1077, 262, 263, 1078,
	464, 264, 265, 267, 270, 266, 271, 272, 273, 465,
	466, 1079, 210, 1080, 0, 0, 0, 0, 274, 275,
	276, 467, 277, 278, 0, 279, 1081, 280, 1082, 1083,
	923, 281, 282, 1084, 283, 468, 1085, 469, 284, 1086,
	285, 286, 287, 288, 289, 290, 291, 470, 471, 472,
	925, 1087, 476, 293, 0, 0, 0, 211, 292, 294,
	301, 1088, 924, 295, 473, 297, 296, 298, 299, 300,
	474, 1089, 475, 1090, 302, 926, 927, 303, 304, 305,
	928, 306, 307, 0, 0, 308, 309, 310, 311, 1091,
	313, 312, 1092, 314, 477, 929, 315, 316, 930, 1093,
	317, 318, 1094, 1095, 319, 0, 320, 321, 324, 322,
	323, 325, 327, 328, 326, 931, 329, 330, 332, 331,
	1096, 212, 932, 1097, 478, 479, 333, 334, 1098, 335,
	336, 337, 1099, 1100, 339, 340, 1101, 1102, 341, 480,
	933, 342, 934, 481, 343, 338, 344, 345, 346, 347,
	348, 349, 1103, 350, 482, 351, 483, 352, 1104, 353,
	0, 354, 355, 356, 357, 358, 359, 484, 360, 361,
	1105, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 1106, 375, 935, 376, 377,
	378, 379, 485, 380, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 1107, 398, 399, 392, 394, 395, 396,
	393, 397, 400, 401, 1108, 402, 382, 383, 403, 936,
	404, 486, 405, 406, 1109, 416, 407, 408, 409, 384,
	410, 414, 415, 411, 412, 413, 487, 1110, 418, 419,
	417, 1111, 420, 421, 422, 423, 424, 268, 425, 269,
	426, 1112, 488, 489, 490, 427, 1113, 1114, 428, 429,
	491, 430, 492, 1115, 431, 432, 433, 0, 434, 435,
	1116, 1117, 436, 437, 438, 439, 441, 1118, 442, 1119,
	440, 443, 444, 445, 493, 494, 495, 1120, 447, 446,
	496, 1121, 1122, 1123, 1124, 448, 449, 497, 450, 451,
	452, 1040, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 1047, 218, 1048, 1049, 1050, 1051, 453,
	1052, 1053, 1054, 1055, 219, 220, 221, 454, 455, 222,
	456, 223, 224, 457, 1056, 225, 226, 227, 228, 229,
	230, 1057, 1058, 231, 458, 459, 460, 1059, 232, 461,
	1060, 1045, 1061, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 1062, 242, 0, 243, 244, 245, 1063,
	922, 246, 247, 1064, 1065, 1067, 1066, 1068, 1069, 1070,
	248, 249, 250, 251, 252, 253, 462, 463, 1071, 254,
	1072, 256, 255, 1073, 257, 1074, 1075, 258, 259, 260,
	1076, 261, 1077, 262, 263, 1078, 464, 264, 265, 267,
	270, 266, 271, 272, 273, 465, 466, 1079, 210, 1080,
	0, 0, 0, 0, 274, 275, 276, 467, 277, 278,
	0, 279, 1081, 280, 1082, 1083, 923, 281, 282, 1084,
	283, 468, 1085, 469, 284, 1086, 285, 286, 287, 288,
	289, 290, 291, 470, 471, 472, 925, 1087, 476, 293,
	0, 0, 0, 211, 292, 294, 301, 1088, 924, 295,
	473, 297, 296, 298, 299, 300, 474, 1089, 475, 1090,
	302, 926, 927, 303, 304, 305, 928, 306, 307, 0,
	0, 308, 309, 310, 311, 1091, 313, 312, 1092, 314,
	477, 929, 315, 316, 930, 1093, 317, 318, 1094, 1095,
	319, 0, 320, 321, 324, 322, 323, 325, 327, 328,
	326, 931, 329, 330, 332, 331, 1096, 212, 932, 1097,
	478, 479, 333, 334, 1098, 335, 336, 337, 1099, 1100,
	339, 340, 1101, 1102, 341, 480, 933, 342, 934, 481,
	343, 338, 344, 345, 346, 347, 348, 349, 1103, 350,
	482, 351, 483, 352, 1104, 353, 0, 354, 355, 356,
	357, 358, 359, 484, 360, 361, 1105, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 1106, 375, 935, 376, 377, 378, 379, 485, 380,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 1107,
	398, 399, 392, 394, 395, 396, 393, 397, 400, 401,
	1108, 402, 382, 383, 403, 936, 404, 486, 405, 406,
	1109, 416, 407, 408, 409, 384, 410, 414, 415, 411,
	412, 413, 487, 1110, 418, 419, 417, 1111, 420, 421,
	422, 423, 424, 268, 425, 269, 426, 1112, 488, 489,
	490, 427, 1113, 1114, 428, 429, 491, 430, 492, 1115,
	431, 432, 433, 0, 434, 435, 1116, 1117, 436, 437,
	438, 439, 441, 1118, 442, 1119, 440, 443, 444, 445,
	493, 494, 495, 1120, 447, 446, 496, 1121, 1122, 1123,
	1124, 448, 449, 497, 450, 451, 452, 1961, 0, 864,
	821, 822, 823, 819, 820, 833, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 1958, 218, 0, 0, 0, 0, 913, 838, 0,
	0, 0, 219, 220, 221, 454, 879, 858, 890, 848,
	889, 888, 0, 225, 850, 849, 228, 229, 230, 840,
	912, 231, 948, 949, 460, 0, 232, 919, 0, 902,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 922, 246,
	247, 905, 903, 904, 909, 907, 906, 908, 248, 249,
	250, 251, 893, 253, 886, 885, 810, 254, 0, 256,
	255, 0, 257, 1959, 0, 258, 884, 260, 0, 261,
	0, 262, 263, 0, 816, 264, 265, 267, 270, 266,
	271, 272, 273, 939, 940, 829, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 883, 881, 882, 0, 279,
	0, 280, 0, 0, 923, 281, 282, 0, 283, 946,
	0, 839, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 914, 915, 918, 925, 0, 916, 860, 0, 0,
	0, 211, 292, 294, 301, 0, 924, 295, 872, 863,
	874, 876, 877, 878, 873, 0, 865, 0, 302, 926,
	927, 303, 304, 305, 928, 898, 899, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 947, 929,
	315, 316, 930, 0, 317, 318, 0, 0, 319, 0,
	320, 321, 324, 322, 323, 325, 327, 852, 326, 931,
	329, 330, 332, 331, 807, 212, 932, 830, 917, 887,
	333, 334, 0, 861, 336, 862, 0, 0, 339, 340,
	0, 0, 341, 480, 933, 342, 934, 941, 343, 338,
	344, 345, 346, 347, 348, 349, 0, 350, 942, 351,
	483, 352, 0, 353, 0, 354, 355, 356, 357, 358,
	359, 880, 360, 361, 0, 362, 363, 364, 365, 366,
	0, 368, 369, 370, 367, 371, 372, 373, 374, 0,
	375, 935, 376, 377, 378, 379, 817, 380, 0, 381,
	385, 386, 387, 388, 389, 390, 391, 0, 398, 399,
	853, 854, 856, 857, 393, 397, 400, 401, 910, 402,
	382, 383, 403, 936, 404, 875, 855, 406, 0, 416,
	407, 408, 409, 384, 410, 414, 921, 411, 412, 413,
	943, 0, 418, 419, 417, 0, 420, 421, 422, 423,
	424, 268, 425, 269, 851, 0, 894, 895, 896, 897,
	0, 0, 428, 429, 944, 430, 945, 828, 431, 432,
	433, 0, 434, 435, 0, 811, 436, 437, 438, 439,
	441, 911, 442, 0, 859, 443, 444, 445, 493, 891,
	938, 1957, 447, 446, 496, 0, 0, 0, 0, 448,
	449, 497, 450, 451, 452, 808, 0, 0, 0, 0,
	0, 0, 0, 806, 0, 0, 0, 0, 804, 805,
	1960, 0, 0, 0, 0, 0, 0, 834, 1956, 0,
	0, 0, 797, 832, 864, 821, 822, 823, 819, 820,
	833, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 913, 838, 0, 0, 0, 219, 220, 221,
	454, 879, 858, 890, 848, 889, 888, 0, 225, 850,
	849, 228, 229, 230, 840, 912, 231, 948, 949, 460,
	0, 232, 919, 0, 902, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 922, 246, 247, 905, 903, 904, 909,
	907, 906, 908, 248, 249, 250, 251, 893, 253, 886,
	885, 810, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 884, 260, 0, 261, 0, 262, 263, 0, 816,
	264, 265, 267, 270, 266, 271, 272, 273, 939, 940,
	829, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	883, 881, 882, 0, 279, 0, 280, 0, 0, 923,
	281, 282, 0, 283, 946, 0, 839, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 914, 915, 918, 925,
	0, 916, 860, 0, 0, 0, 211, 292, 294, 301,
	0, 924, 295, 872, 863, 874, 876, 877, 878, 873,
	0, 865, 0, 302, 926, 927, 303, 304, 305, 928,
	898, 899, 0, 0, 308, 309, 310, 311, 0, 313,
	312, 0, 314, 947, 929, 315, 316, 930, 0, 317,
	318, 0, 0, 319, 0, 320, 321, 324, 322, 323,
	325, 327, 852, 326, 931, 329, 330, 332, 331, 807,
	212, 932, 830, 917, 887, 333, 334, 0, 861, 336,
	862, 0, 0, 339, 340, 0, 0, 341, 480, 933,
	342, 934, 941, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 942, 351, 483, 352, 0, 353, 0,
	354, 355, 356, 357, 358, 359, 880, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 935, 376, 377, 378,
	379, 817, 380, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 176, 398, 399, 853, 854, 856, 857, 393,
	397, 400, 401, 910, 402, 382, 383, 403, 936, 404,
	875, 855, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 921, 411, 412, 413, 943, 0, 418, 419, 417,
	178, 420, 421, 422, 423, 424, 268, 425, 269, 851,
	0, 894, 895, 896, 897, 0, 0, 428, 429, 944,
	430, 945, 828, 431, 432, 433, 0, 434, 435, 0,
	811, 436, 437, 438, 439, 441, 911, 442, 0, 859,
	443, 444, 445, 1285, 891, 938, 0, 447, 446, 496,
	0, 0, 0, 170, 448, 449, 497, 450, 451, 452,
	808, 171, 0, 0, 0, 0, 0, 0, 806, 0,
	0, 0, 0, 804, 805, 864, 821, 822, 823, 819,
	820, 833, 1472, 1470, 0, 0, 0, 0, 832, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 913, 838, 0, 0, 0, 219, 220,
	221, 454, 879, 858, 890, 848, 889, 888, 0, 225,
	850, 849, 228, 229, 230, 840, 912, 231, 948, 949,
	460, 0, 232, 919, 0, 902, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 922, 246, 247, 905, 903, 904,
	909, 907, 906, 908, 248, 249, 250, 251, 893, 253,
	886, 885, 810, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 884, 260, 0, 261, 0, 262, 263, 0,
	816, 264, 265, 267, 270, 266, 271, 272, 273, 939,
	940, 829, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 883, 881, 882, 0, 279, 0, 280, 0, 0,
	923, 281, 282, 0, 283, 946, 0, 839, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 914, 915, 918,
	925, 0, 916, 860, 0, 0, 0, 211, 292, 294,
	301, 0, 924, 295, 872, 863, 874, 876, 877, 878,
	873, 0, 865, 0, 302, 926, 927, 303, 304, 305,
	928, 898, 899, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 947, 929, 315, 316, 930, 0,
	317, 318, 0, 0, 319, 0, 320, 321, 324, 322,
	323, 325, 327, 852, 326, 931, 329, 330, 332, 331,
	807, 212, 932, 830, 917, 887, 333, 334, 0, 861,
	336, 862, 0, 0, 339, 340, 0, 0, 341, 480,
	933, 342, 934, 941, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 942, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 880, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 935, 376, 377,
	378, 379, 817, 380, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 176, 398, 399, 853, 854, 856, 857,
	393, 397, 400, 401, 910, 402, 382, 383, 403, 936,
	404, 875, 855, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 921, 411, 412, 413, 943, 0, 418, 419,
	417, 178, 420, 421, 422, 423, 424, 268, 425, 269,
	851, 0, 894, 895, 896, 897, 0, 0, 428, 429,
	944, 430, 945, 828, 431, 432, 433, 0, 434, 435,
	0, 811, 436, 437, 438, 439, 441, 911, 442, 0,
	859, 443, 444, 445, 1285, 891, 938, 0, 447, 446,
	496, 0, 0, 0, 170, 448, 449, 497, 450, 451,
	452, 808, 171, 0, 0, 0, 0, 0, 0, 806,
	0, 0, 0, 0, 804, 805, 864, 821, 822, 823,
	819, 820, 833, 1472, 2344, 0, 0, 0, 0, 832,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 913, 838, 0, 0, 0, 219,
	220, 221, 454, 879, 858, 890, 848, 889, 888, 0,
	225, 850, 849, 228, 229, 230, 840, 912, 231, 948,
	949, 460, 0, 232, 919, 0, 902, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 922, 246, 247, 905, 903,
	904, 909, 907, 906, 908, 248, 249, 250, 251, 893,
	253, 886, 885, 810, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 884, 260, 0, 261, 0, 262, 263,
	0, 816, 264, 265, 267, 270, 266, 271, 272, 273,
	939, 940, 829, 210, 0, 0, 0, 0, 0, 274,
	275, 276, 883, 881, 882, 0, 279, 0, 280, 0,
	0, 923, 281, 282, 0, 283, 946, 0, 839, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 914, 915,
	918, 925, 0, 916, 860, 0, 0, 0, 211, 292,
	294, 301, 0, 924, 295, 872, 863, 874, 876, 877,
	878, 873, 0, 865, 0, 302, 926, 927, 303, 304,
	305, 928, 898, 899, 0, 0, 308, 309, 310, 311,
	0, 313, 312, 0, 314, 947, 929, 315, 316, 930,
	0, 317, 318, 0, 0, 319, 0, 320, 321, 324,
	322, 323, 325, 327, 852, 326, 931, 329, 330, 332,
	331, 807, 212, 932, 830, 917, 887, 333, 334, 0,
	861, 336, 862, 0, 0, 339, 340, 0, 0, 341,
	480, 933, 342, 934, 941, 343, 338, 344, 345, 346,
	347, 348, 349, 0, 350, 942, 351, 483, 352, 0,
	353, 0, 354, 355, 356, 357, 358, 359, 880, 360,
	361, 0, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 0, 375, 935, 376,
	377, 378, 379, 817, 380, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 176, 398, 399, 853, 854, 856,
	857, 393, 397, 400, 401, 910, 402, 382, 383, 403,
	936, 404, 875, 855, 406, 0, 416, 407, 408, 409,
	384, 410, 414, 921, 411, 412, 413, 943, 0, 418,
	419, 417, 178, 420, 421, 422, 423, 424, 268, 425,
	269, 851, 0, 894, 895, 896, 897, 0, 0, 428,
	429, 944, 430, 945, 828, 431, 432, 433, 0, 434,
	435, 0, 811, 436, 437, 438, 439, 441, 911, 442,
	0, 859, 443, 444, 445, 1285, 891, 938, 0, 447,
	446, 496, 0, 0, 0, 170, 448, 449, 497, 450,
	451, 452, 808, 171, 0, 0, 0, 0, 0, 0,
	806, 0, 0, 0, 0, 804, 805, 864, 821, 822,
	823, 819, 820, 833, 1472, 1470, 0, 0, 0, 0,
	832, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 913, 838, 0, 0, 0,
	219, 220, 221, 454, 879, 858, 890, 848, 889, 888,
	2043, 225, 850, 849, 228, 229, 230, 840, 912, 231,
	948, 949, 460, 0, 232, 919, 0, 902, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 922, 246, 247, 905,
	903, 904, 909, 907, 906, 908, 248, 249, 250, 251,
	893, 253, 886, 885, 810, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 884, 260, 0, 261, 0, 262,
	263, 0, 816, 264, 265, 267, 270, 266, 271, 272,
	273, 939, 940, 829, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 883, 881, 882, 0, 279, 0, 280,
	0, 2048, 923, 281, 282, 0, 283, 946, 0, 839,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 914,
	915, 918, 925, 0, 916, 860, 0, 0, 0, 211,
	292, 294, 301, 0, 924, 295, 872, 863, 874, 876,
	877, 878, 873, 0, 865, 0, 302, 926, 927, 303,
	304, 305, 928, 898, 899, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 2044, 314, 947, 929, 315, 316,
	930, 0, 317, 318, 0, 0, 319, 0, 320, 321,
	324, 322, 323, 325, 327, 852, 326, 931, 329, 330,
	332, 331, 807, 212, 932, 830, 917, 887, 333, 334,
	0, 861, 336, 862, 0, 0, 339, 340, 0, 0,
	341, 480, 933, 342, 934, 941, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 942, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 880,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 935,
	376, 377, 378, 379, 817, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 398, 399, 853, 854,
	856, 857, 393, 397, 400, 401, 910, 402, 382, 383,
	403, 936, 404, 875, 855, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 921, 411, 412, 413, 943, 0,
	418, 419, 417, 0, 420, 421, 422, 423, 424, 268,
	425, 269, 851, 0, 894, 895, 896, 897, 0, 2045,
	428, 429, 944, 430, 945, 828, 431, 432, 433, 0,
	434, 435, 0, 811, 436, 437, 438, 439, 441, 911,
	442, 0, 859, 443, 444, 445, 493, 891, 938, 0,
	447, 446, 496, 0, 0, 0, 0, 448, 449, 497,
	450, 451, 452, 808, 0, 0, 0, 0, 0, 0,
	0, 806, 0, 0, 0, 0, 804, 805, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 0, 0, 0,
	800, 832, 864, 821, 822, 823, 819, 820, 833, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	913, 838, 0, 0, 0, 219, 220, 221, 454, 879,
	858, 890, 848, 889, 888, 0, 225, 850, 849, 228,
	229, 230, 840, 912, 231, 948, 949, 460, 0, 232,
	919, 0, 902, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 922, 246, 247, 905, 903, 904, 909, 907, 906,
	908, 248, 249, 250, 251, 893, 253, 886, 885, 810,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 884,
	260, 0, 261, 0, 262, 263, 0, 816, 264, 265,
	267, 270, 266, 271, 272, 273, 939, 940, 829, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 883, 881,
	882, 0, 279, 0, 280, 0, 0, 923, 281, 282,
	0, 283, 946, 0, 839, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 914, 915, 918, 925, 0, 916,
	860, 0, 0, 0, 211, 292, 294, 301, 0, 924,
	295, 872, 863, 874, 876, 877, 878, 873, 0, 865,
	0, 302, 926, 927, 303, 304, 305, 928, 898, 899,
	0, 0, 308, 309, 310, 311, 0, 313, 312, 0,
	314, 947, 929, 315, 316, 930, 0, 317, 318, 0,
	0, 319, 0, 320, 321, 324, 322, 323, 325, 327,
	852, 326, 931, 329, 330, 332, 331, 807, 212, 932,
	830, 917, 887, 333, 334, 0, 861, 336, 862, 812,
	0, 339, 340, 0, 0, 341, 480, 933, 342, 934,
	941, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 942, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 880, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 935, 376, 377, 378, 379, 817,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 853, 854, 856, 857, 393, 397, 400,
	401, 910, 402, 382, 383, 403, 936, 404, 875, 855,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 921,
	411, 412, 413, 943, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 268, 425, 269, 851, 0, 894,
	895, 896, 897, 0, 0, 428, 429, 944, 430, 945,
	828, 431, 432, 433, 0, 434, 435, 0, 811, 436,
	437, 438, 439, 441, 911, 442, 0, 859, 443, 444,
	445, 493, 891, 938, 0, 447, 446, 496, 0, 0,
	0, 0, 448, 449, 497, 450, 451, 452, 808, 0,
	0, 0, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 804, 805, 864, 821, 822, 823, 819, 820, 833,
	834, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 913, 838, 0, 0, 0, 219, 220, 221, 454,
	879, 858, 890, 848, 889, 888, 0, 225, 850, 849,
	228, 229, 230, 840, 912, 231, 948, 949, 460, 0,
	232, 919, 0, 902, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 922, 246, 247, 905, 903, 904, 909, 907,
	906, 908, 248, 249, 250, 251, 893, 253, 886, 885,
	810, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	884, 260, 0, 261, 0, 262, 263, 0, 816, 264,
	265, 267, 270, 266, 271, 272, 273, 939, 940, 829,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 883,
	881, 882, 0, 279, 0, 280, 0, 0, 923, 281,
	282, 0, 283, 946, 0, 839, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 914, 915, 918, 925, 0,
	916, 860, 0, 0, 0, 211, 292, 294, 301, 0,
	924, 295, 872, 863, 874, 876, 877, 878, 873, 0,
	865, 0, 302, 926, 927, 303, 304, 305, 928, 898,
	899, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 947, 929, 315, 316, 930, 0, 317, 318,
	0, 0, 319, 0, 320, 321, 324, 322, 323, 325,
	327, 852, 326, 931, 329, 330, 332, 331, 807, 212,
	932, 830, 917, 887, 333, 334, 0, 861, 336, 862,
	812, 0, 339, 340, 0, 0, 341, 480, 933, 342,
	934, 941, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 942, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 880, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 935, 376, 377, 378, 379,
	817, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 853, 854, 856, 857, 393, 397,
	400, 401, 910, 402, 382, 383, 403, 936, 404, 875,
	855, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	921, 411, 412, 413, 943, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 268, 425, 269, 851, 0,
	894, 895, 896, 897, 0, 0, 428, 429, 944, 430,
	945, 828, 431, 432, 433, 0, 434, 435, 0, 811,
	436, 437, 438, 439, 441, 911, 442, 0, 859, 443,
	444, 445, 493, 891, 938, 0, 447, 446, 496, 0,
	0, 0, 0, 448, 449, 497, 450, 451, 452, 808,
	0, 0, 0, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 804, 805, 864, 821, 822, 823, 819, 820,
	833, 834, 0, 0, 0, 0, 0, 832, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 913, 838, 0, 0, 0, 219, 220, 221,
	454, 879, 858, 890, 848, 889, 888, 0, 225, 850,
	849, 228, 229, 230, 840, 912, 231, 948, 949, 460,
	0, 232, 919, 0, 902, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 922, 246, 247, 905, 903, 904, 909,
	907, 906, 908, 248, 249, 250, 251, 893, 253, 886,
	885, 810, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 884, 260, 0, 261, 0, 262, 263, 0, 816,
	264, 265, 267, 270, 266, 271, 272, 273, 939, 940,
	829, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	883, 881, 882, 0, 279, 0, 280, 0, 0, 923,
	281, 282, 0, 283, 946, 0, 839, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 914, 915, 918, 925,
	0, 916, 860, 0, 0, 0, 211, 292, 294, 301,
	0, 924, 295, 872, 863, 874, 876, 877, 878, 873,
	0, 865, 0, 302, 926, 927, 303, 304, 305, 928,
	898, 899, 0, 0, 308, 309, 310, 311, 0, 313,
	312, 0, 314, 947, 929, 315, 316, 930, 0, 317,
	318, 0, 0, 319, 0, 320, 321, 324, 322, 323,
	325, 327, 852, 326, 931, 329, 330, 332, 331, 807,
	2863, 932, 830, 917, 887, 333, 334, 0, 861, 336,
	862, 0, 0, 339, 340, 0, 0, 341, 480, 933,
	342, 934, 941, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 942, 351, 483, 352, 0, 353, 0,
	354, 355, 356, 357, 358, 359, 880, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 935, 376, 377, 378,
	379, 817, 380, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 0, 398, 399, 853, 854, 856, 857, 393,
	397, 400, 401, 910, 402, 382, 383, 403, 936, 404,
	875, 855, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 921, 411, 412, 413, 943, 0, 418, 419, 417,
	0, 420, 421, 422, 423, 424, 268, 425, 269, 851,
	0, 894, 895, 896, 897, 0, 0, 428, 429, 944,
	430, 945, 828, 431, 432, 433, 0, 434, 435, 0,
	811, 436, 437, 438, 439, 441, 911, 442, 0, 859,
	443, 444, 445, 493, 891, 938, 0, 447, 446, 496,
	0, 0, 0, 0, 448, 449, 497, 450, 451, 452,
	808, 0, 0, 0, 0, 0, 0, 0, 806, 0,
	0, 0, 0, 804, 805, 1528, 0, 0, 0, 0,
	0, 0, 834, 0, 0, 0, 0, 0, 832, 864,
	821, 822, 823, 819, 820, 833, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 913, 838, 0,
	0, 0, 219, 220, 221, 454, 879, 858, 890, 848,
	889, 888, 0, 225, 850, 849, 228, 229, 230, 840,
	912, 231, 948, 949, 460, 0, 232, 919, 0, 902,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 922, 246,
	247, 905, 903, 904, 909, 907, 906, 908, 248, 249,
	250, 251, 893, 253, 886, 885, 810, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 884, 260, 0, 261,
	0, 262, 263, 0, 816, 264, 265, 267, 270, 266,
	271, 272, 273, 939, 940, 829, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 883, 881, 882, 0, 279,
	0, 280, 0, 0, 923, 281, 282, 0, 283, 946,
	0, 839, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 914, 915, 918, 925, 0, 916, 860, 0, 0,
	0, 211, 292, 294, 301, 0, 924, 295, 872, 863,
	874, 876, 877, 878, 873, 0, 865, 0, 302, 926,
	927, 303, 304, 305, 928, 898, 899, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 947, 929,
	315, 316, 930, 0, 317, 318, 0, 0, 319, 0,
	320, 321, 324, 322, 323, 325, 327, 852, 326, 931,
	329, 330, 332, 331, 807, 212, 932, 830, 917, 887,
	333, 334, 0, 861, 336, 862, 0, 0, 339, 340,
	0, 0, 341, 480, 933, 342, 934, 941, 343, 338,
	344, 345, 346, 347, 348, 349, 0, 350, 942, 351,
	483, 352, 0, 353, 0, 354, 355, 356, 357, 358,
	359, 880, 360, 361, 0, 362, 363, 364, 365, 366,
	0, 368, 369, 370, 367, 371, 372, 373, 374, 0,
	375, 935, 376, 377, 378, 379, 817, 380, 0, 381,
	385, 386, 387, 388, 389, 390, 391, 0, 398, 399,
	853, 854, 856, 857, 393, 397, 400, 401, 910, 402,
	382, 383, 403, 936, 404, 875, 855, 406, 0, 416,
	407, 408, 409, 384, 410, 414, 921, 411, 412, 413,
	943, 0, 418, 419, 417, 0, 420, 421, 422, 423,
	424, 268, 425, 269, 851, 0, 894, 895, 896, 897,
	0, 0, 428, 429, 944, 430, 945, 828, 431, 432,
	433, 0, 434, 435, 0, 811, 436, 437, 438, 439,
	441, 911, 442, 0, 859, 443, 444, 445, 493, 891,
	938, 2682, 447, 446, 496, 0, 0, 0, 0, 448,
	449, 497, 450, 451, 452, 808, 0, 0, 0, 0,
	0, 0, 0, 806, 0, 0, 0, 0, 804, 805,
	864, 821, 822, 823, 819, 820, 833, 834, 0, 0,
	0, 0, 0, 832, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 913, 838,
	0, 0, 0, 219, 220, 221, 454, 879, 858, 890,
	848, 889, 888, 0, 225, 850, 849, 228, 229, 230,
	840, 912, 231, 948, 949, 460, 0, 232, 919, 0,
	902, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 922,
	246, 247, 905, 903, 904, 909, 907, 906, 908, 248,
	249, 250, 251, 893, 253, 886, 885, 810, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 884, 260, 0,
	261, 0, 262, 263, 0, 816, 264, 265, 267, 270,
	266, 271, 272, 273, 939, 940, 829, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 883, 881, 882, 0,
	279, 0, 280, 0, 0, 923, 281, 282, 0, 283,
	946, 0, 839, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 914, 915, 918, 925, 0, 916, 860, 0,
	0, 0, 1875, 292, 294, 301, 0, 924, 295, 872,
	863, 874, 876, 877, 878, 873, 0, 865, 0, 302,
	926, 927, 303, 304, 305, 928, 898, 899, 0, 0,
	308, 309, 310, 311, 0, 313, 312, 0, 314, 947,
	929, 315, 316, 930, 0, 317, 318, 0, 0, 319,
	0, 320, 321, 324, 322, 323, 325, 327, 852, 326,
	931, 329, 330, 332, 331, 807, 212, 932, 830, 917,
	887, 333, 334, 0, 861, 336, 862, 0, 0, 339,
	340, 0, 0, 341, 480, 933, 342, 934, 941, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 942,
	351, 483, 352, 1874, 353, 0, 354, 355, 356, 357,
	358, 359, 880, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 935, 376, 377, 378, 379, 817, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 0, 398,
	399, 853, 854, 856, 857, 393, 397, 400, 401, 910,
	402, 382, 383, 403, 936, 404, 875, 855, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 921, 411, 412,
	413, 943, 0, 418, 419, 417, 0, 420, 421, 422,
	423, 424, 268, 425, 269, 851, 0, 894, 895, 896,
	897, 0, 0, 428, 429, 944, 430, 945, 828, 431,
	432, 433, 0, 434, 435, 0, 811, 436, 437, 438,
	439, 441, 911, 442, 0, 859, 443, 444, 445, 493,
	891, 938, 0, 447, 446, 496, 0, 0, 0, 0,
	448, 449, 497, 450, 451, 452, 808, 0, 0, 0,
	0, 0, 0, 0, 806, 0, 0, 0, 0, 804,
	805, 864, 821, 822, 823, 819, 820, 833, 834, 0,
	0, 0, 0, 0, 832, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 913,
	838, 0, 0, 0, 219, 220, 221, 454, 879, 858,
	890, 848, 889, 888, 0, 225, 850, 849, 228, 229,
	230, 840, 912, 231, 948, 949, 460, 0, 232, 919,
	0, 902, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	922, 246, 247, 905, 903, 904, 909, 907, 906, 908,
	248, 249, 250, 251, 893, 253, 886, 885, 810, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 884, 260,
	0, 261, 0, 262, 263, 0, 816, 264, 265, 267,
	270, 266, 271, 272, 273, 939, 940, 829, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 883, 881, 882,
	0, 279, 0, 280, 0, 0, 923, 281, 282, 0,
	283, 946, 0, 839, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 914, 915, 918, 925, 0, 916, 860,
	0, 0, 0, 211, 292, 294, 301, 0, 924, 295,
	872, 863, 874, 876, 877, 878, 873, 0, 865, 0,
	302, 926, 927, 303, 304, 305, 928, 898, 899, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	947, 929, 315, 316, 930, 0, 317, 318, 0, 0,
	319, 0, 320, 321, 324, 322, 323, 325, 327, 852,
	326, 931, 329, 330, 332, 331, 807, 212, 932, 830,
	917, 887, 333, 334, 0, 861, 336, 862, 0, 0,
	339, 340, 0, 0, 341, 480, 933, 342, 934, 941,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	942, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 880, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 935, 376, 377, 378, 379, 817, 380,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 0,
	398, 399, 853, 854, 856, 857, 393, 397, 400, 401,
	910, 402, 382, 383, 403, 936, 404, 875, 855, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 921, 411,
	412, 413, 943, 0, 418, 419, 417, 0, 420, 421,
	422, 423, 424, 268, 425, 269, 851, 0, 894, 895,
	896, 897, 0, 0, 428, 429, 944, 430, 945, 828,
	431, 432, 433, 0, 434, 435, 0, 811, 436, 437,
	438, 439, 441, 911, 442, 0, 859, 443, 444, 445,
	493, 891, 938, 0, 447, 446, 496, 0, 0, 0,
	0, 448, 449, 497, 450, 451, 452, 808, 0, 0,
	0, 0, 0, 0, 0, 806, 0, 0, 0, 0,
	804, 805, 1528, 0, 0, 0, 0, 0, 0, 834,
	0, 0, 0, 0, 0, 832, 864, 821, 822, 823,
	819, 820, 833, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 213, 214, 215, 216, 217, 0, 218,
	0, 0, 0, 0, 913, 838, 0, 0, 0, 219,
	220, 221, 454, 879, 858, 890, 848, 889, 888, 0,
	225, 850, 849, 228, 229, 230, 840, 912, 231, 948,
	949, 460, 0, 232, 919, 0, 902, 0, 233, 234,
	235, 236, 237, 0, 239, 240, 241, 238, 0, 242,
	0, 243, 244, 245, 0, 922, 246, 247, 905, 903,
	904, 909, 907, 906, 908, 248, 249, 250, 251, 893,
	253, 886, 885, 810, 254, 0, 256, 255, 0, 257,
	0, 0, 258, 884, 260, 0, 261, 0, 262, 263,
	0, 816, 264, 265, 267, 270, 266, 271, 272, 273,
	939, 940, 829, 210, 0, 0, 0, 0, 0, 274,
	275, 276, 883, 881, 882, 0, 279, 0, 280, 0,
	2048, 923, 281, 282, 0, 283, 946, 0, 839, 284,
	0, 285, 286, 287, 288, 289, 290, 291, 914, 915,
	918, 925, 0, 916, 860, 0, 0, 0, 211, 292,
	294, 301, 0, 924, 295, 872, 863, 874, 876, 877,
	878, 873, 0, 865, 0, 302, 926, 927, 303, 304,
	305, 928, 898, 899, 0, 0, 308, 309, 310, 311,
	0, 313, 312, 0, 314, 947, 929, 315, 316, 930,
	0, 317, 318, 0, 0, 319, 0, 320, 321, 324,
	322, 323, 325, 327, 852, 326, 931, 329, 330, 332,
	331, 807, 212, 932, 830, 917, 887, 333, 334, 0,
	861, 336, 862, 0, 0, 339, 340, 0, 0, 341,
	480, 933, 342, 934, 941, 343, 338, 344, 345, 346,
	347, 348, 349, 0, 350, 942, 351, 483, 352, 0,
	353, 0, 354, 355, 356, 357, 358, 359, 880, 360,
	361, 0, 362, 363, 364, 365, 366, 0, 368, 369,
	370, 367, 371, 372, 373, 374, 0, 375, 935, 376,
	377, 378, 379, 817, 380, 0, 381, 385, 386, 387,
	388, 389, 390, 391, 0, 398, 399, 853, 854, 856,
	857, 393, 397, 400, 401, 910, 402, 382, 383, 403,
	936, 404, 875, 855, 406, 0, 416, 407, 408, 409,
	384, 410, 414, 921, 411, 412, 413, 943, 0, 418,
	419, 417, 0, 420, 421, 422, 423, 424, 268, 425,
	269, 851, 0, 894, 895, 896, 897, 0, 0, 428,
	429, 944, 430, 945, 828, 431, 432, 433, 0, 434,
	435, 0, 811, 436, 437, 438, 439, 441, 911, 442,
	0, 859, 443, 444, 445, 493, 891, 938, 0, 447,
	446, 496, 0, 0, 0, 0, 448, 449, 497, 450,
	451, 452, 808, 0, 0, 0, 0, 0, 0, 0,
	806, 0, 0, 0, 0, 804, 805, 864, 821, 822,
	823, 819, 820, 833, 834, 0, 0, 0, 0, 0,
	832, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 913, 838, 0, 0, 0,
	219, 220, 221, 454, 879, 858, 890, 848, 889, 888,
	0, 225, 850, 849, 228, 229, 230, 840, 912, 231,
	948, 949, 460, 0, 232, 919, 0, 902, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 922, 246, 247, 905,
	903, 904, 909, 907, 906, 908, 248, 249, 250, 251,
	893, 253, 886, 885, 810, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 884, 260, 0, 261, 0, 262,
	263, 0, 816, 264, 265, 267, 270, 266, 271, 272,
	273, 939, 940, 829, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 883, 881, 882, 0, 279, 0, 280,
	0, 0, 923, 281, 282, 0, 283, 946, 0, 839,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 914,
	915, 918, 925, 0, 916, 860, 0, 0, 0, 211,
	292, 294, 301, 0, 924, 295, 872, 863, 874, 876,
	877, 878, 873, 0, 865, 0, 302, 926, 927, 303,
	304, 305, 928, 898, 899, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 947, 929, 315, 316,
	930, 0, 317, 318, 0, 0, 319, 0, 320, 321,
	324, 322, 323, 325, 327, 852, 326, 931, 329, 330,
	332, 331, 807, 212, 932, 830, 917, 887, 333, 334,
	0, 861, 336, 862, 0, 0, 339, 340, 0, 0,
	341, 480, 933, 342, 934, 941, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 942, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 880,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 935,
	376, 377, 378, 379, 817, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 398, 399, 853, 854,
	856, 857, 393, 397, 400, 401, 910, 402, 382, 383,
	403, 936, 404, 875, 855, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 921, 411, 412, 413, 943, 0,
	418, 419, 417, 0, 420, 421, 422, 423, 424, 268,
	425, 269, 851, 0, 894, 895, 896, 897, 0, 0,
	428, 429, 944, 430, 945, 828, 431, 432, 433, 0,
	434, 435, 0, 811, 436, 437, 438, 439, 441, 911,
	442, 0, 859, 443, 444, 445, 493, 891, 938, 0,
	447, 446, 496, 0, 0, 0, 0, 448, 449, 497,
	450, 451, 452, 808, 0, 0, 0, 0, 0, 0,
	0, 806, 0, 0, 0, 0, 804, 805, 0, 0,
	0, 0, 0, 0, 0, 834, 1470, 0, 0, 0,
	2053, 832, 864, 821, 822, 823, 819, 820, 833, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	913, 838, 0, 0, 0, 219, 220, 221, 454, 879,
	858, 890, 848, 889, 888, 0, 225, 850, 849, 228,
	229, 230, 840, 912, 231, 948, 949, 460, 0, 232,
	919, 0, 902, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 922, 246, 247, 905, 903, 904, 909, 907, 906,
	908, 248, 249, 250, 251, 893, 253, 886, 885, 810,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 884,
	260, 0, 261, 0, 262, 263, 0, 816, 264, 265,
	267, 270, 266, 271, 272, 273, 939, 940, 829, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 883, 881,
	882, 0, 279, 0, 280, 0, 0, 923, 281, 282,
	0, 283, 946, 0, 839, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 914, 915, 918, 925, 0, 916,
	860, 0, 0, 0, 211, 292, 294, 301, 0, 924,
	295, 872, 863, 874, 876, 877, 878, 873, 0, 865,
	0, 302, 926, 927, 303, 304, 305, 928, 898, 899,
	0, 0, 308, 309, 310, 311, 0, 313, 312, 0,
	314, 947, 929, 315, 316, 930, 0, 317, 318, 0,
	0, 319, 0, 320, 321, 324, 322, 323, 325, 327,
	852, 326, 931, 329, 330, 332, 331, 807, 212, 932,
	830, 917, 887, 333, 334, 0, 861, 336, 862, 0,
	0, 339, 340, 0, 0, 341, 480, 933, 342, 934,
	941, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 942, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 880, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 935, 376, 377, 378, 379, 817,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 853, 854, 856, 857, 393, 397, 400,
	401, 910, 402, 382, 383, 403, 936, 404, 875, 855,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 921,
	411, 412, 413, 943, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 268, 425, 269, 851, 0, 894,
	895, 896, 897, 0, 0, 428, 429, 944, 430, 945,
	828, 431, 432, 433, 0, 434, 435, 0, 811, 436,
	437, 438, 439, 441, 911, 442, 0, 859, 443, 444,
	445, 493, 891, 938, 0, 447, 446, 496, 0, 0,
	0, 0, 448, 449, 497, 450, 451, 452, 808, 0,
	0, 0, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 804, 805, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 0, 0, 0, 2051, 832, 864, 821, 822,
	823, 819, 820, 833, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 913, 838, 0, 0, 0,
	219, 220, 221, 454, 879, 858, 890, 848, 889, 888,
	0, 225, 850, 849, 228, 229, 230, 840, 912, 231,
	948, 949, 460, 0, 232, 919, 0, 902, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 922, 246, 247, 905,
	903, 904, 909, 907, 906, 908, 248, 249, 250, 251,
	893, 253, 886, 885, 810, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 884, 260, 0, 261, 0, 262,
	263, 0, 816, 264, 265, 267, 270, 266, 271, 272,
	273, 939, 940, 829, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 883, 881, 882, 0, 279, 0, 280,
	0, 0, 923, 281, 282, 0, 283, 946, 0, 839,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 914,
	915, 918, 925, 0, 916, 860, 0, 0, 0, 211,
	292, 294, 301, 0, 924, 295, 872, 863, 874, 876,
	877, 878, 873, 0, 865, 0, 302, 926, 927, 303,
	304, 305, 928, 898, 899, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 947, 929, 315, 316,
	930, 0, 317, 318, 0, 0, 319, 0, 320, 321,
	324, 322, 323, 325, 327, 852, 326, 931, 329, 330,
	332, 331, 807, 212, 932, 830, 917, 887, 333, 334,
	0, 861, 336, 862, 0, 0, 339, 340, 0, 0,
	341, 480, 933, 342, 934, 941, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 942, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 880,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 935,
	376, 377, 378, 379, 817, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 398, 399, 853, 854,
	856, 857, 393, 397, 400, 401, 910, 402, 382, 383,
	403, 936, 404, 875, 855, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 921, 411, 412, 413, 943, 0,
	418, 419, 417, 0, 420, 421, 422, 423, 424, 268,
	425, 269, 851, 0, 894, 895, 896, 897, 0, 0,
	428, 429, 944, 430, 945, 828, 431, 432, 433, 0,
	434, 435, 0, 811, 436, 437, 438, 439, 441, 911,
	442, 0, 859, 443, 444, 445, 493, 891, 938, 0,
	447, 446, 496, 0, 0, 0, 0, 448, 449, 497,
	450, 451, 452, 808, 0, 0, 0, 0, 0, 0,
	0, 806, 0, 0, 0, 0, 804, 805, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 0, 0, 0,
	2039, 832, 864, 821, 822, 823, 819, 820, 833, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	913, 838, 0, 0, 0, 219, 220, 221, 454, 879,
	858, 890, 848, 889, 888, 0, 225, 850, 849, 228,
	229, 230, 840, 912, 231, 948, 949, 460, 0, 232,
	919, 0, 902, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 922, 246, 247, 905, 903, 904, 909, 907, 906,
	908, 248, 249, 250, 251, 893, 253, 886, 885, 810,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 884,
	260, 0, 261, 0, 262, 263, 0, 816, 264, 265,
	267, 270, 266, 271, 272, 273, 939, 940, 829, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 883, 881,
	882, 0, 279, 0, 280, 0, 0, 923, 281, 282,
	0, 283, 946, 0, 839, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 914, 915, 918, 925, 0, 916,
	860, 0, 0, 0, 211, 292, 294, 301, 0, 924,
	295, 872, 863, 874, 876, 877, 878, 873, 0, 865,
	0, 302, 926, 927, 303, 304, 305, 928, 898, 899,
	0, 0, 308, 309, 310, 311, 0, 313, 312, 0,
	314, 947, 929, 315, 316, 930, 0, 317, 318, 0,
	0, 319, 0, 320, 321, 324, 322, 323, 325, 327,
	852, 326, 931, 329, 330, 332, 331, 807, 212, 932,
	830, 917, 887, 333, 334, 0, 861, 336, 862, 0,
	0, 339, 340, 0, 0, 341, 480, 933, 342, 934,
	941, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 942, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 880, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 935, 376, 377, 378, 379, 817,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 853, 854, 856, 857, 393, 397, 400,
	401, 910, 402, 382, 383, 403, 936, 404, 875, 855,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 921,
	411, 412, 413, 943, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 268, 425, 269, 851, 0, 894,
	895, 896, 897, 0, 0, 428, 429, 944, 430, 945,
	828, 431, 432, 433, 0, 434, 435, 0, 811, 436,
	437, 438, 439, 441, 911, 442, 0, 859, 443, 444,
	445, 493, 891, 938, 0, 447, 446, 496, 0, 0,
	0, 0, 448, 449, 497, 450, 451, 452, 808, 0,
	0, 0, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 804, 805, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 0, 0, 0, 2028, 832, 864, 821, 822,
	823, 819, 820, 833, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 913, 838, 0, 0, 0,
	219, 220, 221, 454, 879, 858, 890, 848, 889, 888,
	0, 225, 850, 849, 228, 229, 230, 840, 912, 231,
	948, 949, 460, 0, 232, 919, 0, 902, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 922, 246, 247, 905,
	903, 904, 909, 907, 906, 908, 248, 249, 250, 251,
	893, 253, 886, 885, 810, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 884, 260, 0, 261, 0, 262,
	263, 0, 816, 264, 265, 267, 270, 266, 271, 272,
	273, 939, 940, 829, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 883, 881, 882, 0, 279, 0, 280,
	0, 0, 923, 281, 282, 0, 283, 946, 0, 839,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 914,
	915, 918, 925, 0, 916, 860, 0, 0, 0, 211,
	292, 294, 301, 0, 924, 295, 872, 863, 874, 876,
	877, 878, 873, 0, 865, 0, 302, 926, 927, 303,
	304, 305, 928, 898, 899, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 947, 929, 315, 316,
	930, 0, 317, 318, 0, 0, 319, 0, 320, 321,
	324, 322, 323, 325, 327, 852, 326, 931, 329, 330,
	332, 331, 807, 212, 932, 830, 917, 887, 333, 334,
	0, 861, 336, 862, 0, 0, 339, 340, 0, 0,
	341, 480, 933, 342, 934, 941, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 942, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 880,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 935,
	376, 377, 378, 379, 817, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 398, 399, 853, 854,
	856, 857, 393, 397, 400, 401, 910, 402, 382, 383,
	403, 936, 404, 875, 855, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 921, 411, 412, 413, 943, 0,
	418, 419, 417, 0, 420, 421, 422, 423, 424, 268,
	425, 269, 851, 0, 894, 895, 896, 897, 0, 0,
	428, 429, 944, 430, 945, 828, 431, 432, 433, 0,
	434, 435, 0, 811, 436, 437, 438, 439, 441, 911,
	442, 0, 859, 443, 444, 445, 493, 891, 938, 0,
	447, 446, 496, 0, 0, 0, 0, 448, 449, 497,
	450, 451, 452, 808, 0, 0, 0, 0, 0, 0,
	0, 806, 0, 0, 0, 0, 804, 805, 0, 0,
	0, 0, 0, 0, 0, 834, 0, 0, 0, 0,
	2026, 832, 2018, 821, 822, 823, 819, 820, 833, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	913, 838, 0, 0, 0, 219, 220, 221, 454, 879,
	858, 890, 848, 889, 888, 0, 225, 850, 849, 228,
	229, 230, 840, 912, 231, 948, 949, 460, 0, 232,
	919, 0, 902, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 922, 246, 247, 905, 903, 904, 909, 907, 906,
	908, 248, 249, 250, 251, 893, 2021, 886, 885, 810,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 884,
	260, 0, 261, 0, 262, 263, 0, 816, 264, 265,
	267, 270, 266, 271, 272, 273, 939, 940, 829, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 883, 881,
	882, 0, 279, 0, 280, 0, 0, 923, 281, 282,
	0, 283, 946, 0, 839, 284, 0, 285, 286, 2022,
	288, 289, 290, 291, 914, 915, 918, 925, 0, 916,
	860, 0, 0, 0, 211, 292, 294, 301, 0, 924,
	295, 872, 863, 874, 876, 877, 878, 873, 0, 865,
	0, 302, 926, 927, 303, 304, 305, 928, 898, 899,
	0, 0, 308, 309, 310, 311, 0, 313, 312, 0,
	314, 947, 929, 315, 316, 930, 0, 317, 318, 0,
	0, 319, 0, 320, 321, 324, 322, 2023, 2020, 327,
	852, 326, 931, 329, 330, 332, 331, 807, 212, 932,
	830, 917, 887, 333, 334, 0, 861, 336, 862, 0,
	0, 339, 340, 0, 0, 341, 480, 933, 342, 934,
	941, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 942, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 880, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 935, 376, 377, 378, 379, 817,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 2024,
	0, 398, 399, 853, 854, 856, 857, 393, 397, 400,
	401, 910, 402, 382, 383, 403, 936, 404, 875, 855,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 921,
	411, 412, 413, 943, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 268, 425, 269, 851, 0, 894,
	895, 896, 897, 0, 0, 428, 429, 944, 430, 945,
	828, 431, 432, 433, 0, 434, 435, 0, 811, 436,
	437, 438, 439, 441, 911, 442, 0, 859, 443, 444,
	445, 493, 891, 938, 0, 447, 446, 496, 0, 0,
	0, 0, 448, 449, 497, 450, 2019, 452, 808, 0,
	0, 0, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 804, 805, 0, 0, 0, 0, 0, 0, 0,
	834, 0, 0, 0, 0, 2015, 832, 2018, 821, 822,
	823, 819, 820, 833, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 913, 838, 0, 0, 0,
	219, 220, 221, 454, 879, 858, 890, 848, 889, 888,
	0, 225, 850, 849, 228, 229, 230, 840, 912, 231,
	948, 949, 460, 0, 232, 919, 0, 902, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 922, 246, 247, 905,
	903, 904, 909, 907, 906, 908, 248, 249, 250, 251,
	893, 2021, 886, 885, 810, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 884, 260, 0, 261, 0, 262,
	263, 0, 816, 264, 265, 267, 270, 266, 271, 272,
	273, 939, 940, 829, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 883, 881, 882, 0, 279, 0, 280,
	0, 0, 923, 281, 282, 0, 283, 946, 0, 839,
	284, 0, 285, 286, 2022, 288, 289, 290, 291, 914,
	915, 918, 925, 0, 916, 860, 0, 0, 0, 211,
	292, 294, 301, 0, 924, 295, 872, 863, 874, 876,
	877, 878, 873, 0, 865, 0, 302, 926, 927, 303,
	304, 305, 928, 898, 899, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 947, 929, 315, 316,
	930, 0, 317, 318, 0, 0, 319, 0, 320, 321,
	324, 322, 2023, 2020, 327, 852, 326, 931, 329, 330,
	332, 331, 807, 212, 932, 830, 917, 887, 333, 334,
	0, 861, 336, 862, 0, 0, 339, 340, 0, 0,
	341, 480, 933, 342, 934, 941, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 942, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 880,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 935,
	376, 377, 378, 379, 817, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 2024, 0, 398, 399, 853, 854,
	856, 857, 393, 397, 400, 401, 910, 402, 382, 383,
	403, 936, 404, 875, 855, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 921, 411, 412, 413, 943, 0,
	418, 419, 417, 0, 420, 421, 422, 423, 424, 268,
	425, 269, 851, 0, 894, 895, 896, 897, 0, 0,
	428, 429, 944, 430, 945, 828, 431, 432, 433, 0,
	434, 435, 0, 811, 436, 437, 438, 439, 441, 911,
	442, 0, 859, 443, 444, 445, 493, 891, 938, 0,
	447, 446, 496, 0, 0, 0, 0, 448, 449, 497,
	450, 2019, 452, 808, 0, 0, 0, 0, 0, 0,
	0, 806, 0, 0, 0, 0, 804, 805, 864, 821,
	822, 823, 819, 820, 833, 834, 0, 0, 0, 0,
	0, 832, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 913, 838, 0, 0,
	0, 219, 220, 221, 454, 879, 858, 890, 848, 889,
	888, 0, 225, 850, 849, 228, 229, 230, 840, 912,
	231, 948, 949, 460, 0, 232, 919, 0, 902, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 922, 246, 247,
	905, 903, 904, 909, 907, 906, 908, 248, 249, 250,
	251, 893, 253, 886, 885, 810, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 884, 260, 0, 261, 0,
	262, 263, 0, 816, 264, 265, 267, 270, 266, 271,
	272, 273, 939, 940, 829, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 883, 881, 882, 0, 279, 0,
	280, 0, 0, 923, 281, 282, 0, 283, 946, 0,
	839, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	914, 915, 918, 925, 0, 916, 860, 0, 0, 0,
	211, 292, 294, 301, 0, 924, 295, 872, 863, 874,
	876, 877, 878, 873, 0, 865, 0, 302, 926, 927,
	303, 304, 305, 928, 898, 899, 0, 0, 308, 309,
	310, 311, 0, 313, 312, 0, 314, 947, 929, 315,
	316, 930, 0, 317, 318, 0, 0, 319, 0, 320,
	321, 324, 322, 323, 325, 327, 852, 326, 931, 329,
	330, 332, 331, 807, 212, 932, 830, 917, 887, 333,
	334, 0, 861, 336, 862, 0, 0, 339, 340, 0,
	0, 341, 480, 933, 342, 934, 941, 343, 338, 344,
	345, 346, 347, 348, 349, 0, 350, 942, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 357, 358, 359,
	880, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	935, 376, 377, 378, 379, 817, 380, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 0, 398, 399, 853,
	854, 856, 857, 393, 397, 400, 401, 910, 402, 382,
	383, 403, 936, 404, 875, 855, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 921, 411, 412, 413, 943,
	0, 418, 419, 417, 0, 420, 421, 422, 423, 424,
	268, 425, 269, 851, 0, 894, 895, 896, 897, 0,
	0, 428, 429, 944, 430, 945, 828, 431, 432, 433,
	0, 434, 435, 0, 811, 436, 437, 438, 439, 441,
	911, 442, 0, 859, 443, 444, 445, 493, 891, 938,
	0, 447, 446, 496, 0, 0, 0, 0, 448, 449,
	497, 450, 451, 452, 808, 0, 0, 0, 0, 0,
	0, 0, 806, 0, 0, 0, 0, 804, 805, 0,
	0, 0, 0, 0, 1478, 0, 834, 0, 0, 0,
	0, 0, 832, 864, 821, 822, 823, 819, 820, 833,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 1862, 218, 0, 0, 0,
	0, 913, 838, 0, 0, 0, 219, 220, 221, 454,
	879, 858, 890, 848, 889, 888, 0, 225, 850, 849,
	228, 229, 230, 840, 912, 231, 948, 949, 460, 0,
	232, 919, 0, 902, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 922, 246, 247, 905, 903, 904, 909, 907,
	906, 908, 248, 249, 250, 251, 893, 253, 886, 885,
	810, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	884, 260, 0, 261, 0, 262, 263, 0, 816, 264,
	265, 267, 270, 266, 271, 272, 273, 939, 940, 829,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 883,
	881, 882, 0, 279, 0, 280, 0, 0, 923, 281,
	282, 0, 283, 946, 0, 839, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 914, 915, 918, 925, 0,
	916, 860, 0, 0, 0, 211, 292, 294, 301, 0,
	924, 295, 872, 863, 874, 876, 877, 878, 873, 0,
	865, 0, 302, 926, 927, 303, 304, 305, 928, 898,
	899, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 947, 929, 315, 316, 930, 0, 317, 318,
	0, 0, 319, 0, 320, 321, 324, 322, 323, 325,
	327, 852, 326, 931, 329, 330, 332, 331, 807, 212,
	932, 830, 917, 887, 333, 334, 0, 861, 336, 862,
	0, 0, 339, 340, 0, 0, 341, 480, 933, 342,
	934, 941, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 942, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 880, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 935, 376, 377, 378, 379,
	817, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 853, 854, 856, 857, 393, 397,
	400, 401, 910, 402, 382, 383, 403, 936, 404, 875,
	855, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	921, 411, 412, 413, 943, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 268, 425, 269, 851, 0,
	894, 895, 896, 897, 0, 0, 428, 429, 944, 430,
	945, 828, 431, 432, 433, 0, 434, 435, 0, 811,
	436, 437, 438, 439, 441, 911, 442, 0, 859, 443,
	444, 445, 493, 891, 938, 0, 447, 446, 496, 0,
	0, 0, 0, 448, 449, 497, 450, 451, 452, 808,
	0, 0, 0, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 804, 805, 0, 0, 0, 0, 0, 0,
	0, 834, 0, 0, 0, 0, 1175, 832, 864, 821,
	822, 823, 819, 820, 833, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 913, 838, 0, 0,
	0, 219, 220, 221, 454, 879, 858, 890, 848, 889,
	888, 0, 225, 850, 849, 228, 229, 230, 840, 912,
	231, 948, 949, 460, 0, 232, 919, 0, 902, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 922, 246, 247,
	905, 903, 904, 909, 907, 906, 908, 248, 249, 250,
	251, 893, 253, 886, 885, 810, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 884, 260, 0, 261, 0,
	262, 263, 0, 816, 264, 265, 267, 270, 266, 271,
	272, 273, 939, 940, 829, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 883, 881, 882, 0, 279, 0,
	280, 0, 0, 923, 281, 282, 0, 283, 946, 0,
	839, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	1174, 915, 918, 925, 0, 916, 860, 0, 0, 0,
	211, 292, 294, 301, 0, 924, 295, 872, 863, 874,
	876, 877, 878, 873, 0, 865, 0, 302, 926, 927,
	303, 304, 305, 928, 898, 899, 0, 0, 308, 309,
	310, 311, 0, 313, 312, 0, 314, 947, 929, 315,
	316, 930, 0, 317, 318, 0, 0, 319, 0, 320,
	321, 324, 322, 323, 325, 327, 852, 326, 931, 329,
	330, 332, 331, 807, 212, 932, 830, 917, 887, 333,
	334, 0, 861, 336, 862, 0, 0, 339, 340, 0,
	0, 341, 480, 933, 342, 934, 941, 343, 338, 344,
	345, 346, 347, 348, 349, 0, 350, 942, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 357, 358, 359,
	880, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	935, 376, 377, 378, 379, 817, 380, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 0, 398, 399, 853,
	854, 856, 857, 393, 397, 400, 401, 910, 402, 382,
	383, 403, 936, 404, 875, 855, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 921, 411, 412, 413, 943,
	0, 418, 419, 417, 0, 420, 421, 422, 423, 424,
	268, 425, 269, 851, 0, 894, 895, 896, 897, 0,
	0, 428, 429, 944, 430, 945, 828, 431, 432, 433,
	0, 434, 435, 0, 811, 436, 437, 438, 439, 441,
	911, 442, 0, 859, 443, 444, 445, 493, 891, 938,
	0, 447, 446, 496, 0, 0, 0, 0, 448, 449,
	497, 450, 451, 452, 808, 0, 0, 0, 0, 0,
	0, 0, 806, 0, 0, 0, 0, 804, 805, 0,
	0, 0, 0, 0, 0, 0, 834, 0, 0, 0,
	0, 1169, 832, 864, 821, 822, 823, 819, 820, 833,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 913, 838, 0, 0, 0, 219, 220, 221, 454,
	879, 858, 890, 848, 889, 888, 0, 225, 850, 849,
	228, 229, 230, 840, 912, 231, 948, 949, 460, 0,
	232, 919, 0, 902, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 922, 246, 247, 905, 903, 904, 909, 907,
	906, 908, 248, 249, 250, 251, 893, 253, 886, 885,
	810, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	884, 260, 0, 261, 0, 262, 263, 0, 816, 264,
	265, 267, 270, 266, 271, 272, 273, 939, 940, 829,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 883,
	881, 882, 0, 279, 0, 280, 0, 0, 923, 281,
	282, 0, 283, 946, 0, 839, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 1168, 915, 918, 925, 0,
	916, 860, 0, 0, 0, 211, 292, 294, 301, 0,
	924, 295, 872, 863, 874, 876, 877, 878, 873, 0,
	865, 0, 302, 926, 927, 303, 304, 305, 928, 898,
	899, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 947, 929, 315, 316, 930, 0, 317, 318,
	0, 0, 319, 0, 320, 321, 324, 322, 323, 325,
	327, 852, 326, 931, 329, 330, 332, 331, 807, 212,
	932, 830, 917, 887, 333, 334, 0, 861, 336, 862,
	0, 0, 339, 340, 0, 0, 341, 480, 933, 342,
	934, 941, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 942, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 880, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 935, 376, 377, 378, 379,
	817, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 853, 854, 856, 857, 393, 397,
	400, 401, 910, 402, 382, 383, 403, 936, 404, 875,
	855, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	921, 411, 412, 413, 943, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 268, 425, 269, 851, 0,
	894, 895, 896, 897, 0, 0, 428, 429, 944, 430,
	945, 828, 431, 432, 433, 0, 434, 435, 0, 811,
	436, 437, 438, 439, 441, 911, 442, 0, 859, 443,
	444, 445, 493, 891, 938, 0, 447, 446, 496, 0,
	0, 0, 0, 448, 449, 497, 450, 451, 452, 808,
	0, 0, 0, 0, 0, 0, 0, 806, 0, 0,
	0, 0, 804, 805, 0, 0, 0, 0, 0, 0,
	0, 834, 0, 0, 0, 0, 1164, 832, 864, 821,
	822, 823, 819, 820, 833, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 913, 838, 0, 0,
	0, 219, 220, 221, 454, 879, 858, 890, 848, 889,
	888, 0, 225, 850, 849, 228, 229, 230, 840, 912,
	231, 948, 949, 460, 0, 232, 919, 0, 902, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 922, 246, 247,
	905, 903, 904, 909, 907, 906, 908, 248, 249, 250,
	251, 893, 253, 886, 885, 810, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 884, 260, 0, 261, 0,
	262, 263, 0, 816, 264, 265, 267, 270, 266, 271,
	272, 273, 939, 940, 829, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 883, 881, 882, 0, 279, 0,
	280, 0, 0, 923, 281, 282, 0, 283, 946, 0,
	839, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	914, 915, 918, 925, 0, 916, 860, 0, 0, 0,
	211, 292, 294, 301, 0, 924, 295, 872, 863, 874,
	876, 877, 878, 873, 0, 865, 0, 302, 926, 927,
	303, 304, 305, 928, 898, 899, 0, 0, 308, 309,
	310, 311, 0, 313, 312, 0, 314, 947, 929, 315,
	316, 930, 0, 317, 318, 0, 0, 319, 0, 320,
	321, 324, 322, 323, 325, 327, 852, 326, 931, 329,
	330, 332, 331, 807, 212, 932, 830, 917, 887, 333,
	334, 0, 861, 336, 862, 0, 0, 339, 340, 0,
	0, 341, 480, 933, 342, 934, 941, 343, 338, 344,
	345, 346, 347, 348, 349, 0, 350, 942, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 357, 358, 359,
	880, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	935, 376, 377, 378, 379, 817, 380, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 0, 398, 399, 853,
	854, 856, 857, 393, 397, 400, 401, 910, 402, 382,
	383, 403, 936, 404, 875, 855, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 921, 411, 412, 413, 943,
	0, 418, 419, 417, 0, 420, 421, 422, 423, 424,
	268, 425, 269, 851, 0, 894, 895, 896, 897, 0,
	0, 428, 429, 944, 430, 945, 828, 431, 432, 433,
	0, 434, 435, 0, 811, 436, 437, 438, 439, 441,
	911, 442, 0, 859, 443, 444, 445, 493, 891, 938,
	0, 447, 446, 496, 0, 0, 0, 0, 448, 449,
	497, 450, 451, 452, 808, 0, 0, 0, 0, 0,
	0, 0, 806, 0, 0, 0, 0, 804, 805, 864,
	821, 822, 823, 819, 820, 833, 834, 0, 0, 0,
	0, 0, 832, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 913, 838, 0,
	0, 0, 219, 220, 221, 454, 879, 858, 890, 848,
	889, 888, 0, 225, 850, 849, 228, 229, 230, 840,
	912, 231, 948, 949, 460, 0, 232, 919, 0, 902,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 922, 246,
	247, 905, 903, 904, 909, 907, 906, 908, 248, 249,
	250, 251, 893, 253, 886, 885, 810, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 884, 260, 0, 261,
	0, 262, 263, 0, 816, 264, 265, 267, 270, 266,
	271, 272, 273, 939, 940, 829, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 883, 881, 882, 0, 279,
	0, 280, 0, 0, 923, 281, 282, 0, 283, 946,
	0, 839, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 914, 915, 918, 925, 0, 916, 860, 0, 0,
	0, 211, 292, 294, 301, 0, 924, 295, 872, 863,
	874, 876, 877, 878, 873, 0, 865, 0, 302, 926,
	927, 303, 304, 305, 928, 898, 899, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 947, 929,
	315, 316, 930, 0, 317, 318, 0, 0, 319, 0,
	320, 321, 324, 322, 323, 325, 327, 852, 326, 931,
	329, 330, 332, 331, 807, 212, 932, 830, 917, 887,
	333, 334, 0, 861, 336, 862, 0, 0, 339, 340,
	0, 0, 341, 480, 933, 342, 934, 941, 343, 338,
	344, 345, 346, 347, 348, 349, 0, 350, 942, 351,
	483, 352, 0, 353, 0, 354, 355, 356, 357, 358,
	359, 880, 360, 361, 0, 362, 363, 364, 365, 366,
	0, 368, 369, 370, 367, 371, 372, 373, 374, 0,
	375, 935, 376, 377, 378, 379, 817, 380, 0, 381,
	385, 386, 387, 388, 389, 390, 391, 0, 398, 399,
	853, 854, 856, 857, 393, 397, 400, 401, 910, 402,
	382, 383, 403, 936, 404, 875, 855, 406, 0, 416,
	407, 408, 409, 384, 410, 414, 921, 411, 412, 413,
	943, 0, 418, 419, 417, 0, 420, 421, 422, 423,
	424, 268, 425, 269, 851, 0, 894, 895, 896, 897,
	0, 0, 428, 429, 944, 430, 945, 828, 431, 432,
	433, 0, 434, 435, 0, 811, 436, 437, 438, 439,
	441, 911, 442, 0, 859, 443, 444, 445, 493, 891,
	938, 0, 447, 446, 496, 0, 0, 0, 0, 448,
	449, 497, 450, 451, 452, 808, 0, 0, 0, 0,
	0, 0, 0, 806, 0, 0, 0, 0, 804, 805,
	864, 821, 822, 823, 819, 820, 833, 834, 0, 0,
	0, 0, 0, 832, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 913, 838,
	0, 0, 0, 219, 220, 221, 454, 879, 858, 890,
	848, 889, 888, 0, 225, 850, 849, 228, 229, 230,
	840, 912, 231, 948, 949, 460, 0, 232, 919, 0,
	902, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 922,
	246, 3258, 905, 903, 904, 909, 907, 906, 908, 248,
	249, 250, 251, 893, 253, 886, 885, 810, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 884, 260, 0,
	261, 0, 262, 263, 0, 816, 264, 265, 267, 270,
	266, 271, 272, 273, 939, 940, 829, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 883, 881, 882, 0,
	279, 0, 280, 0, 0, 923, 281, 282, 0, 283,
	946, 0, 839, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 914, 915, 918, 925, 0, 916, 860, 0,
	0, 0, 211, 292, 294, 301, 0, 924, 295, 872,
	863, 874, 876, 877, 878, 873, 0, 865, 0, 302,
	926, 927, 303, 304, 305, 928, 898, 899, 0, 0,
	308, 309, 310, 311, 0, 313, 312, 0, 314, 947,
	929, 315, 316, 930, 0, 317, 318, 0, 0, 319,
	0, 320, 321, 324, 322, 323, 325, 327, 852, 326,
	931, 329, 330, 332, 331, 807, 212, 932, 830, 917,
	887, 333, 334, 0, 861, 336, 862, 0, 0, 339,
	340, 0, 0, 341, 480, 933, 342, 934, 941, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 942,
	351, 483, 352, 0, 353, 0, 354, 355, 356, 357,
	358, 359, 880, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 935, 376, 377, 378, 379, 817, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 0, 398,
	399, 853, 854, 856, 857, 393, 397, 400, 401, 910,
	402, 382, 383, 403, 936, 404, 875, 855, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 921, 411, 412,
	413, 943, 0, 418, 419, 417, 0, 420, 421, 422,
	423, 424, 268, 425, 269, 851, 0, 894, 895, 896,
	897, 0, 0, 428, 429, 944, 430, 945, 828, 431,
	432, 433, 0, 3257, 435, 0, 811, 436, 437, 438,
	439, 441, 911, 442, 0, 859, 443, 444, 445, 493,
	891, 938, 0, 447, 446, 496, 0, 0, 0, 0,
	448, 449, 497, 450, 451, 452, 808, 0, 0, 0,
	0, 0, 0, 0, 806, 0, 0, 0, 0, 804,
	805, 864, 821, 822, 823, 819, 820, 833, 834, 0,
	0, 0, 0, 0, 832, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 913,
	838, 0, 0, 0, 219, 220, 221, 3256, 879, 858,
	890, 848, 889, 888, 0, 225, 850, 849, 228, 229,
	230, 840, 912, 231, 948, 949, 460, 0, 232, 919,
	0, 902, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	922, 246, 3258, 905, 903, 904, 909, 907, 906, 908,
	248, 249, 250, 251, 893, 253, 886, 885, 810, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 884, 260,
	0, 261, 0, 262, 263, 0, 816, 264, 265, 267,
	270, 266, 271, 272, 273, 939, 940, 829, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 883, 881, 882,
	0, 279, 0, 280, 0, 0, 923, 281, 282, 0,
	283, 946, 0, 839, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 914, 915, 918, 925, 0, 916, 860,
	0, 0, 0, 211, 292, 294, 301, 0, 924, 295,
	872, 863, 874, 876, 877, 878, 873, 0, 865, 0,
	302, 926, 927, 303, 304, 305, 928, 898, 899, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	947, 929, 315, 316, 930, 0, 317, 318, 0, 0,
	319, 0, 320, 321, 324, 322, 323, 325, 327, 852,
	326, 931, 329, 330, 332, 331, 807, 212, 932, 830,
	917, 887, 333, 334, 0, 861, 336, 862, 0, 0,
	339, 340, 0, 0, 341, 480, 933, 342, 934, 941,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	942, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 880, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 935, 376, 377, 378, 379, 817, 380,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 0,
	398, 399, 853, 854, 856, 857, 393, 397, 400, 401,
	910, 402, 382, 383, 403, 936, 404, 875, 855, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 921, 411,
	412, 413, 943, 0, 418, 419, 417, 0, 420, 421,
	422, 423, 424, 268, 425, 269, 851, 0, 894, 895,
	896, 897, 0, 0, 428, 429, 944, 430, 945, 828,
	431, 432, 433, 0, 3257, 435, 0, 811, 436, 437,
	438, 439, 441, 911, 442, 0, 859, 443, 444, 445,
	493, 891, 938, 0, 447, 446, 496, 0, 0, 0,
	0, 448, 449, 497, 450, 451, 452, 808, 0, 0,
	0, 0, 0, 0, 0, 806, 0, 0, 0, 0,
	804, 805, 864, 821, 822, 823, 819, 820, 833, 834,
	0, 0, 0, 0, 0, 832, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	913, 838, 0, 0, 0, 219, 220, 221, 454, 879,
	858, 890, 848, 889, 888, 0, 225, 850, 849, 228,
	229, 230, 840, 912, 231, 948, 949, 460, 0, 232,
	919, 0, 902, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 922, 246, 247, 905, 903, 904, 909, 907, 906,
	908, 248, 249, 250, 251, 893, 253, 886, 885, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 884,
	260, 0, 261, 0, 262, 263, 0, 816, 264, 265,
	267, 270, 266, 271, 272, 273, 939, 940, 829, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 883, 881,
	882, 0, 279, 0, 280, 0, 0, 923, 281, 282,
	0, 283, 946, 0, 839, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 914, 915, 918, 925, 0, 916,
	860, 0, 0, 0, 211, 292, 294, 301, 0, 924,
	295, 872, 863, 874, 876, 877, 878, 873, 0, 865,
	0, 302, 926, 927, 303, 304, 305, 928, 898, 899,
	0, 0, 308, 309, 310, 311, 0, 313, 312, 0,
	314, 947, 929, 315, 316, 930, 0, 317, 318, 0,
	0, 319, 0, 320, 321, 324, 322, 323, 325, 327,
	852, 326, 931, 329, 330, 332, 331, 0, 212, 932,
	830, 917, 887, 333, 334, 0, 861, 336, 862, 0,
	0, 339, 340, 0, 0, 341, 480, 933, 342, 934,
	941, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 942, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 880, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 935, 376, 377, 378, 379, 817,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 853, 854, 856, 857, 393, 397, 400,
	401, 910, 402, 382, 383, 403, 936, 404, 875, 855,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 921,
	411, 412, 413, 943, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 268, 425, 269, 851, 0, 894,
	895, 896, 897, 0, 0, 428, 429, 944, 430, 945,
	828, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 911, 442, 0, 859, 443, 444,
	445, 493, 891, 938, 0, 447, 446, 496, 0, 0,
	0, 0, 448, 449, 497, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 0, 2036, 0, 0, 0,
	0, 2034, 2035, 864, 821, 822, 823, 819, 820, 833,
	834, 0, 0, 0, 0, 0, 832, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 913, 838, 0, 0, 0, 219, 220, 221, 0,
	879, 858, 890, 848, 889, 888, 0, 225, 850, 849,
	228, 229, 230, 840, 912, 231, 948, 949, 460, 0,
	232, 919, 0, 902, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 922, 246, 3258, 905, 903, 904, 909, 907,
	906, 908, 248, 249, 250, 251, 893, 253, 886, 885,
	810, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	884, 260, 0, 261, 0, 262, 263, 0, 816, 264,
	265, 267, 270, 266, 271, 272, 273, 939, 940, 829,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 883,
	881, 882, 0, 279, 0, 280, 0, 0, 923, 281,
	282, 0, 283, 946, 0, 839, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 914, 915, 918, 0, 0,
	916, 860, 0, 0, 0, 211, 292, 294, 301, 0,
	924, 295, 872, 863, 874, 876, 877, 878, 873, 0,
	865, 0, 302, 0, 0, 303, 304, 305, 928, 898,
	899, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 947, 929, 315, 316, 0, 0, 317, 318,
	0, 0, 319, 0, 320, 321, 324, 322, 323, 325,
	327, 852, 326, 931, 329, 330, 332, 331, 807, 212,
	0, 830, 917, 887, 333, 334, 0, 861, 336, 862,
	0, 0, 339, 340, 0, 0, 341, 480, 933, 342,
	934, 941, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 942, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 880, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 935, 376, 377, 378, 379,
	817, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 853, 854, 856, 857, 393, 397,
	400, 401, 910, 402, 382, 383, 403, 0, 404, 875,
	855, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	921, 411, 412, 413, 943, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 268, 425, 269, 851, 0,
	894, 895, 896, 897, 0, 0, 428, 429, 944, 430,
	945, 828, 431, 432, 433, 0, 3257, 435, 0, 811,
	436, 437, 438, 439, 441, 911, 442, 0, 859, 443,
	444, 445, 493, 891, 938, 0, 447, 446, 496, 0,
	0, 0, 0, 448, 449, 497, 450, 451, 452, 0,
	0, 0, 0, 797, 0, 985, 0, 0, 0, 0,
	0, 0, 804, 805, 0, 0, 0, 0, 0, 0,
	0, 834, 213, 214, 215, 216, 217, 832, 218, 0,
	0, 0, 0, 913, 0, 0, 0, 0, 219, 220,
	221, 454, 455, 222, 456, 223, 224, 457, 0, 225,
	226, 227, 228, 229, 230, 0, 912, 231, 458, 459,
	460, 0, 232, 919, 0, 902, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 922, 246, 247, 905, 903, 904,
	909, 907, 906, 908, 248, 249, 250, 251, 252, 253,
	462, 463, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	464, 264, 265, 267, 270, 266, 271, 272, 273, 939,
	940, 0, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 467, 277, 278, 0, 279, 0, 280, 0, 0,
	923, 281, 282, 0, 283, 946, 0, 469, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 914, 915, 918,
	925, 0, 916, 293, 0, 0, 0, 211, 292, 294,
	301, 0, 924, 295, 473, 297, 296, 298, 299, 300,
	474, 0, 475, 0, 302, 926, 927, 303, 304, 305,
	928, 306, 307, 0, 0, 308, 309, 310, 311, 972,
	313, 312, 0, 314, 947, 929, 315, 316, 930, 0,
	317, 318, 0, 0, 319, 0, 320, 321, 324, 322,
	323, 325, 327, 328, 326, 931, 329, 330, 332, 331,
	0, 212, 932, 0, 917, 479, 333, 334, 0, 335,
	336, 337, 0, 977, 339, 340, 0, 0, 341, 480,
	933, 342, 934, 941, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 942, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 484, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 935, 376, 377,
	378, 379, 485, 979, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 176, 398, 399, 392, 394, 395, 396,
	393, 397, 400, 401, 910, 402, 382, 383, 403, 936,
	404, 486, 405, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 415, 411, 412, 413, 943, 0, 418, 419,
	417, 178, 420, 421, 422, 423, 424, 268, 425, 269,
	426, 0, 488, 489, 490, 427, 0, 0, 428, 429,
	944, 430, 945, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 911, 442, 0,
	440, 443, 444, 445, 1285, 494, 495, 0, 447, 446,
	496, 985, 0, 0, 170, 448, 449, 497, 450, 451,
	452, 0, 171, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 913,
	0, 969, 0, 1553, 219, 220, 221, 454, 455, 222,
	456, 223, 224, 457, 0, 225, 226, 227, 228, 229,
	230, 0, 912, 231, 458, 459, 460, 0, 232, 919,
	0, 902, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	922, 246, 247, 905, 903, 904, 909, 907, 906, 908,
	248, 249, 250, 251, 252, 253, 462, 463, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 464, 264, 265, 267,
	270, 266, 271, 272, 273, 939, 940, 0, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 467, 277, 278,
	0, 279, 0, 280, 0, 0, 923, 281, 282, 0,
	283, 946, 0, 469, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 914, 915, 918, 925, 0, 916, 293,
	0, 0, 0, 211, 292, 294, 301, 0, 924, 295,
	473, 297, 296, 298, 299, 300, 474, 0, 475, 0,
	302, 926, 927, 303, 304, 305, 928, 306, 307, 0,
	0, 308, 309, 310, 311, 972, 313, 312, 0, 314,
	947, 929, 315, 316, 930, 0, 317, 318, 0, 0,
	319, 0, 320, 321, 324, 322, 323, 325, 327, 328,
	326, 931, 329, 330, 332, 331, 0, 212, 932, 0,
	917, 479, 333, 334, 0, 335, 336, 337, 0, 977,
	339, 340, 0, 0, 341, 480, 933, 342, 934, 941,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	942, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 484, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 935, 376, 377, 378, 379, 485, 979,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 176,
	398, 399, 392, 394, 395, 396, 393, 397, 400, 401,
	910, 402, 382, 383, 403, 936, 404, 486, 405, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 415, 411,
	412, 413, 943, 0, 418, 419, 417, 178, 420, 421,
	422, 423, 424, 268, 425, 269, 426, 0, 488, 489,
	490, 427, 0, 0, 428, 429, 944, 430, 945, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 911, 442, 0, 440, 443, 444, 445,
	1285, 494, 495, 0, 447, 446, 496, 0, 0, 0,
	170, 448, 449, 497, 450, 451, 452, 0, 171, 0,
	0, 2449, 0, 985, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 969, 0, 1553,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 913, 0, 0, 0, 0, 219, 220, 221, 454,
	455, 222, 456, 223, 224, 457, 0, 225, 226, 227,
	228, 229, 230, 0, 912, 231, 458, 459, 460, 0,
	232, 919, 0, 902, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 922, 246, 247, 905, 903, 904, 909, 907,
	906, 908, 248, 249, 250, 251, 252, 253, 462, 463,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 464, 264,
	265, 267, 270, 266, 271, 272, 273, 939, 940, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 467,
	277, 278, 0, 279, 0, 280, 0, 0, 923, 281,
	282, 0, 283, 946, 0, 469, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 914, 915, 918, 925, 0,
	916, 293, 0, 0, 0, 211, 292, 294, 301, 0,
	924, 295, 473, 297, 296, 298, 299, 300, 474, 0,
	475, 0, 302, 926, 927, 303, 304, 305, 928, 306,
	307, 0, 0, 308, 309, 310, 311, 972, 313, 312,
	0, 314, 947, 929, 315, 316, 930, 0, 317, 318,
	0, 0, 319, 0, 320, 321, 324, 322, 323, 325,
	327, 328, 326, 931, 329, 330, 332, 331, 0, 212,
	932, 0, 917, 479, 333, 334, 0, 335, 336, 337,
	0, 977, 339, 340, 0, 0, 341, 480, 933, 342,
	934, 941, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 942, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 484, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 935, 376, 377, 378, 379,
	485, 979, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 392, 394, 395, 396, 393, 397,
	400, 401, 910, 402, 382, 383, 403, 936, 404, 486,
	405, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	415, 411, 412, 413, 943, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 268, 425, 269, 426, 0,
	488, 489, 490, 427, 0, 0, 428, 429, 944, 430,
	945, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 911, 442, 0, 440, 443,
	444, 445, 493, 494, 495, 0, 447, 446, 496, 0,
	968, 0, 985, 448, 449, 497, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 969,
	913, 974, 0, 0, 0, 219, 220, 221, 454, 455,
	222, 456, 223, 224, 457, 0, 225, 226, 227, 228,
	229, 230, 0, 912, 231, 458, 459, 460, 0, 232,
	919, 0, 902, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 922, 246, 247, 905, 903, 904, 909, 907, 906,
	908, 248, 249, 250, 251, 252, 253, 462, 463, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 464, 264, 265,
	267, 270, 266, 271, 272, 273, 939, 940, 0, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 467, 277,
	278, 0, 279, 0, 280, 0, 0, 923, 281, 282,
	0, 283, 946, 0, 469, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 914, 915, 918, 925, 0, 916,
	293, 0, 0, 0, 211, 292, 294, 301, 0, 924,
	295, 473, 297, 296, 298, 299, 300, 474, 0, 475,
	0, 302, 926, 927, 303, 304, 305, 928, 306, 307,
	0, 0, 308, 309, 310, 311, 972, 313, 312, 0,
	314, 947, 929, 315, 316, 930, 0, 317, 318, 0,
	0, 319, 0, 320, 321, 324, 322, 323, 325, 327,
	328, 326, 931, 329, 330, 332, 331, 0, 212, 932,
	0, 917, 479, 333, 334, 0, 335, 336, 337, 0,
	977, 339, 340, 0, 0, 341, 480, 933, 342, 934,
	941, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 942, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 484, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 935, 376, 377, 378, 379, 485,
	979, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 392, 394, 395, 396, 393, 397, 400,
	401, 910, 402, 382, 383, 403, 936, 404, 486, 405,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 415,
	411, 412, 413, 943, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 268, 425, 269, 426, 0, 488,
	489, 490, 427, 0, 0, 428, 429, 944, 430, 945,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 911, 442, 0, 440, 443, 444,
	445, 493, 494, 495, 0, 447, 446, 496, 985, 0,
	0, 0, 448, 449, 497, 450, 451, 452, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 913, 0, 969, 0,
	974, 219, 220, 221, 454, 455, 222, 456, 223, 224,
	457, 0, 225, 226, 227, 228, 229, 230, 0, 912,
	231, 458, 459, 460, 0, 232, 919, 0, 902, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 922, 246, 247,
	905, 903, 904, 909, 907, 906, 908, 248, 249, 250,
	251, 252, 253, 462, 463, 0, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 464, 264, 265, 267, 270, 266, 271,
	272, 273, 939, 940, 0, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 467, 277, 278, 0, 279, 0,
	280, 0, 0, 923, 281, 282, 0, 283, 946, 0,
	469, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	914, 915, 918, 925, 0, 916, 293, 0, 0, 0,
	211, 292, 294, 301, 0, 924, 295, 473, 297, 296,
	298, 299, 300, 474, 0, 475, 0, 302, 926, 927,
	303, 304, 305, 928, 306, 307, 0, 0, 308, 309,
	310, 311, 972, 313, 312, 0, 314, 947, 929, 315,
	316, 930, 0, 317, 318, 0, 0, 319, 0, 320,
	321, 324, 322, 323, 325, 327, 328, 326, 931, 329,
	330, 332, 331, 0, 212, 932, 0, 917, 479, 333,
	334, 0, 335, 336, 337, 0, 977, 339, 340, 0,
	0, 341, 480, 933, 342, 934, 941, 343, 338, 344,
	345, 346, 347, 348, 349, 0, 350, 942, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 357, 358, 359,
	484, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	935, 376, 377, 378, 379, 485, 979, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 0, 398, 399, 392,
	394, 395, 396, 393, 397, 400, 401, 910, 402, 382,
	383, 403, 936, 404, 486, 405, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 415, 411, 412, 413, 943,
	0, 418, 419, 417, 0, 420, 421, 422, 423, 424,
	268, 425, 269, 426, 0, 488, 489, 490, 427, 0,
	0, 428, 429, 944, 430, 945, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	911, 442, 0, 440, 443, 444, 445, 493, 494, 495,
	0, 447, 446, 496, 985, 0, 0, 0, 448, 449,
	497, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 913, 0, 969, 0, 974, 219, 220, 221,
	454, 455, 222, 456, 223, 224, 457, 0, 225, 226,
	227, 228, 229, 230, 0, 912, 231, 458, 459, 460,
	0, 232, 919, 0, 902, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 922, 246, 247, 905, 903, 904, 909,
	907, 906, 908, 248, 249, 250, 251, 252, 253, 462,
	463, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 464,
	264, 265, 267, 270, 266, 271, 272, 273, 939, 940,
	0, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	467, 277, 278, 0, 279, 0, 280, 0, 0, 923,
	281, 282, 0, 283, 946, 0, 469, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 914, 915, 918, 925,
	0, 916, 293, 0, 0, 0, 211, 292, 294, 301,
	0, 924, 295, 473, 297, 296, 298, 299, 300, 474,
	0, 475, 0, 302, 926, 927, 303, 304, 305, 928,
	306, 307, 0, 0, 308, 309, 310, 311, 0, 313,
	312, 0, 314, 947, 929, 315, 316, 930, 0, 317,
	318, 0, 0, 319, 0, 320, 321, 324, 322, 323,
	325, 327, 328, 326, 931, 329, 330, 332, 331, 0,
	212, 932, 0, 917, 479, 333, 334, 0, 335, 336,
	337, 0, 0, 339, 340, 0, 0, 341, 480, 933,
	342, 934, 941, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 942, 351, 483, 352, 0, 353, 0,
	354, 355, 356, 357, 358, 359, 484, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 935, 376, 377, 378,
	379, 485, 979, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 0, 398, 399, 392, 394, 395, 396, 393,
	397, 400, 401, 910, 402, 382, 383, 403, 936, 404,
	486, 405, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 415, 411, 412, 413, 943, 0, 418, 419, 417,
	0, 420, 421, 422, 423, 424, 268, 425, 269, 426,
	0, 488, 489, 490, 427, 0, 0, 428, 429, 944,
	430, 945, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 911, 442, 0, 440,
	443, 444, 445, 493, 494, 495, 0, 447, 446, 496,
	797, 0, 1141, 0, 448, 449, 497, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	453, 0, 1459, 0, 0, 219, 220, 221, 454, 455,
	222, 456, 223, 224, 457, 0, 225, 226, 227, 228,
	229, 230, 0, 0, 231, 458, 459, 460, 0, 232,
	461, 0, 1045, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 922, 246, 247, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 253, 462, 463, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 464, 264, 265,
	267, 270, 266, 271, 272, 273, 465, 466, 0, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 467, 277,
	278, 0, 279, 0, 280, 0, 0, 923, 281, 282,
	0, 283, 468, 0, 469, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 470, 471, 472, 925, 0, 476,
	293, 0, 0, 0, 0, 292, 294, 301, 0, 924,
	295, 473, 297, 296, 298, 299, 300, 474, 0, 475,
	0, 302, 926, 927, 303, 304, 305, 928, 306, 307,
	0, 0, 308, 309, 310, 311, 0, 313, 312, 0,
	314, 477, 929, 315, 316, 930, 0, 317, 318, 0,
	0, 319, 0, 320, 321, 324, 322, 323, 325, 327,
	328, 326, 931, 329, 330, 332, 331, 0, 0, 932,
	0, 478, 479, 333, 334, 0, 335, 336, 337, 0,
	0, 339, 340, 0, 0, 341, 480, 933, 342, 934,
	481, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 482, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 484, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 935, 376, 377, 378, 379, 485,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	176, 398, 399, 392, 394, 395, 396, 393, 397, 400,
	401, 0, 402, 382, 383, 403, 936, 404, 486, 405,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 415,
	411, 412, 413, 487, 0, 418, 419, 417, 178, 420,
	421, 422, 423, 424, 268, 425, 269, 426, 0, 488,
	489, 490, 427, 0, 0, 428, 429, 491, 430, 492,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 1285, 494, 495, 0, 447, 446, 496, 1282, 0,
	1141, 170, 448, 449, 497, 450, 451, 452, 0, 171,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 453, 0,
	148, 0, 0, 219, 220, 221, 454, 455, 222, 456,
	223, 224, 457, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 458, 459, 460, 0, 232, 461, 0,
	1045, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 922,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 462, 463, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 464, 264, 265, 267, 270,
	266, 271, 272, 273, 465, 466, 0, 210, 0, 0,
	0, 0, 0, 274, 275, 276, 467, 277, 278, 0,
	279, 0, 280, 0, 0, 923, 281, 282, 0, 283,
	468, 0, 469, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 470, 471, 472, 925, 0, 476, 293, 0,
	0, 0, 0, 292, 294, 301, 0, 924, 295, 473,
	297, 296, 298, 299, 300, 474, 0, 475, 0, 302,
	926, 927, 303, 304, 305, 928, 306, 307, 0, 0,
	308, 309, 310, 311, 0, 313, 312, 0, 314, 477,
	929, 315, 316, 930, 0, 317, 318, 0, 0, 319,
	0, 320, 321, 324, 322, 323, 325, 327, 328, 326,
	931, 329, 330, 332, 331, 0, 0, 932, 0, 478,
	479, 333, 334, 0, 335, 336, 337, 0, 0, 339,
	340, 0, 0, 341, 480, 933, 342, 934, 481, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 482,
	351, 483, 352, 0, 353, 0, 354, 355, 356, 357,
	358, 359, 484, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 935, 376, 377, 378, 379, 485, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 176, 398,
	399, 392, 394, 395, 396, 393, 397, 400, 401, 0,
	402, 382, 383, 403, 936, 404, 486, 405, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 415, 411, 412,
	413, 487, 0, 418, 419, 417, 178, 420, 421, 422,
	423, 424, 268, 425, 269, 426, 0, 488, 489, 490,
	427, 0, 0, 428, 429, 491, 430, 492, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 1285,
	494, 495, 0, 447, 446, 496, 0, 0, 0, 170,
	448, 449, 497, 450, 451, 452, 0, 171, 0, 0,
	0, 0, 1141, 1140, 0, 0, 0, 0, 1138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 148, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 219, 220, 221, 454, 455,
	222, 456, 223, 224, 457, 0, 225, 226, 227, 228,
	229, 230, 0, 0, 231, 458, 459, 460, 0, 232,
	461, 0, 1045, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 922, 246, 247, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 253, 462, 463, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 464, 264, 265,
	267, 270, 266, 271, 272, 273, 465, 466, 0, 210,
	0, 0, 0, 0, 0, 274, 275, 276, 467, 277,
	278, 0, 279, 0, 280, 0, 0, 923, 281, 282,
	0, 283, 468, 0, 469, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 470, 471, 472, 925, 0, 476,
	293, 0, 0, 0, 0, 292, 294, 301, 0, 924,
	295, 473, 297, 296, 298, 299, 300, 474, 0, 475,
	0, 302, 926, 927, 303, 304, 305, 928, 306, 307,
	0, 0, 308, 309, 310, 311, 0, 313, 312, 0,
	314, 477, 929, 315, 316, 930, 0, 317, 318, 0,
	0, 319, 0, 320, 321, 324, 322, 323, 325, 327,
	328, 326, 931, 329, 330, 332, 331, 0, 0, 932,
	0, 478, 479, 333, 334, 0, 335, 336, 337, 0,
	0, 339, 340, 0, 0, 341, 480, 933, 342, 934,
	481, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 482, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 484, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 935, 376, 377, 378, 379, 485,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	0, 398, 399, 392, 394, 395, 396, 393, 397, 400,
	401, 0, 402, 382, 383, 403, 936, 404, 486, 405,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 415,
	411, 412, 413, 487, 0, 418, 419, 417, 0, 420,
	421, 422, 423, 424, 268, 425, 269, 426, 0, 488,
	489, 490, 427, 0, 0, 428, 429, 491, 430, 492,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 493, 494, 495, 0, 447, 446, 496, 0, 0,
	0, 0, 448, 449, 497, 450, 451, 452, 1141, 1140,
	0, 0, 0, 0, 1138, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	2634, 218, 0, 0, 0, 0, 453, 0, 0, 0,
	0, 219, 220, 221, 454, 455, 222, 456, 223, 224,
	457, 0, 225, 226, 227, 228, 229, 230, 0, 0,
	231, 458, 459, 460, 0, 232, 461, 0, 1045, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 922, 246, 247,
	0, 0, 0, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 253, 462, 463, 0, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 464, 264, 265, 267, 270, 266, 271,
	272, 273, 465, 466, 0, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 467, 277, 278, 0, 279, 0,
	280, 0, 0, 923, 281, 282, 0, 283, 468, 0,
	469, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	470, 471, 472, 925, 0, 476, 293, 0, 0, 0,
	0, 292, 294, 301, 0, 924, 295, 473, 297, 296,
	298, 299, 300, 474, 0, 475, 0, 302, 926, 927,
	303, 304, 305, 928, 306, 307, 0, 0, 308, 309,
	310, 311, 0, 313, 312, 0, 314, 477, 929, 315,
	316, 930, 0, 317, 318, 0, 0, 319, 0, 320,
	321, 324, 322, 323, 325, 327, 328, 326, 931, 329,
	330, 332, 331, 0, 0, 932, 0, 478, 479, 333,
	334, 0, 335, 336, 337, 0, 0, 339, 340, 0,
	0, 341, 480, 933, 342, 934, 481, 343, 338, 344,
	345, 346, 347, 348, 349, 0, 350, 482, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 357, 358, 359,
	484, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	935, 376, 377, 378, 379, 485, 380, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 0, 398, 399, 392,
	394, 395, 396, 393, 397, 400, 401, 0, 402, 382,
	383, 403, 936, 404, 486, 405, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 415, 411, 412, 413, 487,
	0, 418, 419, 417, 0, 420, 421, 422, 423, 424,
	268, 425, 269, 426, 0, 488, 489, 490, 427, 0,
	0, 428, 429, 491, 430, 492, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 493, 494, 495,
	0, 447, 446, 496, 985, 0, 0, 0, 448, 449,
	497, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 913, 0, 0, 0, 1289, 219, 220, 221,
	454, 455, 222, 456, 223, 224, 457, 0, 225, 226,
	227, 228, 229, 230, 0, 912, 231, 458, 459, 460,
	0, 232, 919, 0, 902, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 922, 246, 247, 905, 903, 904, 909,
	907, 906, 908, 248, 249, 250, 251, 252, 253, 462,
	463, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 464,
	264, 265, 267, 270, 266, 271, 272, 273, 939, 940,
	0, 210, 0, 0, 0, 0, 0, 274, 275, 276,
	467, 277, 278, 0, 279, 0, 280, 0, 0, 923,
	281, 282, 0, 283, 946, 0, 469, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 914, 915, 918, 925,
	0, 916, 293, 0, 0, 0, 211, 292, 294, 301,
	0, 924, 295, 473, 297, 296, 298, 299, 300, 474,
	0, 475, 0, 302, 926, 927, 303, 304, 305, 928,
	306, 307, 0, 0, 308, 309, 310, 311, 0, 313,
	312, 0, 314, 947, 929, 315, 316, 930, 0, 317,
	318, 0, 0, 319, 0, 320, 321, 324, 322, 323,
	325, 327, 328, 326, 931, 329, 330, 332, 331, 0,
	212, 932, 0, 917, 479, 333, 334, 0, 335, 336,
	337, 0, 0, 339, 340, 0, 0, 341, 480, 933,
	342, 934, 941, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 942, 351, 483, 352, 0, 353, 0,
	354, 355, 356, 357, 358, 359, 484, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 935, 376, 377, 378,
	379, 485, 380, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 0, 398, 399, 392, 394, 395, 396, 393,
	397, 400, 401, 910, 402, 382, 383, 403, 936, 404,
	486, 405, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 415, 411, 412, 413, 943, 0, 418, 419, 417,
	0, 420, 421, 422, 423, 424, 268, 425, 269, 426,
	0, 488, 489, 490, 427, 0, 0, 428, 429, 944,
	430, 945, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 911, 442, 0, 440,
	443, 444, 445, 493, 494, 495, 0, 447, 446, 496,
	797, 0, 207, 0, 448, 449, 497, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 213,
	214, 215, 216, 217, 0, 218, 0, 0, 0, 0,
	453, 0, 0, 0, 0, 219, 220, 221, 454, 455,
	222, 456, 223, 224, 457, 0, 225, 226, 227, 228,
	229, 230, 0, 0, 231, 458, 459, 460, 0, 232,
	461, 0, 0, 0, 233, 234, 235, 236, 237, 0,
	239, 240, 241, 238, 0, 242, 0, 243, 244, 245,
	0, 0, 246, 247, 0, 0, 0, 0, 0, 0,
	0, 248, 249, 250, 251, 252, 253, 462, 463, 0,
	254, 0, 256, 255, 0, 257, 0, 0, 258, 259,
	260, 0, 261, 0, 262, 263, 0, 464, 264, 265,
	267, 270, 266, 271, 272, 273, 465, 466, 0, 0,
	0, 0, 0, 0, 0, 274, 275, 276, 467, 277,
	278, 0, 279, 0, 280, 0, 0, 0, 281, 282,
	0, 283, 468, 0, 469, 284, 0, 285, 286, 287,
	288, 289, 290, 291, 470, 471, 472, 0, 0, 476,
	293, 0, 0, 0, 0, 292, 294, 301, 0, 0,
	295, 473, 297, 296, 298, 299, 300, 474, 0, 475,
	0, 302, 0, 0, 303, 304, 305, 0, 306, 307,
	0, 0, 308, 309, 310, 311, 0, 313, 312, 0,
	314, 477, 0, 315, 316, 0, 0, 317, 318, 0,
	0, 319, 0, 320, 321, 324, 322, 323, 325, 327,
	328, 326, 0, 329, 330, 332, 331, 0, 0, 0,
	0, 478, 479, 333, 334, 0, 335, 336, 337, 0,
	0, 339, 340, 0, 0, 341, 480, 0, 342, 0,
	481, 343, 338, 344, 345, 346, 347, 348, 349, 0,
	350, 482, 351, 483, 352, 0, 353, 0, 354, 355,
	356, 357, 358, 359, 484, 360, 361, 0, 362, 363,
	364, 365, 366, 0, 368, 369, 370, 367, 371, 372,
	373, 374, 0, 375, 0, 376, 377, 378, 379, 485,
	380, 0, 381, 385, 386, 387, 388, 389, 390, 391,
	176, 398, 399, 392, 394, 395, 396, 393, 397, 400,
	401, 0, 402, 382, 383, 403, 0, 404, 486, 405,
	406, 0, 416, 407, 408, 409, 384, 410, 414, 415,
	411, 412, 413, 487, 0, 418, 419, 417, 178, 420,
	421, 422, 423, 424, 268, 425, 269, 426, 0, 488,
	489, 490, 427, 0, 0, 428, 429, 491, 430, 492,
	0, 431, 432, 433, 0, 434, 435, 0, 0, 436,
	437, 438, 439, 441, 0, 442, 0, 440, 443, 444,
	445, 1285, 494, 495, 0, 447, 446, 496, 207, 0,
	0, 170, 448, 449, 497, 450, 451, 452, 0, 171,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 453, 0, 0, 0,
	148, 219, 220, 221, 454, 455, 222, 456, 223, 224,
	457, 0, 225, 226, 227, 228, 229, 230, 0, 0,
	231, 458, 459, 460, 0, 232, 461, 0, 0, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 0, 246, 247,
	0, 0, 0, 0, 0, 0, 0, 248, 249, 250,
	251, 252, 253, 462, 463, 0, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 464, 264, 265, 267, 270, 266, 271,
	272, 273, 465, 466, 0, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 467, 277, 278, 0, 279, 0,
	280, 0, 0, 0, 281, 282, 0, 283, 468, 0,
	469, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	470, 471, 472, 0, 0, 476, 293, 0, 0, 0,
	211, 292, 294, 301, 0, 0, 295, 473, 297, 296,
	298, 299, 300, 474, 0, 475, 0, 302, 0, 0,
	303, 304, 305, 0, 306, 307, 0, 0, 308, 309,
	310, 311, 0, 313, 312, 0, 314, 477, 0, 315,
	316, 0, 0, 317, 318, 0, 0, 319, 0, 320,
	321, 324, 322, 323, 325, 327, 328, 326, 0, 329,
	330, 332, 331, 0, 212, 0, 0, 478, 479, 333,
	334, 0, 335, 336, 337, 0, 0, 339, 340, 0,
	0, 341, 480, 0, 342, 0, 481, 343, 338, 344,
	345, 346, 347, 348, 349, 0, 350, 482, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 357, 358, 359,
	484, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	0, 376, 377, 378, 379, 485, 380, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 0, 398, 399, 392,
	394, 395, 396, 393, 397, 400, 401, 0, 402, 382,
	383, 403, 0, 404, 486, 405, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 415, 411, 412, 413, 487,
	0, 418, 419, 417, 0, 420, 421, 422, 423, 424,
	268, 425, 269, 426, 0, 488, 489, 490, 427, 0,
	0, 428, 429, 491, 430, 492, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 493, 494, 495,
	0, 447, 446, 496, 207, 0, 0, 0, 448, 449,
	497, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 213, 214, 215, 216, 217, 0, 218, 0, 0,
	0, 0, 453, 0, 0, 0, 1558, 219, 220, 221,
	454, 455, 222, 456, 223, 224, 457, 0, 225, 226,
	227, 228, 229, 230, 0, 0, 231, 458, 459, 460,
	0, 232, 461, 0, 0, 0, 233, 234, 235, 236,
	237, 0, 239, 240, 241, 238, 0, 242, 0, 243,
	244, 245, 0, 0, 246, 247, 0, 0, 0, 0,
	0, 0, 0, 248, 249, 250, 251, 252, 253, 462,
	463, 0, 254, 0, 256, 255, 0, 257, 0, 0,
	258, 259, 260, 0, 261, 0, 262, 263, 0, 464,
	264, 265, 267, 270, 266, 271, 272, 273, 465, 466,
	0, 0, 0, 0, 0, 0, 0, 274, 275, 276,
	467, 277, 278, 0, 279, 0, 280, 0, 0, 0,
	281, 282, 0, 283, 468, 0, 469, 284, 0, 285,
	286, 287, 288, 289, 290, 291, 470, 471, 472, 0,
	0, 476, 293, 0, 0, 0, 0, 292, 294, 301,
	0, 0, 295, 473, 297, 296, 298, 299, 300, 474,
	0, 475, 0, 302, 0, 0, 303, 304, 305, 0,
	306, 307, 0, 0, 308, 309, 310, 311, 0, 313,
	312, 0, 314, 477, 0, 315, 316, 0, 0, 317,
	318, 0, 0, 319, 0, 320, 321, 324, 322, 323,
	325, 327, 328, 326, 0, 329, 330, 332, 331, 0,
	0, 0, 0, 478, 479, 333, 334, 0, 335, 336,
	337, 0, 0, 339, 340, 0, 0, 341, 480, 0,
	342, 0, 481, 343, 338, 344, 345, 346, 347, 348,
	349, 0, 350, 482, 351, 483, 352, 0, 353, 0,
	354, 355, 356, 357, 358, 359, 484, 360, 361, 0,
	362, 363, 364, 365, 366, 0, 368, 369, 370, 367,
	371, 372, 373, 374, 0, 375, 0, 376, 377, 378,
	379, 485, 380, 0, 381, 385, 386, 387, 388, 389,
	390, 391, 0, 398, 399, 392, 394, 395, 396, 393,
	397, 400, 401, 0, 402, 382, 383, 403, 0, 404,
	486, 405, 406, 0, 416, 407, 408, 409, 384, 410,
	414, 415, 411, 412, 413, 487, 0, 418, 419, 417,
	0, 420, 421, 422, 423, 424, 268, 425, 269, 426,
	0, 488, 489, 490, 427, 0, 0, 428, 429, 491,
	430, 492, 0, 431, 432, 433, 0, 434, 435, 0,
	0, 436, 437, 438, 439, 441, 0, 442, 0, 440,
	443, 444, 445, 493, 494, 495, 0, 447, 446, 496,
	207, 0, 0, 0, 448, 449, 497, 450, 451, 452,
	0, 0, 0, 0, 0, 0, 0, 213, 214, 215,
	216, 217, 0, 218, 0, 0, 0, 0, 453, 0,
	0, 0, 2253, 219, 220, 221, 454, 455, 222, 456,
	223, 224, 457, 0, 225, 226, 227, 228, 229, 230,
	0, 0, 231, 458, 459, 460, 0, 232, 461, 0,
	0, 0, 233, 234, 235, 236, 237, 0, 239, 240,
	241, 238, 0, 242, 0, 243, 244, 245, 0, 0,
	246, 247, 0, 0, 0, 0, 0, 0, 0, 248,
	249, 250, 251, 252, 253, 462, 463, 0, 254, 0,
	256, 255, 0, 257, 0, 0, 258, 259, 260, 0,
	261, 0, 262, 263, 0, 464, 264, 265, 267, 270,
	266, 271, 272, 273, 465, 466, 0, 0, 0, 0,
	0, 0, 0, 274, 275, 276, 467, 277, 278, 0,
	279, 0, 280, 0, 0, 0, 281, 282, 0, 283,
	468, 0, 469, 284, 0, 285, 286, 287, 288, 289,
	290, 291, 470, 471, 472, 0, 0, 476, 293, 0,
	0, 0, 0, 292, 294, 301, 0, 0, 295, 473,
	297, 296, 298, 299, 300, 474, 0, 475, 0, 302,
	0, 0, 303, 304, 305, 0, 306, 307, 0, 0,
	308, 309, 310, 311, 0, 313, 312, 0, 314, 477,
	0, 315, 316, 0, 0, 317, 318, 0, 0, 319,
	0, 320, 321, 324, 322, 323, 325, 327, 328, 326,
	0, 329, 330, 332, 331, 0, 0, 0, 0, 478,
	479, 333, 334, 0, 335, 336, 337, 0, 0, 339,
	340, 0, 0, 341, 480, 0, 342, 0, 481, 343,
	338, 344, 345, 346, 347, 348, 349, 0, 350, 482,
	351, 483, 352, 0, 353, 0, 354, 355, 356, 357,
	358, 359, 484, 360, 361, 0, 362, 363, 364, 365,
	366, 0, 368, 369, 370, 367, 371, 372, 373, 374,
	0, 375, 0, 376, 377, 378, 379, 485, 380, 0,
	381, 385, 386, 387, 388, 389, 390, 391, 0, 398,
	399, 392, 394, 395, 396, 393, 397, 400, 401, 0,
	402, 382, 383, 403, 0, 404, 486, 405, 406, 0,
	416, 407, 408, 409, 384, 410, 414, 415, 411, 412,
	413, 487, 0, 418, 419, 417, 0, 420, 421, 422,
	423, 424, 268, 425, 269, 426, 0, 488, 489, 490,
	427, 0, 0, 428, 429, 491, 430, 492, 0, 431,
	432, 433, 0, 434, 435, 0, 0, 436, 437, 438,
	439, 441, 0, 442, 0, 440, 443, 444, 445, 493,
	494, 495, 0, 447, 446, 496, 674, 0, 566, 0,
	448, 449, 497, 450, 451, 452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 213, 214, 215, 216, 217,
	0, 218, 0, 0, 0, 0, 453, 0, 2706, 0,
	0, 219, 220, 221, 454, 455, 222, 456, 223, 224,
	457, 0, 225, 226, 227, 228, 229, 230, 0, 0,
	231, 458, 459, 460, 0, 232, 461, 0, 0, 0,
	233, 234, 235, 236, 237, 0, 239, 240, 241, 238,
	0, 242, 0, 243, 244, 245, 0, 0, 246, 247,
	0, 0, 0, 0, 0, 0, 0, 248, 249, 572,
	251, 252, 253, 462, 463, 0, 254, 0, 256, 255,
	0, 257, 0, 0, 258, 259, 260, 0, 261, 0,
	262, 263, 0, 464, 264, 265, 267, 270, 266, 271,
	272, 273, 465, 466, 0, 210, 0, 0, 0, 0,
	0, 274, 275, 276, 467, 277, 278, 0, 279, 0,
	280, 0, 0, 0, 281, 282, 0, 283, 468, 0,
	469, 284, 0, 285, 286, 287, 288, 289, 290, 291,
	470, 471, 472, 0, 0, 476, 293, 0, 0, 0,
	211, 292, 294, 301, 0, 0, 295, 473, 297, 296,
	298, 299, 300, 474, 0, 475, 0, 302, 0, 0,
	303, 304, 305, 0, 306, 307, 0, 0, 308, 309,
	310, 311, 0, 313, 312, 0, 314, 477, 0, 315,
	316, 0, 0, 317, 318, 0, 0, 319, 0, 320,
	321, 324, 322, 323, 325, 327, 328, 326, 0, 329,
	330, 332, 331, 0, 212, 0, 0, 478, 479, 333,
	334, 0, 335, 336, 337, 0, 0, 339, 340, 0,
	0, 341, 480, 0, 342, 0, 481, 343, 338, 344,
	345, 346, 347, 348, 349, 0, 350, 482, 351, 483,
	352, 0, 353, 0, 354, 355, 356, 357, 358, 359,
	484, 360, 361, 0, 362, 363, 364, 365, 366, 0,
	368, 369, 370, 367, 371, 372, 373, 374, 0, 375,
	0, 376, 377, 378, 379, 485, 380, 0, 381, 385,
	386, 387, 388, 389, 390, 391, 0, 398, 399, 392,
	394, 395, 396, 393, 397, 400, 401, 0, 402, 382,
	383, 403, 0, 404, 486, 405, 406, 0, 416, 407,
	408, 409, 384, 410, 414, 415, 411, 412, 413, 487,
	0, 418, 419, 417, 571, 420, 421, 422, 423, 424,
	268, 425, 269, 426, 0, 488, 489, 490, 427, 0,
	0, 428, 429, 491, 430, 492, 0, 431, 432, 433,
	0, 434, 435, 0, 0, 436, 437, 438, 439, 441,
	0, 442, 0, 440, 443, 444, 445, 493, 494, 495,
	0, 447, 446, 496, 0, 565, 0, 566, 448, 449,
	497, 450, 451, 452, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 575,
	218, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	219, 220, 221, 454, 455, 222, 456, 223, 224, 457,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	458, 459, 460, 0, 232, 461, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 572, 251,
	252, 253, 462, 463, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 464, 264, 265, 267, 270, 266, 271, 272,
	273, 465, 466, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 467, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 468, 0, 469,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 470,
	471, 472, 0, 0, 476, 293, 0, 0, 0, 211,
	292, 294, 301, 0, 0, 295, 473, 297, 296, 298,
	299, 300, 474, 0, 475, 0, 302, 0, 0, 303,
	304, 305, 0, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 477, 0, 315, 316,
	0, 0, 317, 318, 0, 0, 319, 0, 320, 321,
	324, 322, 323, 325, 327, 328, 326, 0, 329, 330,
	332, 331, 0, 212, 0, 0, 478, 479, 333, 334,
	0, 335, 336, 337, 0, 0, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 482, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 484,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 0,
	376, 377, 378, 379, 485, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 398, 399, 392, 394,
	395, 396, 393, 397, 400, 401, 0, 402, 382, 383,
	403, 0, 404, 486, 405, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 415, 411, 412, 413, 487, 0,
	418, 419, 417, 571, 420, 421, 422, 423, 424, 268,
	425, 269, 426, 0, 488, 489, 490, 427, 0, 0,
	428, 429, 491, 430, 492, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 493, 494, 495, 566,
	447, 446, 496, 0, 0, 0, 0, 448, 449, 497,
	450, 451, 452, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 453, 575, 0,
	0, 0, 219, 220, 221, 454, 455, 222, 456, 223,
	224, 457, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 458, 459, 460, 0, 232, 461, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	572, 251, 252, 253, 462, 463, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 464, 264, 265, 267, 270, 266,
	271, 272, 273, 465, 466, 0, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 467, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 468,
	0, 469, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 470, 471, 472, 0, 0, 476, 293, 0, 0,
	0, 211, 292, 294, 301, 0, 0, 295, 473, 297,
	296, 298, 299, 300, 474, 0, 475, 0, 302, 0,
	0, 303, 304, 305, 0, 306, 307, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 477, 0,
	315, 316, 0, 0, 317, 318, 0, 0, 319, 0,
	320, 321, 324, 322, 323, 325, 327, 328, 326, 0,
	329, 330, 332, 331, 0, 212, 0, 0, 478, 479,
	333, 334, 0, 335, 336, 337, 0, 0, 339, 340,
	0, 0, 341, 480, 0, 342, 0, 481, 343, 338,
	344, 345, 346, 347, 348, 349, 0, 350, 482, 351,
	483, 352, 0, 353, 0, 354, 355, 356, 357, 358,
	359, 484, 360, 361, 0, 362, 363, 364, 365, 366,
	0, 368, 369, 370, 367, 371, 372, 373, 374, 0,
	375, 0, 1830, 377, 378, 379, 485, 380, 0, 381,
	385, 386, 387, 388, 389, 390, 391, 0, 398, 399,
	392, 394, 395, 396, 393, 397, 400, 401, 0, 402,
	382, 383, 403, 0, 404, 486, 405, 406, 0, 416,
	407, 408, 409, 384, 410, 414, 415, 411, 412, 413,
	487, 0, 418, 419, 417, 571, 420, 421, 422, 423,
	424, 268, 425, 269, 426, 0, 488, 489, 490, 427,
	0, 0, 428, 429, 491, 430, 492, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 493, 494,
	495, 566, 447, 446, 496, 0, 0, 0, 0, 448,
	449, 497, 450, 451, 452, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 453,
	575, 0, 0, 0, 219, 220, 221, 454, 455, 222,
	456, 223, 224, 457, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 458, 459, 460, 0, 232, 461,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 572, 251, 252, 253, 462, 463, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 464, 264, 265, 267,
	270, 266, 271, 272, 273, 465, 466, 0, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 467, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 468, 0, 469, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 470, 471, 472, 0, 0, 476, 293,
	0, 0, 0, 211, 292, 294, 301, 0, 0, 295,
	473, 297, 296, 298, 299, 300, 474, 0, 475, 0,
	302, 0, 0, 303, 304, 305, 0, 306, 307, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	477, 0, 315, 316, 0, 0, 317, 318, 0, 0,
	319, 0, 320, 321, 324, 322, 323, 325, 327, 328,
	326, 0, 329, 330, 332, 331, 0, 212, 0, 0,
	478, 479, 333, 334, 0, 335, 336, 337, 0, 0,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	482, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 484, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 0, 376, 377, 378, 379, 485, 380,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 0,
	398, 399, 392, 394, 395, 396, 393, 397, 400, 401,
	0, 402, 382, 383, 403, 0, 404, 486, 405, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 415, 411,
	412, 413, 487, 0, 418, 419, 417, 571, 420, 421,
	422, 423, 424, 268, 425, 269, 426, 0, 488, 489,
	490, 427, 0, 0, 428, 429, 491, 430, 492, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	493, 494, 495, 207, 447, 446, 496, 0, 0, 0,
	0, 448, 449, 497, 450, 451, 452, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 453, 575, 0, 0, 0, 219, 220, 221, 454,
	455, 222, 456, 223, 224, 457, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 458, 459, 460, 0,
	232, 461, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 462, 463,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 464, 264,
	265, 267, 270, 266, 271, 272, 273, 465, 466, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 467,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 468, 0, 469, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 470, 471, 472, 0, 0,
	476, 293, 0, 0, 0, 211, 292, 294, 301, 0,
	0, 295, 473, 297, 296, 298, 299, 300, 474, 0,
	475, 0, 302, 0, 0, 303, 304, 305, 0, 306,
	307, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 477, 0, 315, 316, 0, 0, 317, 318,
	0, 0, 319, 0, 320, 321, 324, 322, 323, 325,
	327, 328, 326, 0, 329, 330, 332, 331, 0, 212,
	0, 0, 478, 479, 333, 334, 0, 335, 336, 337,
	0, 0, 339, 340, 0, 0, 341, 480, 0, 342,
	0, 481, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 482, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 484, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 0, 376, 377, 378, 379,
	485, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 392, 394, 395, 396, 393, 397,
	400, 401, 0, 402, 382, 383, 403, 0, 404, 486,
	405, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	415, 411, 412, 413, 487, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 268, 425, 269, 426, 0,
	488, 489, 490, 427, 0, 0, 428, 429, 491, 430,
	492, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 493, 494, 495, 0, 447, 446, 496, 0,
	0, 0, 0, 448, 449, 497, 450, 451, 452, 1310,
	0, 1141, 1140, 0, 0, 0, 0, 1138, 0, 0,
	0, 0, 0, 0, 575, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 219, 220, 221, 454, 455, 222,
	456, 223, 224, 457, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 458, 459, 460, 0, 232, 461,
	0, 1045, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	922, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 462, 463, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 464, 264, 265, 267,
	270, 266, 271, 272, 273, 465, 466, 0, 210, 0,
	0, 0, 0, 0, 1309, 275, 276, 467, 277, 278,
	0, 279, 0, 280, 0, 0, 923, 281, 282, 0,
	283, 468, 0, 469, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 470, 471, 472, 925, 0, 476, 293,
	0, 0, 0, 0, 292, 294, 301, 0, 924, 295,
	473, 297, 296, 298, 299, 300, 474, 0, 475, 0,
	302, 926, 927, 303, 304, 305, 928, 306, 307, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	477, 929, 315, 316, 930, 0, 317, 318, 0, 0,
	319, 0, 320, 321, 324, 322, 323, 325, 327, 328,
	326, 931, 329, 330, 332, 331, 0, 0, 932, 0,
	478, 479, 333, 334, 0, 335, 336, 337, 0, 0,
	339, 340, 0, 0, 341, 480, 933, 342, 934, 481,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	482, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 1308, 359, 484, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 935, 376, 377, 378, 379, 485, 380,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 0,
	398, 399, 392, 394, 395, 396, 393, 397, 400, 401,
	0, 402, 382, 383, 403, 936, 404, 486, 405, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 415, 411,
	412, 413, 487, 0, 418, 419, 417, 0, 420, 421,
	422, 423, 424, 268, 425, 269, 426, 0, 488, 489,
	490, 427, 0, 0, 428, 429, 491, 430, 492, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	493, 494, 495, 0, 447, 446, 496, 0, 0, 0,
	0, 448, 449, 497, 450, 451, 452, 1280, 0, 1141,
	1140, 0, 0, 0, 0, 1138, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 219, 220, 221, 454, 455, 222, 456, 223,
	224, 457, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 458, 459, 460, 0, 232, 461, 0, 1045,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 922, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 462, 463, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 464, 264, 265, 267, 270, 266,
	271, 272, 273, 465, 466, 0, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 467, 277, 278, 0, 279,
	0, 280, 0, 0, 923, 281, 282, 0, 283, 468,
	0, 469, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 1279, 471, 472, 925, 0, 476, 293, 0, 0,
	0, 0, 292, 294, 301, 0, 924, 295, 473, 297,
	296, 298, 299, 300, 474, 0, 475, 0, 302, 926,
	927, 303, 304, 305, 928, 306, 307, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 477, 929,
	315, 316, 930, 0, 317, 318, 0, 0, 319, 0,
	320, 321, 324, 322, 323, 325, 327, 328, 326, 931,
	329, 330, 332, 331, 0, 0, 932, 0, 478, 479,
	333, 334, 0, 335, 336, 337, 0, 0, 339, 340,
	0, 0, 341, 480, 933, 342, 934, 481, 343, 338,
	344, 345, 346, 347, 348, 349, 0, 350, 482, 351,
	483, 352, 0, 353, 0, 354, 355, 356, 357, 358,
	359, 484, 360, 361, 0, 362, 363, 364, 365, 366,
	0, 368, 369, 370, 367, 371, 372, 373, 374, 0,
	375, 935, 376, 377, 378, 379, 485, 380, 0, 381,
	385, 386, 387, 388, 389, 390, 391, 0, 398, 399,
	392, 394, 395, 396, 393, 397, 400, 401, 0, 402,
	382, 383, 403, 936, 404, 486, 405, 406, 0, 416,
	407, 408, 409, 384, 410, 414, 415, 411, 412, 413,
	487, 0, 418, 419, 417, 0, 420, 421, 422, 423,
	424, 268, 425, 269, 426, 0, 488, 489, 490, 427,
	0, 0, 428, 429, 491, 430, 492, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 493, 494,
	495, 0, 447, 446, 496, 0, 0, 0, 0, 448,
	449, 497, 450, 451, 452, 1276, 0, 1141, 1140, 0,
	0, 0, 0, 1138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	219, 220, 221, 454, 455, 222, 456, 223, 224, 457,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	458, 459, 460, 0, 232, 461, 0, 1045, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 922, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 462, 463, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 464, 264, 265, 267, 270, 266, 271, 272,
	273, 465, 466, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 467, 277, 278, 0, 279, 0, 280,
	0, 0, 923, 281, 282, 0, 283, 468, 0, 469,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 1275,
	471, 472, 925, 0, 476, 293, 0, 0, 0, 0,
	292, 294, 301, 0, 924, 295, 473, 297, 296, 298,
	299, 300, 474, 0, 475, 0, 302, 926, 927, 303,
	304, 305, 928, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 477, 929, 315, 316,
	930, 0, 317, 318, 0, 0, 319, 0, 320, 321,
	324, 322, 323, 325, 327, 328, 326, 931, 329, 330,
	332, 331, 0, 0, 932, 0, 478, 479, 333, 334,
	0, 335, 336, 337, 0, 0, 339, 340, 0, 0,
	341, 480, 933, 342, 934, 481, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 482, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 484,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 935,
	376, 377, 378, 379, 485, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 398, 399, 392, 394,
	395, 396, 393, 397, 400, 401, 0, 402, 382, 383,
	403, 936, 404, 486, 405, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 415, 411, 412, 413, 487, 0,
	418, 419, 417, 0, 420, 421, 422, 423, 424, 268,
	425, 269, 426, 0, 488, 489, 490, 427, 0, 0,
	428, 429, 491, 430, 492, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 493, 494, 495, 0,
	447, 446, 496, 0, 0, 0, 0, 448, 449, 497,
	450, 451, 452, 1214, 0, 1141, 1140, 0, 0, 0,
	0, 1138, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 219, 220,
	221, 454, 455, 222, 456, 223, 224, 457, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 458, 459,
	460, 0, 232, 461, 0, 1045, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 922, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	462, 463, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	464, 264, 265, 267, 270, 266, 271, 272, 273, 465,
	466, 0, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 467, 277, 278, 0, 279, 0, 280, 0, 0,
	923, 281, 282, 0, 283, 468, 0, 469, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 1213, 471, 472,
	925, 0, 476, 293, 0, 0, 0, 0, 292, 294,
	301, 0, 924, 295, 473, 297, 296, 298, 299, 300,
	474, 0, 475, 0, 302, 926, 927, 303, 304, 305,
	928, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 477, 929, 315, 316, 930, 0,
	317, 318, 0, 0, 319, 0, 320, 321, 324, 322,
	323, 325, 327, 328, 326, 931, 329, 330, 332, 331,
	0, 0, 932, 0, 478, 479, 333, 334, 0, 335,
	336, 337, 0, 0, 339, 340, 0, 0, 341, 480,
	933, 342, 934, 481, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 482, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 484, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 935, 376, 377,
	378, 379, 485, 380, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 0, 398, 399, 392, 394, 395, 396,
	393, 397, 400, 401, 0, 402, 382, 383, 403, 936,
	404, 486, 405, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 415, 411, 412, 413, 487, 0, 418, 419,
	417, 0, 420, 421, 422, 423, 424, 268, 425, 269,
	426, 0, 488, 489, 490, 427, 0, 0, 428, 429,
	491, 430, 492, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 493, 494, 495, 0, 447, 446,
	496, 0, 0, 0, 0, 448, 449, 497, 450, 451,
	452, 1211, 0, 1141, 1140, 0, 0, 0, 0, 1138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 219, 220, 221, 454,
	455, 222, 456, 223, 224, 457, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 458, 459, 460, 0,
	232, 461, 0, 1045, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 922, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 462, 463,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 464, 264,
	265, 267, 270, 266, 271, 272, 273, 465, 466, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 467,
	277, 278, 0, 279, 0, 280, 0, 0, 923, 281,
	282, 0, 283, 468, 0, 469, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 1210, 471, 472, 925, 0,
	476, 293, 0, 0, 0, 0, 292, 294, 301, 0,
	924, 295, 473, 297, 296, 298, 299, 300, 474, 0,
	475, 0, 302, 926, 927, 303, 304, 305, 928, 306,
	307, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 477, 929, 315, 316, 930, 0, 317, 318,
	0, 0, 319, 0, 320, 321, 324, 322, 323, 325,
	327, 328, 326, 931, 329, 330, 332, 331, 0, 0,
	932, 0, 478, 479, 333, 334, 0, 335, 336, 337,
	0, 0, 339, 340, 0, 0, 341, 480, 933, 342,
	934, 481, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 482, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 484, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 935, 376, 377, 378, 379,
	485, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 392, 394, 395, 396, 393, 397,
	400, 401, 0, 402, 382, 383, 403, 936, 404, 486,
	405, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	415, 411, 412, 413, 487, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 268, 425, 269, 426, 0,
	488, 489, 490, 427, 0, 0, 428, 429, 491, 430,
	492, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 493, 494, 495, 0, 447, 446, 496, 0,
	0, 0, 0, 448, 449, 497, 450, 451, 452, 1134,
	0, 1141, 1140, 0, 0, 0, 0, 1138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 219, 220, 221, 454, 455, 222,
	456, 223, 224, 457, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 458, 459, 460, 0, 232, 461,
	0, 1045, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	922, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 462, 463, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 464, 264, 265, 267,
	270, 266, 271, 272, 273, 465, 466, 0, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 467, 277, 278,
	0, 279, 0, 280, 0, 0, 923, 281, 282, 0,
	283, 468, 0, 469, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 1136, 471, 472, 925, 0, 476, 293,
	0, 0, 0, 0, 292, 294, 301, 0, 924, 295,
	473, 297, 296, 298, 299, 300, 474, 0, 475, 0,
	302, 926, 927, 303, 304, 305, 928, 306, 307, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	477, 929, 315, 316, 930, 0, 317, 318, 0, 0,
	319, 0, 320, 321, 324, 322, 323, 325, 327, 328,
	326, 931, 329, 330, 332, 331, 0, 0, 932, 0,
	478, 479, 333, 334, 0, 335, 336, 337, 0, 0,
	339, 340, 0, 0, 341, 480, 933, 342, 934, 481,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	482, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 484, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 935, 376, 377, 378, 379, 485, 380,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 0,
	398, 399, 392, 394, 395, 396, 393, 397, 400, 401,
	0, 402, 382, 383, 403, 936, 404, 486, 405, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 415, 411,
	412, 413, 487, 0, 418, 419, 417, 0, 420, 421,
	422, 423, 424, 268, 425, 269, 426, 0, 488, 489,
	490, 427, 0, 0, 428, 429, 491, 430, 492, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	493, 494, 495, 0, 447, 446, 496, 0, 0, 0,
	0, 448, 449, 497, 450, 451, 452, 1141, 1140, 0,
	0, 0, 0, 1138, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	219, 220, 221, 454, 455, 222, 456, 223, 224, 457,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	458, 459, 460, 0, 232, 461, 0, 1045, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 922, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 462, 463, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 464, 264, 265, 267, 270, 266, 271, 272,
	273, 465, 466, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 467, 277, 278, 0, 279, 0, 280,
	0, 0, 923, 281, 282, 0, 283, 468, 0, 469,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 470,
	471, 472, 925, 0, 476, 293, 0, 0, 0, 0,
	292, 294, 301, 0, 924, 295, 473, 297, 296, 298,
	299, 300, 474, 0, 475, 0, 302, 926, 927, 303,
	304, 305, 928, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 477, 929, 315, 316,
	930, 0, 317, 318, 0, 0, 319, 0, 320, 321,
	324, 322, 323, 325, 327, 328, 326, 931, 329, 330,
	332, 331, 0, 0, 932, 0, 478, 479, 333, 334,
	0, 335, 336, 337, 0, 0, 339, 340, 0, 0,
	341, 480, 933, 342, 934, 481, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 482, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 484,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 935,
	376, 377, 378, 379, 485, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 398, 399, 392, 394,
	395, 396, 393, 397, 400, 401, 0, 402, 382, 383,
	403, 936, 404, 486, 405, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 415, 411, 412, 413, 487, 0,
	418, 419, 417, 0, 420, 421, 422, 423, 424, 268,
	425, 269, 426, 0, 488, 489, 490, 427, 0, 0,
	428, 429, 491, 430, 492, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 493, 494, 495, 0,
	447, 446, 496, 1141, 1140, 0, 0, 448, 449, 497,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 219, 220, 221, 454,
	455, 222, 456, 223, 224, 457, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 458, 459, 460, 0,
	232, 461, 0, 1045, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 922, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 462, 463,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 464, 264,
	265, 267, 270, 266, 271, 272, 273, 465, 466, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 467,
	277, 278, 0, 279, 0, 280, 0, 0, 923, 281,
	282, 0, 283, 468, 0, 469, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 470, 471, 472, 925, 0,
	476, 293, 0, 0, 0, 0, 292, 294, 301, 0,
	924, 295, 473, 297, 296, 298, 299, 300, 474, 0,
	475, 0, 302, 926, 927, 303, 304, 305, 928, 306,
	307, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 477, 929, 315, 316, 930, 0, 317, 318,
	0, 0, 319, 0, 320, 321, 324, 322, 323, 325,
	327, 328, 326, 931, 329, 330, 332, 331, 0, 0,
	932, 0, 478, 479, 333, 334, 0, 335, 336, 337,
	0, 0, 339, 340, 0, 0, 341, 480, 933, 342,
	934, 481, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 482, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 484, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 935, 376, 377, 378, 379,
	485, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 392, 394, 395, 396, 393, 397,
	400, 401, 0, 402, 382, 383, 403, 936, 404, 486,
	405, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	415, 411, 412, 413, 487, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 268, 425, 269, 426, 0,
	488, 489, 490, 427, 0, 0, 428, 429, 491, 430,
	492, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 493, 494, 495, 1141, 447, 446, 496, 0,
	0, 0, 0, 448, 449, 497, 450, 451, 452, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 219, 220,
	221, 454, 455, 222, 456, 223, 224, 457, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 458, 459,
	460, 0, 232, 461, 0, 1045, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 922, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	462, 463, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	464, 264, 265, 267, 270, 266, 271, 272, 273, 465,
	466, 0, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 467, 277, 278, 0, 279, 0, 280, 0, 0,
	923, 281, 282, 0, 283, 468, 0, 469, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 470, 471, 472,
	925, 0, 476, 293, 0, 0, 0, 0, 292, 294,
	301, 0, 924, 295, 473, 297, 296, 298, 299, 300,
	474, 0, 475, 0, 302, 926, 927, 303, 304, 305,
	928, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 477, 929, 315, 316, 930, 0,
	317, 318, 0, 0, 319, 0, 320, 321, 324, 322,
	323, 325, 327, 328, 326, 931, 329, 330, 332, 331,
	0, 0, 932, 0, 478, 479, 333, 334, 0, 335,
	336, 337, 0, 0, 339, 340, 0, 0, 341, 480,
	933, 342, 934, 481, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 482, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 484, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 935, 376, 377,
	378, 379, 485, 380, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 0, 398, 399, 392, 394, 395, 396,
	393, 397, 400, 401, 0, 402, 382, 383, 403, 936,
	404, 486, 405, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 415, 411, 412, 413, 487, 0, 418, 419,
	417, 0, 420, 421, 422, 423, 424, 268, 425, 269,
	426, 0, 488, 489, 490, 427, 0, 0, 428, 429,
	491, 430, 492, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 493, 494, 495, 207, 447, 446,
	496, 0, 0, 0, 0, 448, 449, 497, 450, 451,
	452, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	219, 220, 221, 454, 455, 222, 456, 223, 224, 457,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	458, 459, 460, 2148, 232, 461, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 2145,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 462, 463, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 464, 264, 265, 267, 270, 266, 271, 272,
	273, 465, 466, 0, 2288, 0, 0, 0, 0, 0,
	274, 275, 276, 467, 277, 278, 0, 279, 0, 280,
	2151, 0, 0, 281, 282, 0, 283, 468, 0, 469,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 470,
	471, 472, 0, 0, 476, 293, 0, 0, 0, 2285,
	292, 294, 301, 0, 0, 295, 473, 297, 296, 298,
	299, 300, 474, 0, 475, 0, 2287, 0, 0, 303,
	304, 305, 0, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 477, 0, 315, 316,
	2284, 0, 317, 318, 0, 0, 319, 0, 320, 321,
	324, 322, 323, 325, 327, 328, 326, 0, 329, 330,
	332, 331, 0, 0, 0, 0, 478, 479, 333, 334,
	0, 335, 336, 337, 0, 0, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 482, 351, 483, 352,
	2150, 353, 0, 354, 355, 356, 357, 358, 359, 484,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 0,
	376, 377, 378, 379, 485, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 398, 399, 392, 394,
	395, 396, 393, 397, 400, 401, 0, 402, 382, 383,
	403, 0, 404, 486, 405, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 415, 411, 412, 413, 487, 0,
	418, 419, 417, 0, 420, 421, 422, 423, 424, 268,
	425, 269, 426, 0, 488, 489, 490, 427, 0, 0,
	428, 429, 491, 430, 492, 0, 431, 432, 433, 0,
	434, 435, 0, 2286, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 493, 494, 495, 207,
	447, 446, 496, 0, 0, 0, 0, 448, 449, 497,
	450, 451, 452, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 219, 220, 221, 454, 455, 222, 456, 223,
	224, 457, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 458, 459, 460, 2148, 232, 461, 0, 0,
	2142, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 2145, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 462, 463, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 464, 264, 265, 267, 270, 266,
	271, 272, 273, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 467, 277, 278, 0, 279,
	0, 280, 2151, 0, 0, 281, 282, 0, 283, 468,
	0, 469, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 2141, 471, 472, 0, 0, 476, 293, 0, 0,
	0, 0, 292, 294, 301, 0, 0, 295, 473, 297,
	296, 298, 299, 300, 474, 0, 475, 0, 302, 0,
	0, 303, 304, 305, 0, 306, 307, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 477, 0,
	315, 316, 0, 0, 317, 318, 0, 0, 319, 0,
	320, 321, 324, 322, 323, 325, 327, 328, 326, 0,
	329, 330, 332, 331, 0, 0, 0, 0, 478, 479,
	333, 334, 0, 335, 336, 337, 0, 0, 339, 340,
	0, 0, 341, 480, 0, 342, 0, 481, 343, 338,
	344, 345, 346, 347, 348, 349, 0, 350, 482, 351,
	483, 352, 2150, 353, 0, 354, 355, 356, 357, 358,
	359, 484, 360, 361, 0, 362, 363, 364, 365, 366,
	0, 368, 369, 370, 367, 371, 372, 373, 374, 0,
	375, 0, 376, 377, 378, 379, 485, 380, 0, 381,
	385, 386, 387, 388, 389, 390, 391, 0, 398, 399,
	392, 394, 395, 396, 393, 397, 400, 401, 0, 402,
	382, 383, 403, 0, 404, 486, 405, 406, 0, 416,
	407, 408, 409, 384, 410, 414, 415, 411, 412, 413,
	487, 0, 418, 419, 417, 0, 420, 421, 422, 423,
	424, 268, 425, 269, 426, 0, 488, 489, 490, 427,
	0, 0, 428, 429, 491, 430, 492, 0, 431, 432,
	433, 0, 434, 435, 0, 2149, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 493, 494,
	495, 0, 447, 446, 496, 1353, 0, 207, 0, 448,
	449, 497, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	219, 220, 221, 454, 455, 222, 456, 223, 224, 457,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	458, 459, 460, 0, 232, 461, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 462, 463, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 464, 264, 265, 267, 270, 266, 271, 272,
	273, 465, 466, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 467, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 468, 0, 469,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 470,
	471, 472, 0, 0, 476, 293, 0, 0, 0, 211,
	292, 294, 301, 0, 0, 295, 473, 297, 296, 298,
	299, 300, 474, 0, 475, 0, 302, 0, 0, 303,
	304, 305, 0, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 477, 0, 315, 316,
	0, 0, 317, 318, 0, 0, 319, 0, 320, 321,
	324, 322, 323, 325, 327, 328, 326, 0, 329, 330,
	332, 331, 0, 212, 0, 0, 478, 479, 333, 334,
	0, 335, 336, 337, 0, 0, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 482, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 484,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 0,
	376, 377, 378, 379, 485, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 1356, 399, 392, 394,
	395, 396, 393, 397, 400, 401, 0, 402, 382, 383,
	403, 0, 404, 486, 405, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 415, 411, 412, 413, 487, 0,
	418, 419, 417, 1354, 420, 421, 422, 423, 424, 268,
	425, 269, 426, 0, 488, 489, 490, 427, 0, 0,
	428, 429, 491, 430, 492, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 493, 494, 495, 0,
	1355, 446, 496, 1129, 0, 207, 0, 448, 449, 497,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 219, 220,
	221, 454, 455, 222, 456, 223, 224, 457, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 458, 459,
	460, 0, 232, 461, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	462, 463, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	464, 264, 265, 267, 270, 266, 271, 272, 273, 465,
	466, 0, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 467, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 468, 0, 469, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 1131, 471, 472,
	0, 0, 476, 293, 0, 0, 0, 211, 292, 294,
	301, 0, 0, 295, 473, 297, 296, 298, 299, 300,
	474, 0, 475, 0, 302, 0, 0, 303, 304, 305,
	0, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 477, 0, 315, 316, 0, 0,
	317, 318, 0, 0, 319, 0, 320, 321, 324, 322,
	323, 325, 327, 328, 326, 0, 329, 330, 332, 331,
	0, 212, 0, 0, 478, 479, 333, 334, 0, 335,
	336, 337, 0, 977, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 482, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 484, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 0, 376, 377,
	378, 379, 485, 380, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 0, 398, 399, 392, 394, 395, 396,
	393, 397, 400, 401, 0, 402, 382, 383, 403, 0,
	404, 486, 405, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 415, 411, 412, 413, 487, 0, 418, 419,
	417, 0, 420, 421, 422, 423, 424, 268, 425, 269,
	426, 0, 488, 489, 490, 427, 0, 0, 428, 429,
	491, 430, 492, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 493, 494, 495, 0, 447, 446,
	496, 1126, 0, 207, 0, 448, 449, 497, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 219, 220, 221, 454,
	455, 222, 456, 223, 224, 457, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 458, 459, 460, 0,
	232, 461, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 462, 463,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 464, 264,
	265, 267, 270, 266, 271, 272, 273, 465, 466, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 467,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 468, 0, 469, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 1128, 471, 472, 0, 0,
	476, 293, 0, 0, 0, 211, 292, 294, 301, 0,
	0, 295, 473, 297, 296, 298, 299, 300, 474, 0,
	475, 0, 302, 0, 0, 303, 304, 305, 0, 306,
	307, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 477, 0, 315, 316, 0, 0, 317, 318,
	0, 0, 319, 0, 320, 321, 324, 322, 323, 325,
	327, 328, 326, 0, 329, 330, 332, 331, 0, 212,
	0, 0, 478, 479, 333, 334, 0, 335, 336, 337,
	0, 977, 339, 340, 0, 0, 341, 480, 0, 342,
	0, 481, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 482, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 484, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 0, 376, 377, 378, 379,
	485, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 392, 394, 395, 396, 393, 397,
	400, 401, 0, 402, 382, 383, 403, 0, 404, 486,
	405, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	415, 411, 412, 413, 487, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 268, 425, 269, 426, 0,
	488, 489, 490, 427, 0, 0, 428, 429, 491, 430,
	492, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 493, 494, 495, 0, 447, 446, 496, 1033,
	0, 207, 0, 448, 449, 497, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 219, 220, 221, 454, 455, 222,
	456, 223, 224, 457, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 458, 459, 460, 0, 232, 461,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 462, 463, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 464, 264, 265, 267,
	270, 266, 271, 272, 273, 465, 466, 0, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 467, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 468, 0, 469, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 1035, 471, 472, 0, 0, 476, 293,
	0, 0, 0, 211, 292, 294, 301, 0, 0, 295,
	473, 297, 296, 298, 299, 300, 474, 0, 475, 0,
	302, 0, 0, 303, 304, 305, 0, 306, 307, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	477, 0, 315, 316, 0, 0, 317, 318, 0, 0,
	319, 0, 320, 321, 324, 322, 323, 325, 327, 328,
	326, 0, 329, 330, 332, 331, 0, 212, 0, 0,
	478, 479, 333, 334, 0, 335, 336, 337, 0, 977,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	482, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 484, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 0, 376, 377, 378, 379, 485, 380,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 0,
	398, 399, 392, 394, 395, 396, 393, 397, 400, 401,
	0, 402, 382, 383, 403, 0, 404, 486, 405, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 415, 411,
	412, 413, 487, 0, 418, 419, 417, 0, 420, 421,
	422, 423, 424, 268, 425, 269, 426, 0, 488, 489,
	490, 427, 0, 0, 428, 429, 491, 430, 492, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	493, 494, 495, 0, 447, 446, 496, 528, 0, 207,
	0, 448, 449, 497, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 527,
	217, 517, 218, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 219, 220, 221, 454, 455, 222, 456, 223,
	224, 457, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 458, 459, 460, 0, 232, 461, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 520, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 462, 463, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 464, 264, 265, 267, 270, 266,
	271, 272, 273, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 467, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 521, 283, 468,
	0, 469, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 470, 471, 472, 0, 0, 476, 293, 0, 0,
	0, 0, 292, 294, 301, 0, 0, 295, 473, 297,
	296, 298, 299, 300, 474, 0, 475, 0, 302, 0,
	0, 303, 304, 305, 0, 306, 307, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 477, 0,
	315, 316, 0, 0, 317, 318, 0, 0, 319, 0,
	320, 321, 324, 322, 323, 325, 327, 328, 326, 0,
	329, 330, 332, 331, 0, 0, 0, 0, 478, 479,
	333, 334, 0, 335, 336, 337, 0, 0, 339, 340,
	0, 0, 341, 480, 0, 342, 0, 481, 343, 338,
	344, 345, 346, 347, 348, 349, 0, 350, 482, 351,
	483, 352, 0, 353, 0, 354, 355, 356, 357, 358,
	359, 484, 360, 361, 0, 362, 363, 364, 365, 366,
	0, 368, 369, 370, 367, 371, 372, 373, 374, 0,
	375, 0, 376, 377, 378, 379, 485, 380, 0, 381,
	385, 386, 387, 388, 389, 390, 391, 522, 398, 399,
	392, 394, 395, 396, 393, 397, 400, 401, 0, 402,
	382, 383, 403, 0, 404, 486, 405, 406, 0, 416,
	407, 408, 409, 384, 410, 414, 415, 411, 412, 413,
	487, 0, 418, 419, 417, 0, 420, 421, 422, 423,
	424, 268, 425, 269, 426, 0, 488, 489, 490, 427,
	0, 0, 428, 429, 491, 430, 492, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 493, 494,
	495, 0, 447, 446, 496, 516, 0, 207, 0, 448,
	449, 497, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 517,
	218, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	219, 220, 221, 454, 455, 222, 456, 223, 224, 457,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	458, 459, 460, 0, 232, 461, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 520, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 462, 463, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 464, 264, 265, 267, 270, 266, 271, 272,
	273, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 467, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 521, 283, 468, 0, 469,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 470,
	471, 472, 0, 0, 476, 293, 0, 0, 0, 0,
	292, 294, 301, 0, 0, 295, 473, 297, 296, 298,
	299, 300, 474, 0, 475, 0, 302, 0, 0, 303,
	304, 305, 0, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 477, 0, 315, 316,
	0, 0, 317, 318, 0, 0, 319, 0, 320, 321,
	324, 322, 323, 325, 327, 328, 326, 0, 329, 330,
	332, 331, 0, 0, 0, 0, 478, 479, 333, 334,
	0, 335, 336, 337, 0, 0, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 482, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 484,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 0,
	376, 377, 378, 379, 485, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 522, 398, 399, 392, 394,
	395, 396, 393, 397, 400, 401, 0, 402, 382, 383,
	403, 0, 404, 486, 405, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 415, 411, 412, 413, 487, 0,
	418, 419, 417, 0, 420, 421, 422, 423, 424, 268,
	425, 269, 426, 0, 488, 489, 490, 427, 0, 0,
	428, 429, 491, 430, 492, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 493, 494, 495, 207,
	447, 446, 496, 0, 0, 0, 0, 448, 449, 497,
	450, 451, 452, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 219, 220, 221, 454, 455, 222, 456, 223,
	224, 457, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 458, 459, 460, 0, 232, 461, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 462, 463, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 464, 264, 265, 267, 270, 266,
	271, 272, 273, 465, 466, 0, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 467, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 468,
	0, 469, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 470, 471, 472, 0, 0, 476, 293, 0, 0,
	0, 211, 292, 294, 301, 0, 0, 295, 473, 297,
	296, 298, 299, 300, 474, 0, 475, 0, 302, 0,
	0, 303, 304, 305, 0, 306, 307, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 477, 0,
	315, 316, 0, 0, 317, 318, 0, 0, 319, 0,
	320, 321, 324, 322, 323, 325, 327, 328, 326, 0,
	329, 330, 332, 331, 0, 212, 0, 0, 478, 479,
	333, 334, 0, 335, 336, 337, 0, 977, 339, 340,
	0, 0, 341, 480, 0, 342, 0, 481, 343, 338,
	344, 345, 346, 347, 348, 349, 0, 350, 482, 351,
	483, 352, 0, 353, 0, 354, 355, 356, 357, 358,
	359, 484, 360, 361, 0, 362, 363, 364, 365, 366,
	0, 368, 369, 370, 367, 371, 372, 373, 374, 0,
	375, 0, 376, 377, 378, 379, 485, 380, 0, 381,
	385, 386, 387, 388, 389, 390, 391, 0, 398, 399,
	392, 394, 395, 396, 393, 397, 400, 401, 0, 402,
	382, 383, 403, 0, 404, 486, 405, 406, 0, 416,
	407, 408, 409, 384, 410, 414, 415, 411, 412, 413,
	487, 0, 418, 419, 417, 0, 420, 421, 422, 423,
	424, 268, 425, 269, 426, 0, 488, 489, 490, 427,
	0, 0, 428, 429, 491, 430, 492, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 493, 494,
	495, 0, 447, 446, 496, 2219, 0, 207, 0, 448,
	449, 497, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	219, 220, 221, 454, 455, 222, 456, 223, 224, 457,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	458, 459, 460, 0, 232, 461, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 462, 463, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 464, 264, 265, 267, 270, 266, 271, 272,
	273, 465, 466, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 467, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 468, 0, 469,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 470,
	471, 472, 0, 0, 476, 293, 0, 0, 0, 211,
	292, 294, 301, 0, 0, 295, 473, 297, 296, 298,
	299, 300, 474, 0, 475, 0, 302, 0, 0, 303,
	304, 305, 0, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 477, 0, 315, 316,
	0, 0, 317, 318, 0, 0, 319, 0, 320, 321,
	324, 322, 323, 325, 327, 328, 326, 0, 329, 330,
	332, 331, 0, 212, 0, 0, 478, 479, 333, 334,
	0, 335, 336, 337, 0, 0, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 482, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 484,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 0,
	376, 377, 378, 379, 485, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 398, 399, 392, 394,
	395, 396, 393, 397, 400, 401, 0, 402, 382, 383,
	403, 0, 404, 486, 405, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 415, 411, 412, 413, 487, 0,
	418, 419, 417, 0, 420, 421, 422, 423, 424, 268,
	425, 269, 426, 0, 488, 489, 490, 427, 0, 0,
	428, 429, 491, 430, 492, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 493, 494, 495, 0,
	447, 446, 496, 1816, 0, 207, 0, 448, 449, 497,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 219, 220,
	221, 454, 455, 222, 456, 223, 224, 457, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 458, 459,
	460, 0, 232, 461, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	462, 463, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	464, 264, 265, 267, 270, 266, 271, 272, 273, 465,
	466, 0, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 467, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 468, 0, 469, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 470, 471, 472,
	0, 0, 476, 293, 0, 0, 0, 211, 292, 294,
	301, 0, 0, 295, 473, 297, 296, 298, 299, 300,
	474, 0, 475, 0, 302, 0, 0, 303, 304, 305,
	0, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 477, 0, 315, 316, 0, 0,
	317, 318, 0, 0, 319, 0, 320, 321, 324, 322,
	323, 325, 327, 328, 326, 0, 329, 330, 332, 331,
	0, 212, 0, 0, 478, 479, 333, 334, 0, 335,
	336, 337, 0, 0, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 482, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 484, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 0, 376, 377,
	378, 379, 485, 380, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 0, 398, 399, 392, 394, 395, 396,
	393, 397, 400, 401, 0, 402, 382, 383, 403, 0,
	404, 486, 405, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 415, 411, 412, 413, 487, 0, 418, 419,
	417, 0, 420, 421, 422, 423, 424, 268, 425, 269,
	426, 0, 488, 489, 490, 427, 0, 0, 428, 429,
	491, 430, 492, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 493, 494, 495, 207, 447, 446,
	496, 0, 0, 0, 0, 448, 449, 497, 450, 451,
	452, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	219, 220, 221, 454, 455, 222, 456, 223, 224, 457,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	458, 459, 460, 0, 232, 461, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 462, 463, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 464, 264, 265, 267, 270, 266, 271, 272,
	273, 465, 466, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 467, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 468, 0, 469,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 470,
	471, 472, 0, 0, 476, 293, 0, 0, 0, 211,
	292, 294, 301, 0, 0, 295, 473, 297, 296, 298,
	299, 300, 474, 0, 475, 0, 302, 0, 0, 303,
	304, 305, 0, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 477, 0, 315, 316,
	0, 0, 317, 318, 0, 0, 319, 0, 320, 321,
	324, 322, 323, 325, 327, 328, 326, 0, 329, 330,
	332, 331, 0, 212, 0, 0, 478, 479, 333, 334,
	0, 335, 336, 337, 0, 0, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 482, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 484,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 0,
	376, 377, 378, 379, 485, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 398, 399, 392, 394,
	395, 396, 393, 397, 400, 401, 0, 402, 382, 383,
	403, 0, 404, 486, 405, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 415, 411, 412, 413, 487, 0,
	418, 419, 417, 1755, 420, 421, 422, 423, 424, 268,
	425, 269, 426, 0, 488, 489, 490, 427, 0, 0,
	428, 429, 491, 430, 492, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 493, 494, 495, 0,
	447, 446, 496, 1749, 0, 207, 0, 448, 449, 497,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 219, 220,
	221, 454, 455, 222, 456, 223, 224, 457, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 458, 459,
	460, 0, 232, 461, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	462, 463, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	464, 264, 265, 267, 270, 266, 271, 272, 273, 465,
	466, 0, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 467, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 468, 0, 469, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 1748, 471, 472,
	0, 0, 476, 293, 0, 0, 0, 211, 292, 294,
	301, 0, 0, 295, 473, 297, 296, 298, 299, 300,
	474, 0, 475, 0, 302, 0, 0, 303, 304, 305,
	0, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 477, 0, 315, 316, 0, 0,
	317, 318, 0, 0, 319, 0, 320, 321, 324, 322,
	323, 325, 327, 328, 326, 0, 329, 330, 332, 331,
	0, 212, 0, 0, 478, 479, 333, 334, 0, 335,
	336, 337, 0, 0, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 482, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 484, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 0, 376, 377,
	378, 379, 485, 380, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 0, 398, 399, 392, 394, 395, 396,
	393, 397, 400, 401, 0, 402, 382, 383, 403, 0,
	404, 486, 405, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 415, 411, 412, 413, 487, 0, 418, 419,
	417, 0, 420, 421, 422, 423, 424, 268, 425, 269,
	426, 0, 488, 489, 490, 427, 0, 0, 428, 429,
	491, 430, 492, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 493, 494, 495, 0, 447, 446,
	496, 1744, 0, 207, 0, 448, 449, 497, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 219, 220, 221, 454,
	455, 222, 456, 223, 224, 457, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 458, 459, 460, 0,
	232, 461, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 462, 463,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 464, 264,
	265, 267, 270, 266, 271, 272, 273, 465, 466, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 467,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 468, 0, 469, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 1746, 471, 472, 0, 0,
	476, 293, 0, 0, 0, 211, 292, 294, 301, 0,
	0, 295, 473, 297, 296, 298, 299, 300, 474, 0,
	475, 0, 302, 0, 0, 303, 304, 305, 0, 306,
	307, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 477, 0, 315, 316, 0, 0, 317, 318,
	0, 0, 319, 0, 320, 321, 324, 322, 323, 325,
	327, 328, 326, 0, 329, 330, 332, 331, 0, 212,
	0, 0, 478, 479, 333, 334, 0, 335, 336, 337,
	0, 0, 339, 340, 0, 0, 341, 480, 0, 342,
	0, 481, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 482, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 484, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 0, 376, 377, 378, 379,
	485, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 392, 394, 395, 396, 393, 397,
	400, 401, 0, 402, 382, 383, 403, 0, 404, 486,
	405, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	415, 411, 412, 413, 487, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 268, 425, 269, 426, 0,
	488, 489, 490, 427, 0, 0, 428, 429, 491, 430,
	492, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 493, 494, 495, 0, 447, 446, 496, 1269,
	0, 207, 0, 448, 449, 497, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 219, 220, 221, 454, 455, 222,
	456, 223, 224, 457, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 458, 459, 460, 0, 232, 461,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 462, 463, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 464, 264, 265, 267,
	270, 266, 271, 272, 273, 465, 466, 0, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 467, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 468, 0, 469, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 1268, 471, 472, 0, 0, 476, 293,
	0, 0, 0, 211, 292, 294, 301, 0, 0, 295,
	473, 297, 296, 298, 299, 300, 474, 0, 475, 0,
	302, 0, 0, 303, 304, 305, 0, 306, 307, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	477, 0, 315, 316, 0, 0, 317, 318, 0, 0,
	319, 0, 320, 321, 324, 322, 323, 325, 327, 328,
	326, 0, 329, 330, 332, 331, 0, 212, 0, 0,
	478, 479, 333, 334, 0, 335, 336, 337, 0, 0,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	482, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 484, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 0, 376, 377, 378, 379, 485, 380,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 0,
	398, 399, 392, 394, 395, 396, 393, 397, 400, 401,
	0, 402, 382, 383, 403, 0, 404, 486, 405, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 415, 411,
	412, 413, 487, 0, 418, 419, 417, 0, 420, 421,
	422, 423, 424, 268, 425, 269, 426, 0, 488, 489,
	490, 427, 0, 0, 428, 429, 491, 430, 492, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	493, 494, 495, 0, 447, 446, 496, 1266, 0, 207,
	0, 448, 449, 497, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 219, 220, 221, 454, 455, 222, 456, 223,
	224, 457, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 458, 459, 460, 0, 232, 461, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 462, 463, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 464, 264, 265, 267, 270, 266,
	271, 272, 273, 465, 466, 0, 210, 0, 0, 0,
	0, 0, 274, 275, 276, 467, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 468,
	0, 469, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 1265, 471, 472, 0, 0, 476, 293, 0, 0,
	0, 211, 292, 294, 301, 0, 0, 295, 473, 297,
	296, 298, 299, 300, 474, 0, 475, 0, 302, 0,
	0, 303, 304, 305, 0, 306, 307, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 477, 0,
	315, 316, 0, 0, 317, 318, 0, 0, 319, 0,
	320, 321, 324, 322, 323, 325, 327, 328, 326, 0,
	329, 330, 332, 331, 0, 212, 0, 0, 478, 479,
	333, 334, 0, 335, 336, 337, 0, 0, 339, 340,
	0, 0, 341, 480, 0, 342, 0, 481, 343, 338,
	344, 345, 346, 347, 348, 349, 0, 350, 482, 351,
	483, 352, 0, 353, 0, 354, 355, 356, 357, 358,
	359, 484, 360, 361, 0, 362, 363, 364, 365, 366,
	0, 368, 369, 370, 367, 371, 372, 373, 374, 0,
	375, 0, 376, 377, 378, 379, 485, 380, 0, 381,
	385, 386, 387, 388, 389, 390, 391, 0, 398, 399,
	392, 394, 395, 396, 393, 397, 400, 401, 0, 402,
	382, 383, 403, 0, 404, 486, 405, 406, 0, 416,
	407, 408, 409, 384, 410, 414, 415, 411, 412, 413,
	487, 0, 418, 419, 417, 0, 420, 421, 422, 423,
	424, 268, 425, 269, 426, 0, 488, 489, 490, 427,
	0, 0, 428, 429, 491, 430, 492, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 493, 494,
	495, 0, 447, 446, 496, 1263, 0, 207, 0, 448,
	449, 497, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	219, 220, 221, 454, 455, 222, 456, 223, 224, 457,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	458, 459, 460, 0, 232, 461, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 462, 463, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 464, 264, 265, 267, 270, 266, 271, 272,
	273, 465, 466, 0, 210, 0, 0, 0, 0, 0,
	274, 275, 276, 467, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 468, 0, 469,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 1262,
	471, 472, 0, 0, 476, 293, 0, 0, 0, 211,
	292, 294, 301, 0, 0, 295, 473, 297, 296, 298,
	299, 300, 474, 0, 475, 0, 302, 0, 0, 303,
	304, 305, 0, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 477, 0, 315, 316,
	0, 0, 317, 318, 0, 0, 319, 0, 320, 321,
	324, 322, 323, 325, 327, 328, 326, 0, 329, 330,
	332, 331, 0, 212, 0, 0, 478, 479, 333, 334,
	0, 335, 336, 337, 0, 0, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 482, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 484,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 0,
	376, 377, 378, 379, 485, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 398, 399, 392, 394,
	395, 396, 393, 397, 400, 401, 0, 402, 382, 383,
	403, 0, 404, 486, 405, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 415, 411, 412, 413, 487, 0,
	418, 419, 417, 0, 420, 421, 422, 423, 424, 268,
	425, 269, 426, 0, 488, 489, 490, 427, 0, 0,
	428, 429, 491, 430, 492, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 493, 494, 495, 0,
	447, 446, 496, 1259, 0, 207, 0, 448, 449, 497,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 219, 220,
	221, 454, 455, 222, 456, 223, 224, 457, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 458, 459,
	460, 0, 232, 461, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	462, 463, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	464, 264, 265, 267, 270, 266, 271, 272, 273, 465,
	466, 0, 210, 0, 0, 0, 0, 0, 274, 275,
	276, 467, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 468, 0, 469, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 1258, 471, 472,
	0, 0, 476, 293, 0, 0, 0, 211, 292, 294,
	301, 0, 0, 295, 473, 297, 296, 298, 299, 300,
	474, 0, 475, 0, 302, 0, 0, 303, 304, 305,
	0, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 477, 0, 315, 316, 0, 0,
	317, 318, 0, 0, 319, 0, 320, 321, 324, 322,
	323, 325, 327, 328, 326, 0, 329, 330, 332, 331,
	0, 212, 0, 0, 478, 479, 333, 334, 0, 335,
	336, 337, 0, 0, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 482, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 484, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 0, 376, 377,
	378, 379, 485, 380, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 0, 398, 399, 392, 394, 395, 396,
	393, 397, 400, 401, 0, 402, 382, 383, 403, 0,
	404, 486, 405, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 415, 411, 412, 413, 487, 0, 418, 419,
	417, 0, 420, 421, 422, 423, 424, 268, 425, 269,
	426, 0, 488, 489, 490, 427, 0, 0, 428, 429,
	491, 430, 492, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 493, 494, 495, 0, 447, 446,
	496, 1234, 0, 207, 0, 448, 449, 497, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 219, 220, 221, 454,
	455, 222, 456, 223, 224, 457, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 458, 459, 460, 0,
	232, 461, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 462, 463,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 464, 264,
	265, 267, 270, 266, 271, 272, 273, 465, 466, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 467,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 468, 0, 469, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 470, 471, 472, 0, 0,
	476, 293, 0, 0, 0, 211, 292, 294, 301, 0,
	0, 295, 473, 297, 296, 298, 299, 300, 474, 0,
	475, 0, 302, 0, 0, 303, 304, 305, 0, 306,
	307, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 477, 0, 315, 316, 0, 0, 317, 318,
	0, 0, 319, 0, 320, 321, 324, 322, 323, 325,
	327, 328, 326, 0, 329, 330, 332, 331, 0, 212,
	0, 0, 478, 479, 333, 334, 0, 335, 336, 337,
	0, 0, 339, 340, 0, 0, 341, 480, 0, 342,
	0, 481, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 482, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 484, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 0, 376, 377, 378, 379,
	485, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 392, 394, 395, 396, 393, 397,
	400, 401, 0, 402, 382, 383, 403, 0, 404, 486,
	405, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	415, 411, 412, 413, 487, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 268, 425, 269, 426, 0,
	488, 489, 490, 427, 0, 0, 428, 429, 491, 430,
	492, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 493, 494, 495, 0, 447, 446, 496, 1151,
	0, 207, 0, 448, 449, 497, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 219, 220, 221, 454, 455, 222,
	456, 223, 224, 457, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 458, 459, 460, 0, 232, 461,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 462, 463, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 464, 264, 265, 267,
	270, 266, 271, 272, 273, 465, 466, 0, 210, 0,
	0, 0, 0, 0, 274, 275, 276, 467, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 468, 0, 469, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 1153, 471, 472, 0, 0, 476, 293,
	0, 0, 0, 211, 292, 294, 301, 0, 0, 295,
	473, 297, 296, 298, 299, 300, 474, 0, 475, 0,
	302, 0, 0, 303, 304, 305, 0, 306, 307, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	477, 0, 315, 316, 0, 0, 317, 318, 0, 0,
	319, 0, 320, 321, 324, 322, 323, 325, 327, 328,
	326, 0, 329, 330, 332, 331, 0, 212, 0, 0,
	478, 479, 333, 334, 0, 335, 336, 337, 0, 0,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	482, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 484, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 0, 376, 377, 378, 379, 485, 380,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 0,
	398, 399, 392, 394, 395, 396, 393, 397, 400, 401,
	0, 402, 382, 383, 403, 0, 404, 486, 405, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 415, 411,
	412, 413, 487, 0, 418, 419, 417, 0, 420, 421,
	422, 423, 424, 268, 425, 269, 426, 0, 488, 489,
	490, 427, 0, 0, 428, 429, 491, 430, 492, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	493, 494, 495, 207, 447, 446, 496, 0, 0, 0,
	0, 448, 449, 497, 450, 451, 452, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 219, 220, 221, 454,
	455, 222, 456, 223, 224, 457, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 458, 459, 460, 0,
	232, 461, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 462, 463,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 464, 264,
	265, 267, 270, 266, 271, 272, 273, 465, 466, 0,
	210, 0, 0, 0, 0, 0, 274, 275, 276, 467,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 468, 0, 469, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 470, 471, 472, 0, 0,
	476, 293, 0, 0, 0, 211, 292, 294, 301, 0,
	0, 295, 473, 297, 296, 298, 299, 300, 474, 0,
	475, 0, 302, 0, 0, 303, 304, 305, 0, 306,
	307, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 477, 0, 315, 316, 0, 0, 317, 318,
	0, 0, 319, 0, 320, 321, 324, 322, 323, 325,
	327, 328, 326, 0, 329, 330, 332, 331, 0, 212,
	0, 0, 478, 479, 333, 334, 0, 335, 336, 337,
	0, 0, 339, 340, 0, 0, 341, 480, 0, 342,
	0, 481, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 482, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 484, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 0, 376, 377, 378, 379,
	485, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 392, 394, 395, 396, 393, 397,
	400, 401, 0, 402, 382, 383, 403, 0, 404, 486,
	405, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	415, 411, 412, 413, 487, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 268, 425, 269, 426, 0,
	488, 489, 490, 427, 0, 0, 428, 429, 491, 430,
	492, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 493, 494, 495, 207, 447, 446, 496, 0,
	0, 0, 0, 448, 449, 497, 450, 451, 452, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 219, 220,
	221, 454, 455, 222, 456, 223, 224, 457, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 458, 459,
	460, 0, 232, 461, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 520, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	462, 463, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	464, 264, 265, 267, 270, 266, 271, 272, 273, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 467, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 521, 283, 468, 0, 469, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 470, 471, 472,
	0, 0, 476, 293, 0, 0, 0, 0, 292, 294,
	301, 0, 0, 295, 473, 297, 296, 298, 299, 300,
	474, 0, 475, 0, 302, 0, 0, 303, 304, 305,
	0, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 477, 0, 315, 316, 0, 0,
	317, 318, 0, 0, 319, 0, 320, 321, 324, 322,
	323, 325, 327, 328, 326, 0, 329, 330, 332, 331,
	0, 0, 0, 0, 478, 479, 333, 334, 0, 335,
	336, 337, 0, 0, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 482, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 484, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 0, 376, 377,
	378, 379, 485, 380, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 522, 398, 399, 392, 394, 395, 396,
	393, 397, 400, 401, 0, 402, 382, 383, 403, 0,
	404, 486, 405, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 415, 411, 412, 413, 487, 0, 418, 419,
	417, 0, 420, 421, 422, 423, 424, 268, 425, 269,
	426, 0, 488, 489, 490, 427, 0, 0, 428, 429,
	491, 430, 492, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 493, 494, 495, 0, 447, 446,
	496, 666, 0, 207, 0, 448, 449, 497, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 219, 220, 221, 454,
	455, 222, 456, 223, 224, 457, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 458, 459, 460, 0,
	232, 461, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 462, 463,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 464, 264,
	265, 267, 270, 266, 271, 272, 273, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 467,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 468, 0, 469, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 470, 471, 472, 0, 0,
	476, 293, 0, 0, 0, 0, 292, 294, 301, 0,
	0, 295, 473, 297, 296, 298, 299, 300, 474, 0,
	475, 0, 302, 0, 0, 303, 304, 305, 0, 306,
	307, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 477, 0, 315, 316, 0, 0, 317, 318,
	0, 0, 319, 0, 320, 321, 324, 322, 323, 325,
	327, 328, 326, 0, 329, 330, 332, 331, 0, 0,
	0, 0, 478, 479, 333, 334, 0, 335, 336, 337,
	0, 0, 339, 340, 0, 0, 341, 480, 0, 342,
	0, 481, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 482, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 484, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 0, 376, 377, 378, 379,
	485, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 392, 394, 395, 396, 393, 397,
	400, 401, 0, 402, 382, 383, 403, 0, 404, 486,
	405, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	415, 411, 412, 413, 487, 0, 418, 419, 417, 665,
	420, 421, 422, 423, 424, 268, 425, 269, 426, 0,
	488, 489, 490, 427, 0, 0, 428, 429, 491, 430,
	492, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 493, 494, 495, 0, 447, 446, 496, 505,
	0, 207, 0, 448, 449, 497, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 504, 218, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 219, 220, 221, 454, 455, 222,
	456, 223, 224, 457, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 458, 459, 460, 0, 232, 461,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 462, 463, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 464, 264, 265, 267,
	270, 266, 271, 272, 273, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 467, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 468, 0, 469, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 470, 471, 472, 0, 0, 476, 293,
	0, 0, 0, 0, 292, 294, 301, 0, 0, 295,
	473, 297, 296, 298, 299, 300, 474, 0, 475, 0,
	302, 0, 0, 303, 304, 305, 0, 306, 307, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	477, 0, 315, 316, 0, 0, 317, 318, 0, 0,
	319, 0, 320, 321, 324, 322, 323, 325, 327, 328,
	326, 0, 329, 330, 332, 331, 0, 0, 0, 0,
	478, 479, 333, 334, 0, 335, 336, 337, 0, 0,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	482, 351, 483, 503, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 484, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 0, 376, 377, 378, 379, 485, 380,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 0,
	398, 399, 392, 394, 395, 396, 393, 397, 400, 401,
	0, 402, 382, 383, 403, 0, 404, 486, 405, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 415, 411,
	412, 413, 487, 0, 418, 419, 417, 0, 420, 421,
	422, 423, 424, 268, 425, 269, 426, 0, 488, 489,
	490, 427, 0, 0, 428, 429, 491, 430, 492, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	493, 494, 495, 207, 447, 446, 496, 0, 0, 0,
	0, 448, 449, 497, 450, 451, 452, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 453, 0, 2086, 0, 0, 219, 220, 221, 454,
	455, 222, 456, 223, 224, 457, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 458, 459, 460, 0,
	232, 461, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 462, 463,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 464, 264,
	265, 267, 270, 266, 271, 272, 273, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 467,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 468, 0, 469, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 470, 471, 472, 0, 0,
	476, 293, 0, 0, 0, 0, 292, 294, 301, 0,
	0, 295, 473, 297, 296, 298, 299, 300, 474, 0,
	475, 0, 302, 0, 0, 303, 304, 305, 0, 306,
	307, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 477, 0, 315, 316, 0, 0, 317, 318,
	0, 0, 319, 0, 320, 321, 324, 322, 323, 325,
	327, 328, 326, 0, 329, 330, 332, 331, 0, 0,
	0, 0, 478, 479, 333, 334, 0, 335, 336, 337,
	0, 0, 339, 340, 0, 0, 341, 480, 0, 342,
	0, 481, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 482, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 484, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 0, 376, 377, 378, 379,
	485, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 392, 394, 395, 396, 393, 397,
	400, 401, 0, 402, 382, 383, 403, 0, 404, 486,
	405, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	415, 411, 412, 413, 487, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 268, 425, 269, 426, 0,
	488, 489, 490, 427, 0, 0, 428, 429, 491, 430,
	492, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 493, 494, 495, 0, 447, 446, 496, 207,
	2275, 0, 0, 448, 449, 497, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 219, 220, 221, 454, 455, 222, 456, 223,
	224, 457, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 458, 459, 460, 0, 232, 461, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 462, 463, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 464, 264, 265, 267, 270, 266,
	271, 272, 273, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 467, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 468,
	0, 469, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 470, 471, 472, 0, 0, 476, 293, 0, 0,
	0, 0, 292, 294, 301, 0, 0, 295, 473, 297,
	296, 298, 299, 300, 474, 0, 475, 0, 302, 0,
	0, 303, 304, 305, 0, 306, 307, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 477, 0,
	315, 316, 0, 0, 317, 318, 0, 0, 319, 0,
	320, 321, 324, 322, 323, 325, 327, 328, 326, 0,
	329, 330, 332, 331, 0, 0, 0, 0, 478, 479,
	333, 334, 0, 335, 336, 337, 0, 0, 339, 340,
	0, 0, 341, 480, 0, 342, 0, 481, 343, 338,
	344, 345, 346, 347, 348, 349, 0, 350, 482, 351,
	483, 352, 0, 353, 0, 354, 355, 356, 357, 358,
	359, 484, 360, 361, 0, 362, 363, 364, 365, 366,
	0, 368, 369, 370, 367, 371, 372, 373, 374, 0,
	375, 0, 376, 377, 378, 379, 485, 380, 0, 381,
	385, 386, 387, 388, 389, 390, 391, 0, 398, 399,
	392, 394, 395, 396, 393, 397, 400, 401, 0, 402,
	382, 383, 403, 0, 404, 486, 405, 406, 0, 416,
	407, 408, 409, 384, 410, 414, 415, 411, 412, 413,
	487, 0, 418, 419, 417, 0, 420, 421, 422, 423,
	424, 268, 425, 269, 426, 0, 488, 489, 490, 427,
	0, 0, 428, 429, 491, 430, 492, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 493, 494,
	495, 207, 447, 446, 496, 0, 0, 0, 0, 448,
	449, 497, 450, 451, 452, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 219, 220, 221, 454, 455, 222,
	456, 223, 224, 457, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 458, 459, 460, 0, 232, 461,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 462, 463, 2825, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 464, 264, 265, 267,
	270, 266, 271, 272, 273, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 467, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 468, 0, 469, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 470, 471, 472, 0, 0, 476, 293,
	0, 0, 0, 0, 292, 294, 301, 0, 0, 295,
	473, 297, 296, 298, 299, 300, 474, 0, 475, 0,
	302, 0, 0, 303, 304, 305, 0, 306, 307, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	477, 0, 315, 316, 0, 0, 317, 318, 0, 0,
	319, 0, 320, 321, 324, 322, 323, 325, 327, 328,
	326, 0, 329, 330, 332, 331, 0, 0, 0, 0,
	478, 479, 333, 334, 0, 335, 336, 337, 0, 0,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	482, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 484, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 0, 376, 377, 378, 379, 485, 380,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 0,
	398, 399, 392, 394, 395, 396, 393, 397, 400, 401,
	0, 402, 382, 383, 403, 0, 404, 486, 405, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 415, 411,
	412, 413, 487, 0, 418, 419, 417, 0, 420, 421,
	422, 423, 424, 268, 425, 269, 426, 0, 488, 489,
	490, 427, 0, 0, 428, 429, 491, 430, 492, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	493, 494, 495, 0, 447, 446, 496, 207, 2275, 0,
	0, 448, 449, 497, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	219, 220, 221, 454, 455, 222, 456, 223, 224, 457,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	458, 459, 460, 0, 232, 461, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 462, 463, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 464, 264, 265, 267, 270, 266, 271, 272,
	273, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 467, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 468, 0, 469,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 470,
	471, 472, 0, 0, 476, 293, 0, 0, 0, 0,
	292, 294, 301, 0, 0, 295, 473, 297, 296, 298,
	299, 300, 474, 0, 475, 0, 302, 0, 0, 303,
	304, 305, 0, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 477, 0, 315, 316,
	0, 0, 317, 318, 0, 0, 319, 0, 320, 321,
	324, 322, 323, 325, 327, 328, 326, 0, 329, 330,
	332, 331, 0, 0, 0, 0, 478, 479, 333, 334,
	0, 335, 336, 337, 0, 0, 339, 2272, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 482, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 484,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 0,
	376, 377, 378, 379, 485, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 398, 399, 392, 394,
	395, 396, 393, 397, 400, 401, 0, 402, 382, 383,
	403, 0, 404, 486, 405, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 415, 411, 412, 413, 487, 0,
	418, 419, 417, 0, 420, 421, 422, 423, 424, 268,
	425, 269, 426, 0, 488, 489, 490, 427, 0, 0,
	428, 429, 491, 430, 492, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 493, 494, 495, 207,
	447, 446, 496, 0, 0, 0, 0, 448, 449, 497,
	450, 451, 452, 0, 0, 0, 213, 214, 215, 216,
	217, 1822, 218, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 219, 220, 221, 454, 455, 222, 456, 223,
	224, 457, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 458, 459, 460, 0, 232, 461, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 462, 463, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 464, 264, 265, 267, 270, 266,
	271, 272, 273, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 467, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 468,
	0, 469, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 470, 471, 472, 0, 0, 476, 293, 0, 0,
	0, 0, 292, 294, 301, 0, 0, 295, 473, 297,
	296, 298, 299, 300, 474, 0, 475, 0, 302, 0,
	0, 303, 304, 305, 0, 306, 307, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 477, 0,
	315, 316, 0, 0, 317, 318, 0, 0, 319, 0,
	320, 321, 324, 322, 323, 325, 327, 328, 326, 0,
	329, 330, 332, 331, 0, 0, 0, 0, 478, 479,
	333, 334, 0, 335, 336, 337, 0, 0, 339, 340,
	0, 0, 341, 480, 0, 342, 0, 481, 343, 338,
	344, 345, 346, 347, 348, 349, 0, 350, 482, 351,
	483, 352, 0, 353, 0, 354, 355, 356, 357, 358,
	359, 484, 360, 361, 0, 362, 363, 364, 365, 366,
	0, 368, 369, 370, 367, 371, 372, 373, 374, 0,
	375, 0, 376, 377, 378, 379, 485, 380, 0, 381,
	385, 386, 387, 388, 389, 390, 391, 0, 398, 399,
	392, 394, 395, 396, 393, 397, 400, 401, 0, 402,
	382, 383, 403, 0, 404, 486, 405, 406, 0, 416,
	407, 408, 409, 384, 410, 414, 415, 411, 412, 413,
	487, 0, 418, 419, 417, 0, 420, 421, 422, 423,
	424, 268, 425, 269, 426, 0, 488, 489, 490, 427,
	0, 0, 428, 429, 491, 430, 492, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 493, 494,
	495, 0, 447, 446, 496, 1814, 0, 207, 0, 448,
	449, 497, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	219, 220, 221, 454, 455, 222, 456, 223, 224, 457,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	458, 459, 460, 0, 232, 461, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 462, 463, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 464, 264, 265, 267, 270, 266, 271, 272,
	273, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 467, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 468, 0, 469,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 470,
	471, 472, 0, 0, 476, 293, 0, 0, 0, 0,
	292, 294, 301, 0, 0, 295, 473, 297, 296, 298,
	299, 300, 474, 0, 475, 0, 302, 0, 0, 303,
	304, 305, 0, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 477, 0, 315, 316,
	0, 0, 317, 318, 0, 0, 319, 0, 320, 321,
	324, 322, 323, 325, 327, 328, 326, 0, 329, 330,
	332, 331, 0, 0, 0, 0, 478, 479, 333, 334,
	0, 335, 336, 337, 0, 0, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 482, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 484,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 0,
	376, 377, 378, 379, 485, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 398, 399, 392, 394,
	395, 396, 393, 397, 400, 401, 0, 402, 382, 383,
	403, 0, 404, 486, 405, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 415, 411, 412, 413, 487, 0,
	418, 419, 417, 0, 420, 421, 422, 423, 424, 268,
	425, 269, 426, 0, 488, 489, 490, 427, 0, 0,
	428, 429, 491, 430, 492, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 493, 494, 495, 0,
	447, 446, 496, 548, 0, 207, 0, 448, 449, 497,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 219, 220,
	221, 454, 455, 222, 456, 223, 224, 457, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 458, 459,
	1013, 0, 232, 461, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	462, 463, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	464, 264, 265, 267, 270, 266, 271, 272, 273, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 467, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 468, 0, 469, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 470, 471, 472,
	0, 0, 476, 293, 0, 0, 0, 0, 292, 294,
	301, 0, 0, 295, 473, 297, 296, 298, 299, 300,
	474, 0, 475, 0, 302, 0, 0, 303, 304, 305,
	0, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 477, 0, 315, 316, 0, 0,
	317, 318, 0, 0, 319, 0, 320, 321, 324, 322,
	323, 325, 327, 328, 549, 0, 329, 330, 332, 331,
	0, 0, 0, 0, 478, 479, 333, 334, 0, 335,
	336, 337, 0, 0, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 482, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 484, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 0, 376, 377,
	378, 379, 485, 380, 0, 381, 385, 386, 545, 388,
	389, 390, 391, 0, 398, 399, 392, 394, 395, 396,
	393, 397, 400, 401, 0, 402, 382, 383, 403, 0,
	404, 486, 405, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 415, 411, 412, 413, 487, 0, 418, 419,
	417, 0, 420, 421, 422, 423, 424, 268, 425, 269,
	426, 0, 544, 489, 490, 427, 0, 0, 428, 429,
	491, 430, 492, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 493, 494, 495, 0, 447, 446,
	496, 1767, 0, 207, 0, 448, 449, 497, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 219, 220, 221, 454,
	455, 222, 456, 223, 224, 457, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 458, 459, 460, 0,
	232, 461, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 462, 463,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 464, 264,
	265, 267, 270, 266, 271, 272, 273, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 467,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 468, 0, 469, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 1766, 471, 472, 0, 0,
	476, 293, 0, 0, 0, 0, 292, 294, 301, 0,
	0, 295, 473, 297, 296, 298, 299, 300, 474, 0,
	475, 0, 302, 0, 0, 303, 304, 305, 0, 306,
	307, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 477, 0, 315, 316, 0, 0, 317, 318,
	0, 0, 319, 0, 320, 321, 324, 322, 323, 325,
	327, 328, 326, 0, 329, 330, 332, 331, 0, 0,
	0, 0, 478, 479, 333, 334, 0, 335, 336, 337,
	0, 0, 339, 340, 0, 0, 341, 480, 0, 342,
	0, 481, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 482, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 484, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 0, 376, 377, 378, 379,
	485, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 392, 394, 395, 396, 393, 397,
	400, 401, 0, 402, 382, 383, 403, 0, 404, 486,
	405, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	415, 411, 412, 413, 487, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 268, 425, 269, 426, 0,
	488, 489, 490, 427, 0, 0, 428, 429, 491, 430,
	492, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 493, 494, 495, 0, 447, 446, 496, 548,
	0, 207, 0, 448, 449, 497, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 219, 220, 221, 454, 455, 222,
	456, 223, 224, 457, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 458, 459, 460, 0, 538, 461,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 462, 463, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 464, 264, 265, 267,
	270, 266, 271, 272, 273, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 467, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 468, 0, 469, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 470, 471, 472, 0, 0, 476, 293,
	0, 0, 0, 0, 292, 294, 301, 0, 0, 295,
	473, 297, 296, 298, 299, 300, 474, 0, 475, 0,
	302, 0, 0, 303, 304, 305, 0, 306, 307, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	477, 0, 315, 316, 0, 0, 317, 318, 0, 0,
	319, 0, 320, 321, 324, 322, 323, 325, 327, 328,
	549, 0, 329, 330, 332, 331, 0, 0, 0, 0,
	478, 479, 333, 334, 0, 335, 336, 337, 0, 0,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	482, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 484, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 0, 376, 377, 378, 379, 485, 380,
	0, 381, 385, 386, 545, 388, 389, 390, 391, 0,
	398, 399, 392, 394, 395, 396, 393, 397, 1288, 401,
	0, 402, 382, 383, 403, 0, 404, 486, 405, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 415, 411,
	412, 413, 487, 0, 418, 419, 417, 0, 420, 421,
	422, 423, 424, 268, 425, 269, 426, 0, 544, 489,
	490, 427, 0, 0, 428, 429, 491, 430, 492, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	493, 494, 495, 0, 447, 446, 496, 1273, 0, 207,
	0, 448, 449, 497, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 219, 220, 221, 454, 455, 222, 456, 223,
	224, 457, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 458, 459, 460, 0, 232, 461, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 462, 463, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 464, 264, 265, 267, 270, 266,
	271, 272, 273, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 467, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 468,
	0, 469, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 1272, 471, 472, 0, 0, 476, 293, 0, 0,
	0, 0, 292, 294, 301, 0, 0, 295, 473, 297,
	296, 298, 299, 300, 474, 0, 475, 0, 302, 0,
	0, 303, 304, 305, 0, 306, 307, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 477, 0,
	315, 316, 0, 0, 317, 318, 0, 0, 319, 0,
	320, 321, 324, 322, 323, 325, 327, 328, 326, 0,
	329, 330, 332, 331, 0, 0, 0, 0, 478, 479,
	333, 334, 0, 335, 336, 337, 0, 0, 339, 340,
	0, 0, 341, 480, 0, 342, 0, 481, 343, 338,
	344, 345, 346, 347, 348, 349, 0, 350, 482, 351,
	483, 352, 0, 353, 0, 354, 355, 356, 357, 358,
	359, 484, 360, 361, 0, 362, 363, 364, 365, 366,
	0, 368, 369, 370, 367, 371, 372, 373, 374, 0,
	375, 0, 376, 377, 378, 379, 485, 380, 0, 381,
	385, 386, 387, 388, 389, 390, 391, 0, 398, 399,
	392, 394, 395, 396, 393, 397, 400, 401, 0, 402,
	382, 383, 403, 0, 404, 486, 405, 406, 0, 416,
	407, 408, 409, 384, 410, 414, 415, 411, 412, 413,
	487, 0, 418, 419, 417, 0, 420, 421, 422, 423,
	424, 268, 425, 269, 426, 0, 488, 489, 490, 427,
	0, 0, 428, 429, 491, 430, 492, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 493, 494,
	495, 0, 447, 446, 496, 1222, 0, 207, 0, 448,
	449, 497, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	219, 220, 221, 454, 455, 222, 456, 223, 224, 457,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	458, 459, 460, 0, 232, 461, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 462, 463, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 464, 264, 265, 267, 270, 266, 271, 272,
	273, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 467, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 468, 0, 469,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 1221,
	471, 472, 0, 0, 476, 293, 0, 0, 0, 0,
	292, 294, 301, 0, 0, 295, 473, 297, 296, 298,
	299, 300, 474, 0, 475, 0, 302, 0, 0, 303,
	304, 305, 0, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 477, 0, 315, 316,
	0, 0, 317, 318, 0, 0, 319, 0, 320, 321,
	324, 322, 323, 325, 327, 328, 326, 0, 329, 330,
	332, 331, 0, 0, 0, 0, 478, 479, 333, 334,
	0, 335, 336, 337, 0, 0, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 482, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 484,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 0,
	376, 377, 378, 379, 485, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 398, 399, 392, 394,
	395, 396, 393, 397, 400, 401, 0, 402, 382, 383,
	403, 0, 404, 486, 405, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 415, 411, 412, 413, 487, 0,
	418, 419, 417, 0, 420, 421, 422, 423, 424, 268,
	425, 269, 426, 0, 488, 489, 490, 427, 0, 0,
	428, 429, 491, 430, 492, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 493, 494, 495, 0,
	447, 446, 496, 1206, 0, 207, 0, 448, 449, 497,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 219, 220,
	221, 454, 455, 222, 456, 223, 224, 457, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 458, 459,
	460, 0, 232, 461, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	462, 463, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	464, 264, 265, 267, 270, 266, 271, 272, 273, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 467, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 468, 0, 469, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 470, 471, 472,
	0, 0, 476, 293, 0, 0, 0, 0, 292, 294,
	301, 0, 0, 295, 473, 297, 296, 298, 299, 300,
	474, 0, 475, 0, 302, 0, 0, 303, 304, 305,
	0, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 477, 0, 315, 316, 0, 0,
	317, 318, 0, 0, 319, 0, 320, 321, 324, 322,
	323, 325, 327, 328, 326, 0, 329, 330, 332, 331,
	0, 0, 0, 0, 478, 479, 333, 334, 0, 335,
	336, 337, 0, 0, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 482, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 484, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 0, 376, 377,
	378, 379, 485, 380, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 0, 398, 399, 392, 394, 395, 396,
	393, 397, 400, 401, 0, 402, 382, 383, 403, 0,
	404, 486, 405, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 415, 411, 412, 413, 487, 0, 418, 419,
	417, 0, 420, 421, 422, 423, 424, 268, 425, 269,
	426, 0, 488, 489, 490, 427, 0, 0, 428, 429,
	491, 430, 492, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 493, 494, 495, 0, 447, 446,
	496, 1145, 0, 207, 0, 448, 449, 497, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 219, 220, 221, 454,
	455, 222, 456, 223, 224, 457, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 458, 459, 460, 0,
	232, 461, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 462, 463,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 464, 264,
	265, 267, 270, 266, 271, 272, 273, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 467,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 468, 0, 469, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 470, 471, 472, 0, 0,
	476, 293, 0, 0, 0, 0, 292, 294, 301, 0,
	0, 295, 473, 297, 296, 298, 299, 300, 474, 0,
	475, 0, 302, 0, 0, 303, 304, 305, 0, 306,
	307, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 477, 0, 315, 316, 0, 0, 317, 318,
	0, 0, 319, 0, 320, 321, 324, 322, 323, 325,
	327, 328, 326, 0, 329, 330, 332, 331, 0, 0,
	0, 0, 478, 479, 333, 334, 0, 335, 336, 337,
	0, 0, 339, 340, 0, 0, 341, 480, 0, 342,
	0, 481, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 482, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 484, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 0, 376, 377, 378, 379,
	485, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 392, 394, 395, 396, 393, 397,
	400, 401, 0, 402, 382, 383, 403, 0, 404, 486,
	405, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	415, 411, 412, 413, 487, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 268, 425, 269, 426, 0,
	488, 489, 490, 427, 0, 0, 428, 429, 491, 430,
	492, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 493, 494, 495, 0, 447, 446, 496, 548,
	0, 207, 0, 448, 449, 497, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 219, 220, 221, 454, 455, 222,
	456, 223, 224, 457, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 458, 459, 1013, 0, 232, 461,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 462, 463, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 464, 264, 265, 267,
	270, 266, 271, 272, 273, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 467, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 468, 0, 469, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 470, 471, 472, 0, 0, 476, 293,
	0, 0, 0, 0, 292, 294, 301, 0, 0, 295,
	473, 297, 296, 298, 299, 300, 474, 0, 475, 0,
	302, 0, 0, 303, 304, 305, 0, 306, 307, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	477, 0, 315, 316, 0, 0, 317, 318, 0, 0,
	319, 0, 320, 321, 324, 322, 323, 325, 327, 328,
	549, 0, 329, 330, 332, 331, 0, 0, 0, 0,
	478, 479, 333, 334, 0, 335, 336, 337, 0, 0,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	482, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 484, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 0, 376, 377, 378, 379, 485, 380,
	0, 381, 385, 386, 545, 388, 389, 390, 391, 0,
	398, 399, 392, 394, 395, 396, 393, 397, 400, 401,
	0, 402, 382, 383, 403, 0, 404, 486, 405, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 415, 411,
	412, 413, 487, 0, 418, 419, 417, 0, 420, 421,
	422, 423, 424, 268, 425, 269, 426, 0, 544, 489,
	490, 427, 0, 0, 428, 1014, 491, 430, 492, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	493, 494, 495, 207, 447, 446, 496, 0, 0, 0,
	0, 448, 449, 497, 450, 451, 452, 0, 0, 0,
	213, 214, 215, 216, 217, 996, 218, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 219, 220, 221, 454,
	455, 222, 456, 223, 224, 457, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 458, 459, 460, 0,
	232, 461, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 462, 463,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 464, 264,
	265, 267, 270, 266, 271, 272, 273, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 467,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 468, 0, 469, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 470, 471, 472, 0, 0,
	476, 293, 0, 0, 0, 0, 292, 294, 301, 0,
	0, 295, 473, 297, 296, 298, 299, 300, 474, 0,
	475, 0, 302, 0, 0, 303, 304, 305, 0, 306,
	307, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 477, 0, 315, 316, 0, 0, 317, 318,
	0, 0, 319, 0, 320, 321, 324, 322, 323, 325,
	327, 328, 326, 0, 329, 330, 332, 331, 0, 0,
	0, 0, 478, 479, 333, 334, 0, 335, 336, 337,
	0, 0, 339, 340, 0, 0, 341, 480, 0, 342,
	0, 481, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 482, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 484, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 0, 376, 377, 378, 379,
	485, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 392, 394, 395, 396, 393, 397,
	400, 401, 0, 402, 382, 383, 403, 0, 404, 486,
	405, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	415, 411, 412, 413, 487, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 268, 425, 269, 426, 0,
	488, 489, 490, 427, 0, 0, 428, 429, 491, 430,
	492, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 493, 494, 495, 0, 447, 446, 496, 548,
	0, 207, 0, 448, 449, 497, 450, 451, 452, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 219, 220, 221, 454, 455, 222,
	456, 223, 224, 457, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 458, 459, 460, 0, 538, 461,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 536, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 462, 463, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 464, 264, 265, 267,
	270, 266, 271, 272, 273, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 467, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 468, 0, 469, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 470, 471, 472, 0, 0, 476, 293,
	0, 0, 0, 0, 292, 294, 301, 0, 0, 295,
	473, 297, 296, 298, 299, 300, 474, 0, 475, 0,
	302, 0, 0, 303, 304, 305, 0, 306, 307, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	477, 0, 315, 316, 0, 0, 317, 537, 0, 0,
	319, 0, 320, 321, 324, 322, 323, 325, 327, 328,
	549, 0, 329, 330, 332, 331, 0, 0, 0, 0,
	478, 479, 333, 334, 0, 335, 336, 337, 0, 0,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	482, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 484, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 0, 376, 377, 378, 379, 539, 380,
	0, 381, 385, 386, 545, 388, 389, 390, 391, 0,
	398, 399, 392, 394, 395, 396, 393, 397, 540, 401,
	0, 402, 382, 383, 403, 0, 404, 486, 405, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 415, 411,
	412, 413, 487, 0, 418, 419, 417, 0, 420, 421,
	422, 423, 424, 268, 425, 269, 426, 0, 544, 489,
	490, 427, 0, 0, 428, 542, 491, 430, 492, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	493, 494, 495, 0, 447, 446, 496, 532, 0, 207,
	0, 448, 449, 497, 450, 451, 452, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 219, 220, 221, 454, 455, 222, 456, 223,
	224, 457, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 458, 459, 460, 0, 232, 461, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 462, 463, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 464, 264, 265, 267, 270, 266,
	271, 272, 273, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 467, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 468,
	0, 469, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 470, 471, 472, 0, 0, 476, 293, 0, 0,
	0, 0, 292, 294, 301, 0, 0, 295, 473, 297,
	296, 298, 299, 300, 474, 0, 475, 0, 302, 0,
	0, 303, 304, 305, 0, 306, 307, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 477, 0,
	315, 316, 0, 0, 317, 318, 0, 0, 319, 0,
	320, 321, 324, 322, 323, 325, 327, 328, 326, 0,
	329, 330, 332, 331, 0, 0, 0, 0, 478, 479,
	333, 334, 0, 335, 336, 337, 0, 0, 339, 340,
	0, 0, 341, 480, 0, 342, 0, 481, 343, 338,
	344, 345, 346, 347, 348, 349, 0, 350, 482, 351,
	483, 352, 0, 353, 0, 354, 355, 356, 357, 358,
	359, 484, 360, 361, 0, 362, 363, 364, 365, 366,
	0, 368, 369, 370, 367, 371, 372, 373, 374, 0,
	375, 0, 376, 377, 378, 379, 485, 380, 0, 381,
	533, 386, 387, 388, 389, 390, 391, 0, 398, 399,
	392, 394, 395, 396, 393, 397, 400, 401, 0, 402,
	382, 383, 403, 0, 404, 486, 405, 406, 0, 416,
	407, 408, 409, 384, 410, 414, 415, 411, 412, 413,
	487, 0, 418, 419, 417, 0, 420, 421, 422, 423,
	424, 268, 425, 269, 426, 0, 488, 489, 490, 427,
	0, 0, 428, 429, 491, 430, 492, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 493, 494,
	495, 0, 447, 446, 496, 530, 0, 207, 0, 448,
	449, 497, 450, 451, 452, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	219, 220, 221, 454, 455, 222, 456, 223, 224, 457,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	458, 459, 460, 0, 232, 461, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 462, 463, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 464, 264, 265, 267, 270, 266, 271, 272,
	273, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 467, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 468, 0, 469,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 470,
	471, 472, 0, 0, 476, 293, 0, 0, 0, 0,
	292, 294, 301, 0, 0, 295, 473, 297, 296, 298,
	299, 300, 474, 0, 475, 0, 302, 0, 0, 303,
	304, 305, 0, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 477, 0, 315, 316,
	0, 0, 317, 318, 0, 0, 319, 0, 320, 321,
	324, 322, 323, 325, 327, 328, 326, 0, 329, 330,
	332, 331, 0, 0, 0, 0, 478, 479, 333, 334,
	0, 335, 336, 337, 0, 0, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 482, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 484,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 0,
	376, 377, 378, 379, 485, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 398, 399, 392, 394,
	395, 396, 393, 397, 400, 401, 0, 402, 382, 383,
	403, 0, 404, 486, 405, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 415, 411, 412, 413, 487, 0,
	418, 419, 417, 0, 420, 421, 422, 423, 424, 268,
	425, 269, 426, 0, 488, 489, 490, 427, 0, 0,
	428, 429, 491, 430, 492, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 493, 494, 495, 0,
	447, 446, 496, 524, 0, 207, 0, 448, 449, 497,
	450, 451, 452, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 219, 220,
	221, 454, 455, 222, 456, 223, 224, 457, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 458, 459,
	460, 0, 232, 461, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	462, 463, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	464, 264, 265, 267, 270, 266, 271, 272, 273, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 467, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 468, 0, 469, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 470, 471, 472,
	0, 0, 476, 293, 0, 0, 0, 0, 292, 294,
	301, 0, 0, 295, 473, 297, 296, 298, 299, 300,
	474, 0, 475, 0, 302, 0, 0, 303, 304, 305,
	0, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 477, 0, 315, 316, 0, 0,
	317, 318, 0, 0, 319, 0, 320, 321, 324, 322,
	323, 325, 327, 328, 326, 0, 329, 330, 332, 331,
	0, 0, 0, 0, 478, 479, 333, 334, 0, 335,
	336, 337, 0, 0, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 482, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 484, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 0, 376, 377,
	378, 379, 485, 380, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 0, 398, 399, 392, 394, 395, 396,
	393, 397, 400, 401, 0, 402, 382, 383, 403, 0,
	404, 486, 405, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 415, 411, 412, 413, 487, 0, 418, 419,
	417, 0, 420, 421, 422, 423, 424, 268, 425, 269,
	426, 0, 488, 489, 490, 427, 0, 0, 428, 429,
	491, 430, 492, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 493, 494, 495, 0, 447, 446,
	496, 500, 0, 207, 0, 448, 449, 497, 450, 451,
	452, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 219, 220, 221, 454,
	455, 222, 456, 223, 224, 457, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 458, 459, 460, 0,
	232, 461, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 462, 463,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 464, 264,
	265, 267, 270, 266, 271, 272, 273, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 467,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 468, 0, 469, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 470, 471, 472, 0, 0,
	476, 293, 0, 0, 0, 0, 292, 294, 301, 0,
	0, 295, 473, 297, 296, 298, 299, 300, 474, 0,
	475, 0, 302, 0, 0, 303, 304, 305, 0, 306,
	307, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 477, 0, 315, 316, 0, 0, 317, 318,
	0, 0, 319, 0, 320, 321, 324, 322, 323, 325,
	327, 328, 326, 0, 329, 330, 332, 331, 0, 0,
	0, 0, 478, 479, 333, 334, 0, 335, 336, 337,
	0, 0, 339, 340, 0, 0, 341, 480, 0, 342,
	0, 481, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 482, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 484, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 0, 376, 377, 378, 379,
	485, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 392, 394, 395, 396, 393, 397,
	400, 401, 0, 402, 382, 383, 403, 0, 404, 486,
	405, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	415, 411, 412, 413, 487, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 268, 425, 269, 426, 0,
	488, 489, 490, 427, 0, 0, 428, 429, 491, 430,
	492, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 493, 494, 495, 207, 447, 446, 496, 0,
	0, 0, 0, 448, 449, 497, 450, 451, 452, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 219, 220,
	221, 454, 455, 222, 456, 223, 224, 457, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 458, 459,
	460, 0, 232, 461, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	462, 463, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	464, 264, 265, 267, 270, 266, 271, 272, 273, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 467, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 468, 0, 469, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 470, 471, 472,
	0, 0, 476, 293, 0, 0, 0, 0, 292, 294,
	301, 0, 0, 295, 473, 297, 296, 298, 299, 300,
	474, 0, 475, 0, 302, 0, 0, 303, 304, 305,
	0, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 477, 0, 315, 316, 0, 0,
	317, 318, 0, 0, 319, 0, 320, 321, 324, 322,
	323, 325, 327, 328, 326, 0, 329, 330, 332, 331,
	0, 0, 0, 0, 478, 479, 333, 334, 0, 335,
	336, 337, 0, 0, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 482, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 484, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 0, 376, 377,
	378, 379, 485, 380, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 0, 398, 399, 392, 394, 395, 396,
	393, 397, 400, 401, 0, 402, 382, 383, 403, 0,
	404, 486, 405, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 415, 411, 412, 413, 487, 0, 418, 419,
	417, 0, 420, 421, 422, 423, 424, 268, 425, 269,
	426, 0, 488, 489, 490, 427, 0, 0, 428, 429,
	491, 430, 492, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 493, 494, 495, 207, 447, 446,
	496, 0, 0, 0, 0, 448, 449, 497, 450, 451,
	452, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 453, 0, 0, 0, 0,
	219, 220, 221, 454, 455, 222, 456, 223, 224, 457,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	458, 459, 460, 0, 232, 461, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 462, 463, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 464, 264, 265, 267, 270, 266, 271, 272,
	273, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 467, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 468, 0, 469,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 2531,
	471, 472, 0, 0, 476, 293, 0, 0, 0, 0,
	292, 294, 301, 0, 0, 295, 473, 297, 296, 298,
	299, 300, 474, 0, 475, 0, 302, 0, 0, 303,
	304, 305, 0, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 477, 0, 315, 316,
	0, 0, 317, 318, 0, 0, 319, 0, 320, 321,
	324, 322, 323, 325, 327, 328, 326, 0, 329, 330,
	332, 331, 0, 0, 0, 0, 478, 479, 333, 334,
	0, 335, 336, 337, 0, 0, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 482, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 484,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 0,
	376, 377, 378, 379, 485, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 398, 399, 392, 394,
	395, 396, 393, 397, 400, 401, 0, 402, 382, 383,
	403, 0, 404, 486, 405, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 415, 411, 412, 413, 487, 0,
	418, 419, 417, 0, 420, 421, 422, 423, 424, 268,
	425, 269, 426, 0, 488, 489, 490, 427, 0, 0,
	428, 429, 491, 430, 492, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 493, 494, 495, 207,
	447, 446, 496, 0, 0, 0, 0, 448, 449, 497,
	450, 451, 452, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 219, 220, 221, 454, 455, 222, 456, 223,
	224, 457, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 458, 459, 460, 0, 232, 461, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 462, 463, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 464, 264, 265, 267, 270, 266,
	271, 272, 273, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 467, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 468,
	0, 469, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 2529, 471, 472, 0, 0, 476, 293, 0, 0,
	0, 0, 292, 294, 301, 0, 0, 295, 473, 297,
	296, 298, 299, 300, 474, 0, 475, 0, 302, 0,
	0, 303, 304, 305, 0, 306, 307, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 477, 0,
	315, 316, 0, 0, 317, 318, 0, 0, 319, 0,
	320, 321, 324, 322, 323, 325, 327, 328, 326, 0,
	329, 330, 332, 331, 0, 0, 0, 0, 478, 479,
	333, 334, 0, 335, 336, 337, 0, 0, 339, 340,
	0, 0, 341, 480, 0, 342, 0, 481, 343, 338,
	344, 345, 346, 347, 348, 349, 0, 350, 482, 351,
	483, 352, 0, 353, 0, 354, 355, 356, 357, 358,
	359, 484, 360, 361, 0, 362, 363, 364, 365, 366,
	0, 368, 369, 370, 367, 371, 372, 373, 374, 0,
	375, 0, 376, 377, 378, 379, 485, 380, 0, 381,
	385, 386, 387, 388, 389, 390, 391, 0, 398, 399,
	392, 394, 395, 396, 393, 397, 400, 401, 0, 402,
	382, 383, 403, 0, 404, 486, 405, 406, 0, 416,
	407, 408, 409, 384, 410, 414, 415, 411, 412, 413,
	487, 0, 418, 419, 417, 0, 420, 421, 422, 423,
	424, 268, 425, 269, 426, 0, 488, 489, 490, 427,
	0, 0, 428, 429, 491, 430, 492, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 493, 494,
	495, 207, 447, 446, 496, 0, 0, 0, 0, 448,
	449, 497, 450, 451, 452, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 219, 220, 221, 454, 455, 222,
	456, 223, 224, 457, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 458, 459, 460, 0, 232, 461,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 462, 463, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 464, 264, 265, 267,
	270, 266, 271, 272, 273, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 467, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 468, 0, 469, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 2518, 471, 472, 0, 0, 476, 293,
	0, 0, 0, 0, 292, 294, 301, 0, 0, 295,
	473, 297, 296, 298, 299, 300, 474, 0, 475, 0,
	302, 0, 0, 303, 304, 305, 0, 306, 307, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	477, 0, 315, 316, 0, 0, 317, 318, 0, 0,
	319, 0, 320, 321, 324, 322, 323, 325, 327, 328,
	326, 0, 329, 330, 332, 331, 0, 0, 0, 0,
	478, 479, 333, 334, 0, 335, 336, 337, 0, 0,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	482, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 484, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 0, 376, 377, 378, 379, 485, 380,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 0,
	398, 399, 392, 394, 395, 396, 393, 397, 400, 401,
	0, 402, 382, 383, 403, 0, 404, 486, 405, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 415, 411,
	412, 413, 487, 0, 418, 419, 417, 0, 420, 421,
	422, 423, 424, 268, 425, 269, 426, 0, 488, 489,
	490, 427, 0, 0, 428, 429, 491, 430, 492, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	493, 494, 495, 207, 447, 446, 496, 0, 0, 0,
	0, 448, 449, 497, 450, 451, 452, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 219, 220, 221, 454,
	455, 222, 456, 223, 224, 457, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 458, 459, 460, 0,
	232, 461, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 462, 463,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 464, 264,
	265, 267, 270, 266, 271, 272, 273, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 467,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 468, 0, 469, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 2236, 471, 472, 0, 0,
	476, 293, 0, 0, 0, 0, 292, 294, 301, 0,
	0, 295, 473, 297, 296, 298, 299, 300, 474, 0,
	475, 0, 302, 0, 0, 303, 304, 305, 0, 306,
	307, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 477, 0, 315, 316, 0, 0, 317, 318,
	0, 0, 319, 0, 320, 321, 324, 322, 323, 325,
	327, 328, 326, 0, 329, 330, 332, 331, 0, 0,
	0, 0, 478, 479, 333, 334, 0, 335, 336, 337,
	0, 0, 339, 340, 0, 0, 341, 480, 0, 342,
	0, 481, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 482, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 484, 360, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 0, 376, 377, 378, 379,
	485, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 392, 394, 395, 396, 393, 397,
	400, 401, 0, 402, 382, 383, 403, 0, 404, 486,
	405, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	415, 411, 412, 413, 487, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 268, 425, 269, 426, 0,
	488, 489, 490, 427, 0, 0, 428, 429, 491, 430,
	492, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 493, 494, 495, 207, 447, 446, 496, 0,
	0, 0, 0, 448, 449, 497, 450, 451, 452, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 219, 220,
	221, 454, 455, 222, 456, 223, 224, 457, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 458, 459,
	460, 0, 232, 461, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	462, 463, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	464, 264, 265, 267, 270, 266, 271, 272, 273, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 467, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 468, 0, 469, 284, 0,
	285, 286, 287, 288, 289, 290, 291, 470, 471, 472,
	0, 0, 476, 293, 0, 0, 0, 0, 292, 294,
	301, 0, 0, 295, 473, 297, 296, 298, 299, 300,
	474, 0, 475, 0, 302, 0, 0, 303, 304, 305,
	0, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 477, 0, 315, 316, 0, 0,
	317, 318, 0, 0, 319, 0, 320, 321, 324, 322,
	323, 325, 327, 328, 326, 0, 329, 330, 332, 331,
	0, 0, 0, 0, 478, 479, 333, 334, 0, 335,
	336, 337, 0, 0, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 338, 344, 345, 346, 347,
	348, 349, 0, 350, 482, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 357, 358, 359, 484, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 0, 376, 377,
	378, 379, 485, 380, 0, 381, 533, 386, 387, 388,
	389, 390, 391, 0, 398, 399, 392, 394, 395, 396,
	393, 397, 400, 401, 0, 402, 382, 383, 403, 0,
	404, 486, 405, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 415, 411, 412, 413, 487, 0, 418, 419,
	417, 0, 420, 421, 422, 423, 424, 268, 425, 269,
	426, 0, 488, 489, 490, 427, 0, 0, 428, 429,
	491, 430, 492, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 493, 494, 495, 207, 447, 446,
	496, 0, 0, 0, 0, 448, 449, 497, 450, 451,
	452, 0, 0, 0, 213, 214, 215, 216, 217, 0,
	218, 0, 0, 0, 0, 453, 0, 1779, 0, 0,
	219, 220, 221, 454, 455, 222, 456, 223, 224, 457,
	0, 225, 226, 227, 228, 229, 230, 0, 0, 231,
	458, 459, 460, 0, 232, 461, 0, 0, 0, 233,
	234, 235, 236, 237, 0, 239, 240, 241, 238, 0,
	242, 0, 243, 244, 245, 0, 0, 246, 247, 0,
	0, 0, 0, 0, 0, 0, 248, 249, 250, 251,
	252, 253, 462, 463, 0, 254, 0, 256, 255, 0,
	257, 0, 0, 258, 259, 260, 0, 261, 0, 262,
	263, 0, 464, 264, 265, 267, 270, 266, 271, 272,
	273, 465, 466, 0, 0, 0, 0, 0, 0, 0,
	274, 275, 276, 467, 277, 278, 0, 279, 0, 280,
	0, 0, 0, 281, 282, 0, 283, 468, 0, 469,
	284, 0, 285, 286, 287, 288, 289, 290, 291, 470,
	471, 472, 0, 0, 476, 293, 0, 0, 0, 0,
	292, 294, 301, 0, 0, 295, 473, 297, 296, 298,
	299, 300, 474, 0, 475, 0, 302, 0, 0, 303,
	304, 305, 0, 306, 307, 0, 0, 308, 309, 310,
	311, 0, 313, 312, 0, 314, 477, 0, 315, 316,
	0, 0, 317, 318, 0, 0, 319, 0, 320, 321,
	324, 322, 323, 325, 327, 328, 326, 0, 329, 330,
	332, 331, 0, 0, 0, 0, 478, 479, 333, 334,
	0, 335, 336, 337, 0, 0, 339, 340, 0, 0,
	341, 480, 0, 342, 0, 481, 343, 338, 344, 345,
	346, 347, 348, 349, 0, 350, 482, 351, 483, 352,
	0, 353, 0, 354, 355, 356, 357, 358, 359, 484,
	360, 361, 0, 362, 363, 364, 365, 366, 0, 368,
	369, 370, 367, 371, 372, 373, 374, 0, 375, 0,
	376, 377, 378, 379, 485, 380, 0, 381, 385, 386,
	387, 388, 389, 390, 391, 0, 398, 399, 392, 394,
	395, 396, 393, 397, 400, 401, 0, 0, 382, 383,
	403, 0, 404, 486, 405, 406, 0, 416, 407, 408,
	409, 384, 410, 414, 415, 411, 412, 413, 487, 0,
	418, 419, 417, 0, 420, 421, 422, 423, 424, 268,
	425, 269, 426, 0, 488, 489, 490, 427, 0, 0,
	428, 429, 491, 430, 492, 0, 431, 432, 433, 0,
	434, 435, 0, 0, 436, 437, 438, 439, 441, 0,
	442, 0, 440, 443, 444, 445, 493, 494, 495, 207,
	447, 446, 496, 0, 0, 0, 0, 448, 449, 497,
	450, 451, 452, 0, 0, 0, 213, 214, 215, 216,
	217, 0, 218, 0, 0, 0, 0, 453, 0, 0,
	0, 0, 219, 220, 221, 454, 455, 222, 456, 223,
	224, 457, 0, 225, 226, 227, 228, 229, 230, 0,
	0, 231, 458, 459, 460, 0, 232, 461, 0, 0,
	0, 233, 234, 235, 236, 237, 0, 239, 240, 241,
	238, 0, 242, 0, 243, 244, 245, 0, 0, 246,
	247, 0, 0, 0, 0, 0, 0, 0, 248, 249,
	250, 251, 252, 253, 462, 463, 0, 254, 0, 256,
	255, 0, 257, 0, 0, 258, 259, 260, 0, 261,
	0, 262, 263, 0, 464, 264, 265, 267, 270, 266,
	271, 272, 273, 465, 466, 0, 0, 0, 0, 0,
	0, 0, 274, 275, 276, 467, 277, 278, 0, 279,
	0, 280, 0, 0, 0, 281, 282, 0, 283, 468,
	0, 469, 284, 0, 285, 286, 287, 288, 289, 290,
	291, 1242, 471, 472, 0, 0, 476, 293, 0, 0,
	0, 0, 292, 294, 301, 0, 0, 295, 473, 297,
	296, 298, 299, 300, 474, 0, 475, 0, 302, 0,
	0, 303, 304, 305, 0, 306, 307, 0, 0, 308,
	309, 310, 311, 0, 313, 312, 0, 314, 477, 0,
	315, 316, 0, 0, 317, 318, 0, 0, 319, 0,
	320, 321, 324, 322, 323, 325, 327, 328, 326, 0,
	329, 330, 332, 331, 0, 0, 0, 0, 478, 479,
	333, 334, 0, 335, 336, 337, 0, 0, 339, 340,
	0, 0, 341, 480, 0, 342, 0, 481, 343, 338,
	344, 345, 346, 347, 348, 349, 0, 350, 482, 351,
	483, 352, 0, 353, 0, 354, 355, 356, 357, 358,
	359, 484, 360, 361, 0, 362, 363, 364, 365, 366,
	0, 368, 369, 370, 367, 371, 372, 373, 374, 0,
	375, 0, 376, 377, 378, 379, 485, 380, 0, 381,
	385, 386, 387, 388, 389, 390, 391, 0, 398, 399,
	392, 394, 395, 396, 393, 397, 400, 401, 0, 402,
	382, 383, 403, 0, 404, 486, 405, 406, 0, 416,
	407, 408, 409, 384, 410, 414, 415, 411, 412, 413,
	487, 0, 418, 419, 417, 0, 420, 421, 422, 423,
	424, 268, 425, 269, 426, 0, 488, 489, 490, 427,
	0, 0, 428, 429, 491, 430, 492, 0, 431, 432,
	433, 0, 434, 435, 0, 0, 436, 437, 438, 439,
	441, 0, 442, 0, 440, 443, 444, 445, 493, 494,
	495, 207, 447, 446, 496, 0, 0, 0, 0, 448,
	449, 497, 450, 451, 452, 0, 0, 0, 213, 214,
	215, 216, 217, 0, 218, 0, 0, 0, 0, 453,
	0, 0, 0, 0, 219, 220, 221, 454, 455, 222,
	456, 223, 224, 457, 0, 225, 226, 227, 228, 229,
	230, 0, 0, 231, 458, 459, 460, 0, 232, 461,
	0, 0, 0, 233, 234, 235, 236, 237, 0, 239,
	240, 241, 238, 0, 242, 0, 243, 244, 245, 0,
	0, 246, 247, 0, 0, 0, 0, 0, 0, 0,
	248, 249, 250, 251, 252, 253, 462, 463, 0, 254,
	0, 256, 255, 0, 257, 0, 0, 258, 259, 260,
	0, 261, 0, 262, 263, 0, 464, 264, 265, 267,
	270, 266, 271, 272, 273, 465, 466, 0, 0, 0,
	0, 0, 0, 0, 274, 275, 276, 467, 277, 278,
	0, 279, 0, 280, 0, 0, 0, 281, 282, 0,
	283, 468, 0, 469, 284, 0, 285, 286, 287, 288,
	289, 290, 291, 1184, 471, 472, 0, 0, 476, 293,
	0, 0, 0, 0, 292, 294, 301, 0, 0, 295,
	473, 297, 296, 298, 299, 300, 474, 0, 475, 0,
	302, 0, 0, 303, 304, 305, 0, 306, 307, 0,
	0, 308, 309, 310, 311, 0, 313, 312, 0, 314,
	477, 0, 315, 316, 0, 0, 317, 318, 0, 0,
	319, 0, 320, 321, 324, 322, 323, 325, 327, 328,
	326, 0, 329, 330, 332, 331, 0, 0, 0, 0,
	478, 479, 333, 334, 0, 335, 336, 337, 0, 0,
	339, 340, 0, 0, 341, 480, 0, 342, 0, 481,
	343, 338, 344, 345, 346, 347, 348, 349, 0, 350,
	482, 351, 483, 352, 0, 353, 0, 354, 355, 356,
	357, 358, 359, 484, 360, 361, 0, 362, 363, 364,
	365, 366, 0, 368, 369, 370, 367, 371, 372, 373,
	374, 0, 375, 0, 376, 377, 378, 379, 485, 380,
	0, 381, 385, 386, 387, 388, 389, 390, 391, 0,
	398, 399, 392, 394, 395, 396, 393, 397, 400, 401,
	0, 402, 382, 383, 403, 0, 404, 486, 405, 406,
	0, 416, 407, 408, 409, 384, 410, 414, 415, 411,
	412, 413, 487, 0, 418, 419, 417, 0, 420, 421,
	422, 423, 424, 268, 425, 269, 426, 0, 488, 489,
	490, 427, 0, 0, 428, 429, 491, 430, 492, 0,
	431, 432, 433, 0, 434, 435, 0, 0, 436, 437,
	438, 439, 441, 0, 442, 0, 440, 443, 444, 445,
	493, 494, 495, 207, 447, 446, 496, 0, 0, 0,
	0, 448, 449, 497, 450, 451, 452, 0, 0, 0,
	213, 214, 215, 216, 217, 0, 218, 0, 0, 0,
	0, 453, 0, 0, 0, 0, 219, 220, 221, 454,
	455, 222, 456, 223, 224, 457, 0, 225, 226, 227,
	228, 229, 230, 0, 0, 231, 458, 459, 460, 0,
	232, 461, 0, 0, 0, 233, 234, 235, 236, 237,
	0, 239, 240, 241, 238, 0, 242, 0, 243, 244,
	245, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 0, 248, 249, 250, 251, 252, 253, 462, 463,
	0, 254, 0, 256, 255, 0, 257, 0, 0, 258,
	259, 260, 0, 261, 0, 262, 263, 0, 464, 264,
	265, 267, 270, 266, 271, 272, 273, 465, 466, 0,
	0, 0, 0, 0, 0, 0, 274, 275, 276, 467,
	277, 278, 0, 279, 0, 280, 0, 0, 0, 281,
	282, 0, 283, 468, 0, 469, 284, 0, 285, 286,
	287, 288, 289, 290, 291, 470, 471, 472, 0, 0,
	476, 293, 0, 0, 0, 0, 292, 294, 301, 0,
	0, 295, 473, 297, 296, 298, 299, 300, 474, 0,
	475, 0, 302, 0, 0, 303, 304, 305, 0, 306,
	307, 0, 0, 308, 309, 310, 311, 0, 313, 312,
	0, 314, 477, 0, 315, 316, 0, 0, 317, 318,
	0, 0, 319, 0, 320, 321, 324, 322, 323, 325,
	327, 328, 326, 0, 329, 330, 332, 331, 0, 0,
	0, 0, 478, 479, 333, 334, 0, 335, 336, 337,
	0, 0, 339, 340, 0, 0, 341, 480, 0, 342,
	0, 481, 343, 338, 344, 345, 346, 347, 348, 349,
	0, 350, 482, 351, 483, 352, 0, 353, 0, 354,
	355, 356, 357, 358, 359, 484, 951, 361, 0, 362,
	363, 364, 365, 366, 0, 368, 369, 370, 367, 371,
	372, 373, 374, 0, 375, 0, 376, 377, 378, 379,
	485, 380, 0, 381, 385, 386, 387, 388, 389, 390,
	391, 0, 398, 399, 392, 394, 395, 396, 393, 397,
	400, 401, 0, 402, 382, 383, 403, 0, 404, 486,
	405, 406, 0, 416, 407, 408, 409, 384, 410, 414,
	415, 411, 412, 413, 487, 0, 418, 419, 417, 0,
	420, 421, 422, 423, 424, 268, 425, 269, 426, 0,
	488, 489, 490, 427, 0, 0, 428, 429, 491, 430,
	492, 0, 431, 432, 433, 0, 434, 435, 0, 0,
	436, 437, 438, 439, 441, 0, 442, 0, 440, 443,
	444, 445, 493, 494, 495, 207, 447, 446, 496, 0,
	0, 0, 0, 448, 449, 497, 450, 451, 452, 0,
	0, 0, 213, 214, 215, 216, 217, 0, 218, 0,
	0, 0, 0, 453, 0, 0, 0, 0, 219, 220,
	221, 454, 455, 222, 456, 223, 224, 457, 0, 225,
	226, 227, 228, 229, 230, 0, 0, 231, 458, 459,
	460, 0, 232, 461, 0, 0, 0, 233, 234, 235,
	236, 237, 0, 239, 240, 241, 238, 0, 242, 0,
	243, 244, 245, 0, 0, 246, 247, 0, 0, 0,
	0, 0, 0, 0, 248, 249, 250, 251, 252, 253,
	462, 463, 0, 254, 0, 256, 255, 0, 257, 0,
	0, 258, 259, 260, 0, 261, 0, 262, 263, 0,
	464, 264, 265, 267, 270, 266, 271, 272, 273, 465,
	466, 0, 0, 0, 0, 0, 0, 0, 274, 275,
	276, 467, 277, 278, 0, 279, 0, 280, 0, 0,
	0, 281, 282, 0, 283, 468, 0, 469, 0, 0,
	285, 286, 287, 288, 289, 290, 291, 470, 471, 472,
	0, 0, 476, 293, 0, 0, 0, 0, 292, 294,
	301, 0, 0, 295, 473, 297, 296, 298, 299, 300,
	474, 0, 475, 0, 302, 0, 0, 303, 304, 305,
	0, 306, 307, 0, 0, 308, 309, 310, 311, 0,
	313, 312, 0, 314, 477, 0, 315, 316, 0, 0,
	317, 318, 0, 0, 319, 0, 320, 321, 324, 322,
	323, 325, 327, 328, 326, 0, 329, 330, 332, 331,
	0, 0, 0, 0, 478, 479, 333, 334, 0, 335,
	336, 337, 0, 0, 339, 340, 0, 0, 341, 480,
	0, 342, 0, 481, 343, 338, 344, 345, 0, 347,
	348, 349, 0, 350, 482, 351, 483, 352, 0, 353,
	0, 354, 355, 356, 0, 358, 359, 484, 360, 361,
	0, 362, 363, 364, 365, 366, 0, 368, 369, 370,
	367, 371, 372, 373, 374, 0, 375, 0, 376, 377,
	378, 379, 485, 0, 0, 381, 385, 386, 387, 388,
	389, 390, 391, 0, 398, 399, 392, 394, 395, 396,
	393, 397, 400, 401, 0, 402, 382, 383, 403, 0,
	404, 486, 405, 406, 0, 416, 407, 408, 409, 384,
	410, 414, 415, 411, 412, 413, 487, 0, 418, 419,
	417, 0, 420, 421, 422, 423, 424, 268, 425, 269,
	426, 0, 488, 489, 490, 427, 0, 0, 428, 429,
	491, 430, 492, 0, 431, 432, 433, 0, 434, 435,
	0, 0, 436, 437, 438, 439, 441, 0, 442, 0,
	440, 443, 444, 445, 493, 494, 495, 0, 447, 446,
	496, 0, 0, 0, 0, 448, 449, 497, 450, 451,
	452, 1395, 1396, 0, 1428, 1429, 1430, 1438, 1439, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1431, 0, 0, 0, 0, 0, 0, 1398, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1397, 0, 0, 0, 0, 0, 0,
	0, 1417, 0, 0, 0, 0, 0, 0, 1414, 0,
	0, 0, 0, 0, 0, 0, 1395, 1396, 0, 1428,
	1429, 1430, 1438, 1439, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1431, 0, 0, 0, 0,
	0, 0, 1398, 0, 0, 1444, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1420, 1421, 1422, 1423, 0, 1397, 0,
	0, 0, 0, 1403, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 1414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1435,
	1445, 0, 0, 1425, 1426, 1427, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1441, 1442, 0, 0, 0, 0,
	0, 0, 1412, 1413, 0, 0, 0, 0, 1420, 1421,
	1422, 1423, 0, 0, 0, 0, 0, 1433, 1403, 0,
	0, 0, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 1435, 1445, 0, 0, 1425, 1426,
	1427, 0, 0, 0, 0, 1432, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1441,
	1442, 0, 0, 0, 0, 0, 0, 1412, 1413, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 1424, 0, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1419, 0, 0, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 0, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1424, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 0,
	0, 0, 1395, 1396, 0, 1428, 1429, 1430, 1438, 1439,
	1440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1431, 0, 1436, 0, 0, 0, 0, 1398, 0,
	1434, 1444, 0, 1409, 1410, 1416, 1415, 1411, 1437, 0,
	1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405, 0,
	0, 0, 0, 0, 1397, 0, 0, 2394, 0, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 1414,
	0, 0, 0, 0, 0, 0, 0, 1395, 1396, 0,
	1428, 1429, 1430, 1438, 1439, 1440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1431, 0, 0, 0,
	0, 0, 0, 1398, 0, 1434, 1444, 0, 1409, 1410,
	1416, 1415, 1411, 1437, 0, 1408, 1406, 1407, 1399, 1400,
	1401, 1402, 1404, 1405, 1420, 1421, 1422, 1423, 0, 1397,
	0, 0, 2391, 0, 1403, 0, 0, 1417, 0, 0,
	0, 0, 0, 0, 1414, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1435, 1445, 0, 0, 1425, 1426, 1427, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1441, 1442, 0, 0, 0,
	0, 0, 0, 1412, 1413, 0, 0, 0, 0, 1420,
	1421, 1422, 1423, 0, 0, 0, 0, 0, 1433, 1403,
	0, 0, 0, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 0, 0, 1435, 1445, 0, 0, 1425,
	1426, 1427, 0, 0, 0, 0, 1432, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1441, 1442, 0, 0, 0, 0, 0, 0, 1412, 1413,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1433, 0, 0, 1424, 0, 0, 0,
	1418, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1432, 0, 0, 0, 0, 0, 0, 0, 1436,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1424, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1419,
	0, 0, 0, 1395, 1396, 0, 1428, 1429, 1430, 1438,
	1439, 1440, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1431, 0, 1436, 0, 0, 0, 0, 1398,
	0, 1434, 1444, 0, 1409, 1410, 1416, 1415, 1411, 1437,
	0, 1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405,
	0, 0, 0, 0, 0, 1397, 0, 0, 2390, 0,
	0, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	1414, 0, 0, 0, 0, 0, 0, 0, 1395, 1396,
	0, 1428, 1429, 1430, 1438, 1439, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1431, 0, 0,
	0, 0, 0, 0, 1398, 0, 1434, 1444, 0, 1409,
	1410, 1416, 1415, 1411, 1437, 0, 1408, 1406, 1407, 1399,
	1400, 1401, 1402, 1404, 1405, 1420, 1421, 1422, 1423, 0,
	1397, 0, 0, 2389, 0, 1403, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 1414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1435, 1445, 0, 0, 1425, 1426, 1427, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1441, 1442, 0, 0,
	0, 0, 0, 0, 1412, 1413, 0, 0, 0, 0,
	1420, 1421, 1422, 1423, 0, 0, 0, 0, 0, 1433,
	1403, 0, 0, 0, 0, 0, 1418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1443, 0, 0, 1435, 1445, 0, 0,
	1425, 1426, 1427, 0, 0, 0, 0, 1432, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1441, 1442, 0, 0, 0, 0, 0, 0, 1412,
	1413, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 1424, 0, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1419, 0, 0, 1443, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 0, 0,
	1436, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1424, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 0, 0, 0, 1395, 1396, 0, 1428, 1429, 1430,
	1438, 1439, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1431, 0, 1436, 0, 0, 0, 0,
	1398, 0, 1434, 1444, 0, 1409, 1410, 1416, 1415, 1411,
	1437, 0, 1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404,
	1405, 0, 0, 0, 0, 0, 1397, 0, 0, 1973,
	0, 0, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 1414, 0, 0, 0, 0, 0, 0, 0, 1395,
	1396, 0, 1428, 1429, 1430, 1438, 1439, 1440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1431, 0,
	0, 0, 0, 0, 0, 1398, 0, 1434, 1444, 0,
	1409, 1410, 1416, 1415, 1411, 1437, 0, 1408, 1406, 1407,
	1399, 1400, 1401, 1402, 1404, 1405, 1420, 1421, 1422, 1423,
	3218, 1397, 0, 0, 0, 0, 1403, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 1414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1435, 1445, 0, 0, 1425, 1426, 1427, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1441, 1442, 0,
	0, 0, 0, 0, 0, 1412, 1413, 0, 0, 0,
	0, 1420, 1421, 1422, 1423, 0, 0, 0, 0, 0,
	1433, 1403, 0, 0, 0, 0, 0, 1418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1443, 0, 0, 1435, 1445, 0,
	0, 1425, 1426, 1427, 0, 0, 0, 0, 1432, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1441, 1442, 0, 0, 0, 0, 0, 0,
	1412, 1413, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1433, 0, 0, 1424, 0,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 0, 0, 1443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1432, 0, 0, 0, 0, 0, 0,
	0, 1436, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1424, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1419, 0, 0, 0, 1395, 1396, 0, 1428, 1429,
	1430, 1438, 1439, 1440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1431, 0, 1436, 0, 0, 0,
	0, 1398, 0, 1434, 1444, 0, 1409, 1410, 1416, 1415,
	1411, 1437, 0, 1408, 1406, 1407, 1399, 1400, 1401, 1402,
	1404, 1405, 0, 0, 0, 0, 3214, 1397, 0, 0,
	0, 0, 0, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 1414, 0, 0, 0, 0, 0, 0, 0,
	1395, 1396, 0, 1428, 1429, 1430, 1438, 1439, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1431,
	0, 0, 0, 0, 0, 0, 1398, 0, 1434, 1444,
	0, 1409, 1410, 1416, 1415, 1411, 1437, 0, 1408, 1406,
	1407, 1399, 1400, 1401, 1402, 1404, 1405, 1420, 1421, 1422,
	1423, 3149, 1397, 0, 0, 0, 0, 1403, 0, 0,
	1417, 0, 0, 0, 0, 0, 0, 1414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1435, 1445, 0, 0, 1425, 1426, 1427,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1441, 1442,
	0, 0, 0, 0, 0, 0, 1412, 1413, 0, 0,
	0, 0, 1420, 1421, 1422, 1423, 0, 0, 0, 0,
	0, 1433, 1403, 0, 0, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 0, 0, 1435, 1445,
	0, 0, 1425, 1426, 1427, 0, 0, 0, 0, 1432,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1441, 1442, 0, 0, 0, 0, 0,
	0, 1412, 1413, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 1424,
	0, 0, 0, 1418, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 0, 0,
	1443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1424, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1419, 0, 0, 0, 1395, 1396, 0, 1428,
	1429, 1430, 1438, 1439, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1431, 0, 1436, 0, 0,
	0, 0, 1398, 0, 1434, 1444, 0, 1409, 1410, 1416,
	1415, 1411, 1437, 0, 1408, 1406, 1407, 1399, 1400, 1401,
	1402, 1404, 1405, 0, 0, 0, 0, 3148, 1397, 0,
	0, 0, 0, 0, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 1414, 0, 0, 0, 0, 0, 0,
	0, 1395, 1396, 0, 1428, 1429, 1430, 1438, 1439, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1431, 0, 0, 0, 0, 0, 0, 1398, 0, 1434,
	1444, 0, 1409, 1410, 1416, 1415, 1411, 1437, 0, 1408,
	1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405, 1420, 1421,
	1422, 1423, 3057, 1397, 0, 0, 0, 0, 1403, 0,
	0, 1417, 0, 0, 0, 0, 0, 0, 1414, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1435, 1445, 0, 0, 1425, 1426,
	1427, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1441,
	1442, 0, 0, 0, 0, 0, 0, 1412, 1413, 0,
	0, 0, 0, 1420, 1421, 1422, 1423, 0, 0, 0,
	0, 0, 1433, 1403, 0, 0, 0, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1443, 0, 0, 1435,
	1445, 0, 0, 1425, 1426, 1427, 0, 0, 0, 0,
	1432, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1441, 1442, 0, 0, 0, 0,
	0, 0, 1412, 1413, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1433, 0, 0,
	1424, 0, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 0,
	0, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1432, 0, 0, 0, 0,
	0, 0, 0, 1436, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1424, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1419, 0, 0, 0, 1395, 1396, 0,
	1428, 1429, 1430, 1438, 1439, 1440, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1431, 0, 1436, 0,
	0, 0, 0, 1398, 0, 1434, 1444, 0, 1409, 1410,
	1416, 1415, 1411, 1437, 0, 1408, 1406, 1407, 1399, 1400,
	1401, 1402, 1404, 1405, 0, 0, 0, 0, 2975, 1397,
	0, 0, 0, 0, 0, 0, 0, 1417, 0, 0,
	0, 0, 0, 0, 1414, 0, 0, 0, 0, 0,
	0, 0, 1395, 1396, 0, 1428, 1429, 1430, 1438, 1439,
	1440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1431, 0, 0, 0, 0, 0, 0, 1398, 0,
	1434, 1444, 0, 1409, 1410, 1416, 1415, 1411, 1437, 0,
	1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405, 1420,
	1421, 1422, 1423, 2931, 1397, 0, 0, 0, 0, 1403,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 1414,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1435, 1445, 0, 0, 1425,
	1426, 1427, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1441, 1442, 0, 0, 0, 0, 0, 0, 1412, 1413,
	0, 0, 0, 0, 1420, 1421, 1422, 1423, 0, 0,
	0, 0, 0, 1433, 1403, 0, 0, 0, 0, 0,
	1418, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	1435, 1445, 0, 0, 1425, 1426, 1427, 0, 0, 0,
	0, 1432, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1441, 1442, 0, 0, 0,
	0, 0, 0, 1412, 1413, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 0,
	0, 1424, 0, 0, 0, 1418, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1419,
	0, 0, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 0, 0,
	0, 0, 0, 0, 1436, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1424, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 0, 0, 0, 1395, 1396,
	0, 1428, 1429, 1430, 1438, 1439, 1440, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1431, 0, 1436,
	0, 0, 0, 0, 1398, 0, 1434, 1444, 0, 1409,
	1410, 1416, 1415, 1411, 1437, 0, 1408, 1406, 1407, 1399,
	1400, 1401, 1402, 1404, 1405, 0, 0, 0, 0, 2930,
	1397, 0, 0, 0, 0, 0, 0, 0, 1417, 0,
	0, 0, 0, 0, 0, 1414, 0, 0, 0, 0,
	0, 0, 0, 1395, 1396, 0, 1428, 1429, 1430, 1438,
	1439, 1440, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1431, 0, 0, 0, 0, 0, 0, 1398,
	0, 1434, 1444, 0, 1409, 1410, 1416, 1415, 1411, 1437,
	0, 1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405,
	1420, 1421, 1422, 1423, 2929, 1397, 0, 0, 0, 0,
	1403, 0, 0, 1417, 0, 0, 0, 0, 0, 0,
	1414, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1435, 1445, 0, 0,
	1425, 1426, 1427, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1441, 1442, 0, 0, 0, 0, 0, 0, 1412,
	1413, 0, 0, 0, 0, 1420, 1421, 1422, 1423, 0,
	0, 0, 0, 0, 1433, 1403, 0, 0, 0, 0,
	0, 1418, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1443, 0,
	0, 1435, 1445, 0, 0, 1425, 1426, 1427, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1441, 1442, 0, 0,
	0, 0, 0, 0, 1412, 1413, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1433,
	0, 0, 1424, 0, 0, 0, 1418, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1419, 0, 0, 1443, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1432, 0, 0,
	0, 0, 0, 0, 0, 1436, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1424, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1419, 0, 0, 0, 1395,
	1396, 0, 1428, 1429, 1430, 1438, 1439, 1440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1431, 0,
	1436, 0, 0, 0, 0, 1398, 0, 1434, 1444, 0,
	1409, 1410, 1416, 1415, 1411, 1437, 0, 1408, 1406, 1407,
	1399, 1400, 1401, 1402, 1404, 1405, 0, 0, 0, 0,
	2895, 1397, 0, 0, 0, 0, 0, 0, 0, 1417,
	0, 0, 0, 0, 0, 0, 1414, 0, 0, 0,
	0, 0, 0, 0, 1395, 1396, 0, 1428, 1429, 1430,
	1438, 1439, 1440, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1431, 0, 0, 0, 0, 0, 0,
	1398, 0, 1434, 1444, 0, 1409, 1410, 1416, 1415, 1411,
	1437, 0, 1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404,
	1405, 1420, 1421, 1422, 1423, 2711, 1397, 0, 0, 0,
	0, 1403, 0, 0, 1417, 0, 0, 0, 0, 0,
	0, 1414, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1435, 1445, 0,
	0, 1425, 1426, 1427, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1441, 1442, 0, 0, 0, 0, 0, 0,
	1412, 1413, 0, 0, 0, 0, 1420, 1421, 1422, 1423,
	0, 0, 0, 0, 0, 1433, 1403, 3304, 0, 0,
	0, 0, 1418, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1443,
	0, 0, 1435, 1445, 0, 0, 1425, 1426, 1427, 0,
	0, 0, 0, 1432, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1441, 1442, 0,
	0, 0, 0, 0, 0, 1412, 1413, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 1424, 0, 0, 0, 1418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1419, 0, 0, 1443, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1432, 0,
	0, 0, 0, 0, 0, 0, 1436, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3303, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1424, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1419, 0, 0, 0,
	1395, 1396, 0, 1428, 1429, 1430, 1438, 1439, 1440, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1431,
	0, 1436, 0, 0, 2319, 0, 1398, 0, 1434, 1444,
	0, 1409, 1410, 1416, 1415, 1411, 1437, 0, 1408, 1406,
	1407, 1399, 1400, 1401, 1402, 1404, 1405, 0, 0, 2348,
	0, 0, 1397, 0, 0, 0, 0, 0, 0, 0,
	1417, 0, 0, 0, 0, 0, 0, 1414, 0, 0,
	0, 0, 0, 0, 0, 1395, 1396, 0, 1428, 1429,
	1430, 1438, 1439, 1440, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1431, 2320, 0, 0, 0, 0,
	0, 1398, 0, 1434, 1444, 0, 1409, 1410, 1416, 1415,
	1411, 1437, 0, 1408, 1406, 1407, 1399, 1400, 1401, 1402,
	1404, 1405, 1420, 1421, 1422, 1423, 0, 1397, 0, 0,
	0, 0, 1403, 0, 0, 1417, 0, 0, 0, 0,
	0, 0, 1414, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1435, 1445,
	0, 0, 1425, 1426, 1427, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1441, 1442, 0, 0, 0, 0, 0,
	0, 1412, 1413, 0, 0, 0, 0, 1420, 1421, 1422,
	1423, 0, 0, 0, 0, 0, 1433, 1403, 0, 2434,
	0, 0, 2433, 1418, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1443, 0, 0, 1435, 1445, 0, 0, 1425, 1426, 1427,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1441, 1442,
	0, 0, 0, 0, 0, 0, 1412, 1413, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1433, 0, 0, 1424, 0, 0, 0, 1418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1419, 0, 0, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1432,
	0, 0, 0, 0, 0, 0, 0, 1436, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1424,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2061, 0, 0, 1419, 0, 0,
	0, 1395, 1396, 0, 1428, 1429, 1430, 1438, 1439, 1440,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1431, 0, 1436, 0, 2060, 0, 0, 1398, 0, 1434,
	1444, 0, 1409, 1410, 1416, 1415, 1411, 1437, 0, 1408,
	1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405, 0, 0,
	0, 0, 0, 1397, 0, 0, 0, 0, 0, 0,
	0, 1417, 0, 0, 0, 0, 0, 0, 1414, 0,
	0, 0, 0, 0, 0, 0, 1395, 1396, 0, 1428,
	1429, 1430, 1438, 1439, 1440, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1431, 0, 0, 0, 0,
	0, 0, 1398, 0, 1434, 1444, 0, 1409, 1410, 1416,
	1415, 1411, 1437, 0, 1408, 1406, 1407, 1399, 1400, 1401,
	1402, 1404, 1405, 1420, 1421, 1422, 1423, 0, 1397, 0,
	0, 0, 0, 1403, 0, 0, 1417, 0, 0, 0,
	0, 0, 0, 1414, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1435,
	1445, 0, 0, 1425, 1426, 1427, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1441, 1442, 0, 0, 0, 0,
	0, 0, 1412, 1413, 0, 0, 0, 0, 1420, 1421,
	1422, 1423, 0, 0, 0, 0, 0, 1433, 1403, 0,
	0, 0, 0, 0, 1418, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 1435, 1445, 0, 0, 1425, 1426,
	1427, 0, 0, 0, 0, 1432, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1441,
	1442, 0, 0, 0, 0, 0, 0, 1412, 1413, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1433, 0, 0, 1424, 0, 0, 0, 1418,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1419, 0, 0, 1443, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1432, 794, 0, 0, 0, 0, 0, 0, 1436, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1424, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1419, 0,
	0, 0, 1395, 1396, 0, 1428, 1429, 1430, 1438, 1439,
	1440, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1431, 0, 1436, 0, 0, 0, 0, 1398, 0,
	1434, 1444, 0, 1409, 1410, 1416, 1415, 1411, 1437, 0,
	1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405, 0,
	0, 0, 0, 0, 1397, 0, 0, 0, 0, 0,
	0, 0, 1417, 0, 0, 0, 0, 0, 0, 1414,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1434, 0, 0, 1409, 1410,
	1416, 1415, 1411, 1437, 0, 1408, 1406, 1407, 1399, 1400,
	1401, 1402, 1404, 1405, 1420, 1421, 1422, 1423, 0, 0,
	0, 0, 0, 0, 1403, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1395, 1396, 0, 1428, 1429, 1430, 1438, 1439, 1440, 0,
	1435, 1445, 0, 0, 1425, 1426, 1427, 0, 0, 1431,
	0, 0, 0, 0, 0, 0, 1398, 0, 0, 1444,
	0, 0, 0, 0, 0, 1441, 1442, 0, 0, 0,
	0, 0, 0, 1412, 1413, 0, 0, 0, 0, 0,
	0, 0, 1397, 0, 0, 0, 0, 0, 1433, 0,
	1417, 0, 0, 0, 0, 1418, 0, 1414, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1443, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1432, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1420, 1421, 1422, 1423, 0, 0, 0, 0,
	0, 0, 1403, 0, 0, 0, 1424, 2440, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1419, 0, 0, 0, 1435, 1445,
	0, 0, 1425, 1426, 1427, 0, 0, 1395, 1396, 0,
	1428, 1429, 1430, 1438, 1439, 1440, 0, 0, 0, 1436,
	0, 0, 0, 1441, 1442, 0, 1431, 0, 0, 0,
	2435, 1412, 1413, 1398, 0, 0, 1444, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1433, 0, 0, 0,
	0, 2701, 0, 1418, 0, 0, 0, 0, 0, 1397,
	0, 0, 0, 0, 0, 0, 0, 1417, 0, 0,
	1443, 0, 0, 0, 1414, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1434, 0, 0, 1409, 1410, 1416, 1415, 1411, 1437,
	0, 1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405,
	0, 0, 0, 0, 1424, 0, 0, 0, 0, 1420,
	1421, 1422, 1423, 0, 0, 0, 0, 0, 0, 1403,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1395, 1396, 0, 1428, 1429, 1430,
	1438, 1439, 1440, 0, 0, 1435, 1445, 1436, 0, 1425,
	1426, 1427, 0, 1431, 0, 0, 0, 0, 0, 0,
	1398, 0, 0, 1444, 0, 0, 0, 0, 0, 0,
	1441, 1442, 0, 0, 0, 0, 0, 0, 1412, 1413,
	0, 0, 0, 0, 0, 0, 1397, 0, 0, 0,
	0, 0, 0, 1433, 1417, 0, 0, 0, 0, 0,
	1418, 1414, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 1432, 1409, 1410, 1416, 1415, 1411, 1437, 0, 1408,
	1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405, 0, 0,
	0, 0, 0, 0, 0, 0, 1420, 1421, 1422, 1423,
	0, 0, 0, 0, 0, 0, 1403, 0, 0, 0,
	0, 1424, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1419,
	0, 0, 1435, 1445, 0, 0, 1425, 1426, 1427, 0,
	0, 1395, 1396, 0, 1428, 1429, 1430, 1438, 1439, 1440,
	0, 0, 0, 0, 1436, 0, 0, 1441, 1442, 0,
	1431, 0, 0, 0, 2388, 1412, 1413, 1398, 0, 0,
	1444, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1433, 0, 0, 0, 0, 0, 0, 1418, 0, 0,
	0, 0, 0, 1397, 0, 0, 0, 0, 0, 0,
	0, 1417, 0, 0, 1443, 0, 0, 0, 1414, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1432, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2402, 0, 1434, 0, 0, 1409,
	1410, 1416, 1415, 1411, 1437, 0, 1408, 1406, 1407, 1399,
	1400, 1401, 1402, 1404, 1405, 0, 0, 0, 1424, 0,
	0, 0, 0, 1420, 1421, 1422, 1423, 0, 0, 0,
	0, 0, 0, 1403, 0, 0, 1419, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1395, 1396,
	0, 1428, 1429, 1430, 1438, 1439, 1440, 0, 0, 1435,
	1445, 1436, 0, 1425, 1426, 1427, 0, 1431, 0, 0,
	0, 0, 0, 0, 1398, 0, 0, 1444, 0, 0,
	0, 0, 0, 0, 1441, 1442, 0, 0, 0, 0,
	0, 0, 1412, 1413, 0, 0, 0, 0, 0, 0,
	1397, 0, 0, 0, 0, 0, 0, 1433, 1417, 0,
	0, 0, 0, 0, 1418, 1414, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1443, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1434, 0, 1432, 1409, 1410, 1416, 1415,
	1411, 1437, 0, 1408, 1406, 1407, 1399, 1400, 1401, 1402,
	1404, 1405, 0, 0, 0, 0, 0, 0, 0, 0,
	1420, 1421, 1422, 1423, 0, 0, 0, 0, 0, 0,
	1403, 0, 0, 0, 0, 1424, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1419, 0, 0, 1435, 1445, 0, 0,
	1425, 1426, 1427, 0, 0, 1395, 1396, 0, 1428, 1429,
	1430, 1438, 1439, 1440, 0, 0, 0, 0, 1436, 0,
	0, 1441, 1442, 0, 1431, 0, 0, 0, 0, 1412,
	1413, 1398, 0, 0, 1444, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1433, 0, 0, 0, 0, 0,
	0, 1418, 0, 0, 0, 0, 0, 1397, 0, 0,
	0, 0, 0, 0, 0, 1417, 0, 0, 1443, 0,
	0, 0, 1414, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1432, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1434, 0, 0, 1409, 1410, 1416, 1415, 1411, 1437, 0,
	1408, 1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405, 0,
	0, 0, 1424, 0, 0, 0, 0, 1420, 1421, 1422,
	1423, 0, 0, 0, 0, 0, 0, 1403, 0, 0,
	1419, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1395, 1396, 0, 1428, 1429, 1430, 1438, 1439, 1440, 0,
	0, 0, 0, 1435, 1445, 1436, 0, 1425, 1426, 1427,
	0, 0, 0, 0, 0, 0, 1398, 0, 0, 1444,
	0, 0, 0, 0, 0, 0, 0, 0, 1441, 1442,
	0, 0, 0, 0, 0, 0, 1412, 1413, 0, 0,
	0, 0, 1397, 0, 0, 0, 0, 0, 0, 0,
	1417, 1433, 0, 0, 0, 0, 0, 1414, 1418, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1443, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1434, 0, 0,
	1409, 1410, 1416, 1415, 1411, 1437, 0, 1408, 1406, 1407,
	1399, 1400, 1401, 1402, 1404, 1405, 0, 0, 0, 0,
	0, 0, 1420, 1421, 1422, 1423, 0, 0, 0, 0,
	0, 0, 1403, 0, 0, 0, 0, 0, 0, 1424,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1419, 1435, 1445,
	0, 0, 1425, 1426, 1427, 0, 0, 1395, 1396, 0,
	1428, 1429, 1430, 1438, 1439, 1440, 0, 0, 0, 0,
	0, 0, 1436, 1441, 1442, 0, 0, 0, 0, 0,
	0, 1412, 1413, 1398, 0, 0, 1444, 0, 0, 0,
	0, 0, 1603, 0, 0, 0, 1433, 0, 0, 0,
	0, 0, 0, 1418, 0, 0, 0, 0, 0, 1397,
	0, 0, 0, 0, 0, 0, 0, 1417, 0, 0,
	1443, 0, 0, 0, 1414, 0, 0, 0, 0, 1615,
	1597, 1604, 1587, 1625, 1624, 0, 0, 1589, 1588, 0,
	0, 0, 0, 0, 0, 1635, 1636, 0, 0, 0,
	0, 0, 0, 0, 1434, 0, 0, 1409, 1410, 1416,
	1415, 1411, 1437, 0, 1408, 1406, 1407, 1399, 1400, 1401,
	1402, 1404, 1405, 0, 1424, 0, 0, 0, 0, 1420,
	1421, 1422, 1423, 0, 0, 1626, 0, 1622, 1621, 1403,
	0, 0, 1419, 0, 0, 0, 0, 0, 0, 1620,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1435, 1445, 1436, 0, 1425,
	1426, 1427, 0, 0, 0, 0, 0, 0, 1619, 1617,
	1618, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1412, 1413,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1599, 0, 0, 1433, 0, 0, 0, 0, 0, 0,
	1418, 1608, 1602, 1610, 1612, 1613, 1614, 1609, 0, 1607,
	0, 0, 0, 0, 0, 0, 0, 0, 1631, 1632,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1434,
	0, 0, 1409, 1410, 1416, 1415, 1411, 1437, 0, 1408,
	1406, 1407, 1399, 1400, 1401, 1402, 1404, 1405, 0, 0,
	1591, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1623, 0, 0, 0, 1600, 0, 1601, 0,
	0, 1424, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1419,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1616, 0, 0, 0, 1584, 1582,
	1583, 1586, 1585, 0, 1436, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1592, 1593, 1595, 1596, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1611, 1594,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1634,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1590, 0, 1627,
	1628, 1629, 1630, 0, 0, 0, 1434, 0, 0, 1409,
	1410, 1416, 1415, 1411, 1437, 0, 1408, 1406, 1407, 1399,
	1400, 1401, 1402, 1404, 1405, 0, 0, 1598, 0, 0,
	0, 0, 1605, 1633,
}
var sqlPact = [...]int{

	3835, -1000, -35, -1000, -1000, -1000, -1000, -1000, 126, 125,
	122, 120, 110, 106, 104, 103, 100, -1000, -1000, -1000,
	99, -1000, -1000, 97, -1000, -1000, 92, 90, 88, -1000,
	87, 86, -1000, -1000, -1000, -1000, 85, 80, 79, 46899,
	1412, 56249, 48117, 1631, 1904, 41613, 55841, 41205, 55433, 55025,
	77, -1000, 54617, 76, 75, 74, -1000, -1000, 73, 1213,
	33423, 72, 71, 70, 1482, 69, 65, -1000, 62, -1000,
	9056, 1085, -1000, 56, 55, -1000, 7515, 500, 47709, 1887,
	53, 52, 33014, 1885, -1000, -1000, 1097, -1000, -1000, 51,
	49, 47, 46, 45, 44, 42, 41, 39, -1000, 38,
	37, 36, 35, 34, 33, 31, 30, 27, 25, 24,
	17, 16, 15, 14, 13, -1000, 7176, 1289, 1214, 1204,
	1202, 1190, 1182, 720, 12, 7, 5, 2, -2, -3,
	-1000, -1000, -6, -7, -8, -12, -1000, -13, -14, 108,
	-16, -17, -18, -20, -23, 1634, 1894, 1256, 503, 16368,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	60269, 56651, -24, -62, -28, -1000, 2215, 802, 28108, 3835,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 385,
	-1000, -1000, -1000, 195, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1379, 572,
	-1000, -1000, -1000, 54209, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 56651, -1000, 1411, 9, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 571, -1000, 1410, 233, 1345, -1000, -1000,
	-1000, -1000, -1000, 56651, -1000, -1000, 2444, 2438, 1389, 570,
	53807, -1000, 1755, -1000, 673, 16799, -1000, 921, -1000, 16799,
	184, -1000, -1000, -1000, -1000, -1000, 40797, 13351, 40389, 39981,
	37137, 53399, 12933, 46497, 897, -1000, -1000, -1000, -1000, -1000,
	-38, 34629, 56651, -1000, 175, -1000, -1000, -1000, -1000, -1000,
	-1000, 24294, 417, 23849, 247, 23404, 246, -1000, -1000, -1000,
	-1000, 2437, 2436, 800, 2435, 2052, 59867, 1254, 2432, 1129,
	863, 737, 2428, 2427, 2421, 2420, 2414, 2413, 2412, 1010,
	52991, 1910, 36719, 36301, 46899, 46899, 1790, 52583, -1000, -1000,
	987, 930, -1000, -1000, -1000, -1000, 2010, 1903, 1902, 46089,
	-1000, -1000, 2411, 2408, 2407, 2406, 2405, 59465, 1228, 2404,
	1657, 2403, 2402, 2399, 2398, 2397, 2395, 2394, 2393, 2392,
	-1000, 45681, 45273, 44865, 44457, 52175, 35883, 35465, -1000, -1000,
	-1000, 29736, 4375, 51767, 30574, 46899, -1000, -1000, 24725, 64,
	-1000, -1000, -1000, 1889, -1000, 24725, 64, -1000, 1352, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1630, 1156, 2286, 35047,
	1386, 1016, 2004, 2391, 1610, 2002, 2001, 2000, 1994, 1988,
	2390, 1116, 2389, 1100, 2388, 1987, 1985, 2335, 1426, 39573,
	2385, 2383, 2120, 1984, 1886, -1000, -1000, -1000, -1000, 1070,
	-1000, -1000, -1000, 42015, -1000, -1000, 1463, -1000, -1000, 1463,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 896, 58661, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1148, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1648, -1000, 1385, -1000, -1000, 2382, 1894,
	1536, 2093, 2093, 2093, 2157, 363, 359, -1000, 108, -1000,
	-1000, 66047, -1000, -1000, 24725, 24725, 24725, 24725, 24725, 1288,
	-1000, 569, -1000, -1000, 592, -1000, 566, 505, -1000, -1000,
	-1000, -1000, -1000, -1000, 555, 2321, -1000, 814, -1000, -1000,
	-1000, -1000, 2253, -1000, 15492, -1000, -1000, -1000, 326, 554,
	24725, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 173, 700, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 495, 1238, 492, 492, 492, -1000, -1000,
	731, -1000, -1000, -1000, 661, -1000, 659, -1000, -1000, -1000,
	-1000, -1000, 1907, 553, 552, -1000, 541, 539, 537, -1000,
	-1000, -1000, 535, 533, 531, 529, 528, 524, 523, 521,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 726, -1000, 519,
	517, 516, 515, 513, 512, 511, 509, 508, -1000, -1000,
	-44, 56651, -1000, 385, -44, -1000, -1000, 507, -1000, 18537,
	18537, 18537, -1000, -1000, 1407, 24725, -1000, 1811, -1000, 3606,
	-235, 619, 28920, -1000, 27277, 619, 604, 31794, -1000, 1884,
	-1000, -1000, 506, 166, -1000, -1000, -1000, 1879, 56651, 13767,
	46899, 46899, -1000, -1000, 24725, -1000, -1000, 37553, 34227, 56651,
	47301, 2214, 66568, 34227, 56651, 1906, -1000, -1000, -1000, 56651,
	-1000, 24725, -1000, 2210, 1550, -53, -1000, -1000, -1000, -1000,
	-1000, 1623, 1603, 842, 998, -1000, 16799, 2018, -1000, -1000,
	-1000, 161, 13767, -1000, 1329, 2005, 1015, -1000, 1432, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1185, 2003, -1000,
	1186, 1995, 1158, -1000, -1000, 707, 1993, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1391, -1000, -1000, 2090,
	-1000, -1000, 1663, 1992, -154, 37553, 34629, -47, -1000, -1000,
	-57, -1000, 12515, 66047, -1000, -1000, -1000, 66047, 699, -1000,
	-1000, 1991, -1000, 66047, 693, -1000, -1000, 1990, -1000, -1000,
	-1000, 2381, -1000, 2380, 1576, 2378, 2377, 2375, -1000, 1235,
	1232, 2372, -1000, 2371, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 44049, 43641, 724, -1000, 1403, -1000, -1000, 43233, 703,
	1572, -1000, -1000, 1567, -1000, 723, -1000, 2361, 51359, 1771,
	703, 1565, -1000, -1000, -1000, -1000, -1000, 46899, -1000, 46899,
	-1000, 46899, -1000, 1045, -1000, 59063, -235, -1000, -1000, -1000,
	-1000, -1000, 1989, 2359, 2355, 2354, -1000, 56651, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 151, 1986, -1000,
	-1000, 151, 1983, -1000, 151, 1981, -1000, 149, 1980, -1000,
	-1000, 1404, 1979, -1000, -65, 1978, -1000, -1000, -65, 1974,
	-1000, -67, -1000, -1000, -1000, 802, -1000, 29328, 50951, 37553,
	666, 522, 66047, -1000, 37553, 66047, -1000, -1000, 50543, 42831,
	-1000, -1000, 1000, 1672, -1000, -1000, -1000, -1000, 37553, 37553,
	-1000, 50135, -1000, -1000, -1000, 1373, 2092, 46899, -1000, -1000,
	1905, -1000, 33825, 46899, -1000, 46899, -1000, 46899, -1000, 46899,
	-1000, 46899, -1000, -1000, -1000, -1000, -1000, 2046, 1225, 1224,
	-1000, 56651, -1000, 56651, -1000, -1000, -1000, 1622, -1000, -1000,
	-1000, -1000, 46899, -1000, -1000, -1000, -1000, -1000, -1000, 1901,
	-1000, 1122, -1000, 995, -1000, -1000, 152, -1000, -1000, -53,
	-1000, 58661, -1000, -1000, 1894, 1536, -1000, 56651, -1000, -1000,
	-1000, 1894, 1390, 1708, 22959, 1683, 24725, 108, -1000, -1000,
	108, 108, 18106, -1000, -1000, 66568, 66568, 13767, 914, 24725,
	24725, 24725, 24725, 24725, 24725, 24725, 24725, 24725, 24725, 24725,
	24725, 24725, 24725, 24725, 24725, 24725, 24725, 24725, 24725, 24725,
	24725, 24725, 24725, 24725, 24725, 24725, 24725, 24725, 24725, 24725,
	24725, 24725, 24725, 24725, 1530, 24725, 893, 24725, 24725, 24725,
	24725, 1260, -1000, -1000, 1327, 415, 1374, -1000, 2257, 2257,
	2257, 66359, 66359, 494, 2353, 592, -1000, 24725, -1000, 64,
	24725, 14185, -1000, 2279, 1040, -1000, -1000, 359, 8265, 1490,
	-1000, 349, 14630, -1000, -1000, -1000, 15492, 505, 22514, 24725,
	715, 66047, 12099, 1891, 1827, -1000, 2276, -1000, -1000, 2253,
	-1000, -1000, -1000, 912, 911, 907, 890, 504, 620, 618,
	600, 575, 434, 24725, 24725, 24725, 24725, 24725, 24725, 24725,
	24725, -1000, 22083, 21638, 21193, 26018, 20748, 24725, 15923, 20303,
	19858, 56651, -44, 2209, 24725, 156, -1000, 64890, -1000, 156,
	156, 502, -68, 66047, 1692, 1681, 28514, 1609, 1310, 1310,
	1310, -1000, 499, 584, 619, 9586, 48519, 1298, 619, 619,
	148, 180, 347, 26871, 1811, 48519, -1000, -1000, 46899, 498,
	14185, 13767, 967, -69, 147, 1704, 1702, -1000, -70, 666,
	889, -46, -1000, 4035, -77, -1000, 846, -1000, -1000, -1000,
	-1000, 310, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 725, 497, 496, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 495,
	1238, 492, 492, 492, -1000, -1000, -1000, 661, -1000, 659,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1878, -57, 47301,
	660, -78, 805, -53, -1000, 1463, -1000, 1356, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2315, -1000, 2265, -1000, -1000, 2275, -45, -1000, -1000,
	13767, -1000, -54, 1169, -1000, 39165, 2075, 2069, 2068, 1035,
	-1000, 1020, 2155, 42015, 2184, 187, -1000, 1875, -1000, -1000,
	672, 961, 888, 42015, 1186, -1000, 66568, -1000, 1772, 2152,
	1034, 1030, 1034, 1034, 1026, -1000, 42015, 887, 1253, 37553,
	-1000, 885, -1000, -55, 2179, 133, -1000, 1873, 883, -1000,
	-1000, 46899, 13767, 649, -47, 34629, 56651, 145, -1000, 24725,
	64, 24725, 64, -1000, -1000, 1970, -1000, -1000, -1000, 2352,
	1208, 1650, -1000, -1000, -1000, 491, 1548, 1186, 1540, -1000,
	-1000, 42423, 56651, 1710, -51, 46899, -1000, -1000, 1251, -1000,
	1969, 1967, 478, 2351, -1000, 1388, 1529, -1000, -1000, -1000,
	58259, 917, 1962, 712, 314, 2205, 314, 32200, -1000, 56651,
	-1000, 56651, -1000, -1000, -1000, 2350, -1000, 46899, -1000, -1000,
	46899, -1000, 46899, -1000, 46899, -1000, 46899, 46899, -1000, 56651,
	37553, 37553, 37553, 4035, 38361, -83, 343, -1000, 49733, 56651,
	764, 38763, -214, 649, -1000, 649, -1000, 46899, 1899, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 56651, -1000,
	56651, -1000, -1000, -1000, -1000, -1000, -1000, 1079, -1000, 1897,
	-1000, 1896, -1000, 144, -1000, -1000, -1000, 1126, 46899, 46899,
	46899, -1000, 42015, -1000, -1000, 1894, -1000, -1000, -1000, -1000,
	-1000, 66047, -1000, 412, -1000, -1000, 66047, 1150, 1719, -1000,
	1719, -49, -1000, 64509, 1671, 46899, -1000, -1000, -1000, -1000,
	-1000, 671, 839, 839, 956, 956, 956, 956, 2199, 3445,
	3860, 3398, 4586, 4586, 4586, 4586, 4586, 4586, 4586, 4586,
	3316, 360, 360, 3316, 3316, 3316, 3316, 3316, 360, 360,
	360, 4586, 4586, 4586, 66359, 66214, 6404, 24725, 24725, 882,
	1326, 415, 5942, 24725, 6472, 6472, 6472, 6472, -1000, 1195,
	-1000, -1000, -1000, -1000, 1872, 490, 26018, 26018, -1000, -1000,
	-1000, -1000, 15061, 24725, -1000, -1000, -1000, -1000, 19413, -1000,
	-1000, 64128, -250, 342, -150, -29, -1000, 24725, 24725, 24725,
	341, -1000, 340, -1000, -1000, 865, -1000, 860, 858, 854,
	-1000, 489, 142, 24725, 56651, -1000, 61842, 583, -169, -1000,
	-86, 1024, -1000, 24725, 141, -1000, 1263, 488, 487, 339,
	-88, 668, 665, 664, 662, 24725, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 65900, 61536, 61461, 61155,
	5355, 61080, 8867, -89, 335, -1000, 1870, -150, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 333, -1000, 332, -1000, 65733,
	-150, 329, 5917, -1000, 26018, 26018, 26018, -1000, 324, -1000,
	64584, -1000, 65586, 18982, 18982, 18982, 321, 65419, 24725, -150,
	-91, -1000, -97, -1000, -1000, 485, -99, 712, 18537, 27699,
	13767, -1000, 712, 712, 24725, -1000, 24725, 28514, 28514, 1678,
	1680, 28514, -1000, -1000, -1000, -1000, 48519, 545, 619, 48519,
	-1000, 2253, 1679, -1000, -1000, -1000, 56651, 385, -1000, 48519,
	48519, 13767, 619, -1000, 320, 30980, -29, 137, -1000, -1000,
	13767, 1735, 1735, -1000, 1868, 56651, 2227, -1000, -1000, 66568,
	-1000, 591, 886, -1000, 2271, 484, -1000, 2253, 2253, 56651,
	109, 16799, -1000, 1463, -1000, -1000, 1110, -1000, 1221, -1000,
	-1000, -1000, -1000, 16799, -1000, 1380, 46899, 56651, 56651, -1000,
	-1000, 1516, 57857, 1503, 66568, 56651, -1000, -1000, 481, 480,
	1666, 1665, 56651, 56651, 57455, 57053, 56651, 1257, 24725, 1332,
	1312, 64, -1000, 64, 476, 909, 46899, 46899, 1155, -1000,
	-1000, -1000, -1000, -1000, 46899, -1000, -1000, 2267, -1000, 1034,
	-1000, -1000, -1000, 1034, 1186, 1149, 46899, 37553, 706, 56651,
	1266, 64, -1000, 64, 475, 13767, 1230, -1000, 1805, -1000,
	1420, -1000, -1000, 11683, 66047, -1000, 66047, -1000, 56651, -1000,
	721, 56651, 38763, 688, 1959, -1000, 1186, 1956, 385, -1000,
	-1000, 96, 666, 37553, 46899, -51, 37553, 37553, 37553, 2349,
	473, 2347, -1000, 46899, 1953, 1384, 1497, 2009, 634, 56651,
	1315, 24725, 1236, -1000, 31388, 747, 56651, 1117, 81, -1000,
	-1000, -1000, -9, 56651, -1000, 2346, -1000, -1000, 151, 151,
	151, -1000, 149, 1404, -1000, -65, -65, -1000, -1000, 4035,
	666, -52, 470, -1000, 645, 643, 30158, 37553, -100, -1000,
	-1000, -1000, -1000, -1000, 46899, 56651, 514, 1763, 56651, -1000,
	666, -1000, 705, -1000, 955, -57, -57, -1000, 1075, 1065,
	56651, 13767, 56651, 46899, 13767, 46899, -1000, -1000, -1000, -1000,
	-1000, 1150, -1000, 24725, -1000, -1000, -1000, 18106, -1000, -1000,
	-1000, 46899, -228, 24725, 24725, 5378, 4550, 24725, 26018, 26018,
	-1000, 24725, 4116, -1000, -1000, -1000, -1000, -1000, 1867, 469,
	24725, 66568, 5428, 5322, -1000, 319, 8790, 3316, -1000, 24725,
	-1000, 317, 17675, -1000, 64965, -37, -37, -1000, 2313, 1587,
	1272, 1188, 1091, 2258, 11267, -150, -106, -1000, -1000, 587,
	-1000, 2006, -1000, 24725, 65271, 10851, -1000, 32606, 713, 1315,
	-1000, -1000, 2253, -1000, -1000, -1000, -1000, 63822, 66568, 66568,
	24725, 24725, -1000, 24725, 24725, 24725, -1000, -1000, 24725, -1000,
	-1000, 1866, 24725, -1000, 66568, 66568, 26018, 26018, 26018, 26018,
	26018, 26018, 26018, 26018, 26018, 26018, 26018, 26018, 26018, 26018,
	26018, 26018, 26018, 26018, 26018, 1585, 26018, 2246, 2246, 2246,
	-1000, 1890, 1866, 24725, 24725, 66568, 312, 311, 305, -1000,
	24725, -150, -1000, -1000, 4035, -1000, 1817, -1000, -204, -1000,
	1811, -1000, -1000, 1817, 1817, -107, 66047, -1000, 1678, -1000,
	465, 24725, 28514, -1000, 582, -1000, -108, -1000, 48519, -1000,
	581, -252, -1000, 642, -1000, 385, -1000, -1000, -1000, 135,
	48519, -1000, -115, -1000, 2204, 300, 13767, -1000, -1000, -1000,
	-1000, -1000, 64, -57, 1337, -1000, 2256, -1000, 580, 298,
	2253, 297, 295, -57, 56651, -1000, -53, -1000, -1000, -1000,
	-1000, -1000, -1000, 850, 849, -1000, 1952, -1000, 1480, -1000,
	751, -1000, 1118, 24725, 24725, 462, 459, 1287, 2345, 1950,
	1404, 1948, 1404, -1000, -1000, 680, -1000, 66047, 458, 455,
	-1000, -54, 1166, -1000, -1000, 24725, 24725, 49327, -1000, 2090,
	-1000, 847, -1000, -1000, -1000, 1186, 833, -1000, -1000, 1247,
	-1000, -1000, -1000, -1000, 24725, -1000, -55, 832, 666, 1865,
	929, -1000, 2344, 2343, 2342, 293, -56, -1000, 2203, 1381,
	56651, 46899, 46899, 2201, 46899, -1000, -1000, -1000, -1000, 703,
	-1000, -1000, 2341, -1000, 756, 13767, 46899, 1943, 1632, 634,
	37959, -1000, 703, 1708, -1000, 66047, -1000, 1117, 17230, 2085,
	-116, -1000, 134, -1000, -1000, -1000, 712, 32200, 28514, 24725,
	2339, -117, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	48925, 48925, 37553, 37553, 37553, 666, 56651, 56651, 38763, 2331,
	454, 56651, 56651, 451, -1000, -1000, -1000, 1322, 46899, -1000,
	-1000, -1000, -1000, -1000, 1271, 1419, -1000, 1333, 63747, -1000,
	2091, 13767, 2208, 6472, 24725, 24725, 674, 4807, 3389, 6472,
	24725, 24725, 66568, 66526, -118, 24725, 24725, -1000, 24725, 579,
	66047, 2307, 24725, 290, 288, 286, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 283, -1000, -1000, -1000, -1000, -1000,
	66047, 24725, 132, -1000, -1000, -1000, 60671, -1000, 24725, 279,
	273, -1000, 269, 250, 8342, 271, 63441, 63366, 63060, 66047,
	1890, 66047, -1000, -1000, 776, 776, 1018, 1018, 1018, 1018,
	2246, 452, 817, 762, 437, 437, 437, 615, 735, 735,
	437, 437, 437, 1861, 1562, 450, 5754, -1000, -1000, 66047,
	66047, 244, -1000, -1000, -1000, -150, 241, 1820, 2147, -1000,
	28514, 1820, 1820, -1000, -1000, 56651, 66047, -1000, -235, -1000,
	2253, -1000, -1000, 1679, -1000, 10015, -1000, 13767, -1000, -1000,
	30980, -1000, 440, -1000, 130, -1000, -1000, 576, -1000, -1000,
	240, -1000, -1000, -57, 56651, 56651, 56651, 1930, -1000, 1668,
	-1000, 62985, -123, -1000, 64509, 24725, 56651, -1000, 1291, 1644,
	790, -1000, 56651, -1000, 56651, -1000, -1000, 56651, 56651, 46899,
	56651, 56651, -124, 66047, -58, -1000, 641, -1000, 46899, 46899,
	37553, -125, 13767, -1000, 37553, 867, -1000, -1000, -1000, 1758,
	64, -1000, 2330, 438, 1186, 64, -1000, -1000, -1000, 424,
	56651, 1378, 423, 13767, 1638, 634, 37959, -1000, 917, 1117,
	-1000, -1000, -59, -1000, 449, 64, 56651, 2329, 1315, -1000,
	-60, 66047, -1000, 640, -1000, -126, -1000, -1000, 239, -1000,
	2036, 2033, -1000, -1000, 24725, 422, 420, 56651, 1590, -1000,
	-1000, -1000, 13767, 951, -1000, -1000, -1000, 2091, 6472, 6472,
	24725, 24725, 24725, 6472, 66526, -131, -1000, 6472, 6472, -150,
	-1000, -1000, 64965, -1000, -1000, -1000, -1000, 66047, 10435, 1276,
	-1000, 62679, -1000, -1000, -1000, -1000, 24725, 24725, -1000, -1000,
	-1000, -1000, -1000, 26018, 1860, 419, 66568, -1000, -1000, 701,
	24725, 24725, 1811, 701, 701, -133, 619, -1000, -1000, -1000,
	2253, 130, -1000, 2325, 13767, -1000, -1000, -1000, -1000, -1000,
	56651, -1000, 56651, -1000, 13767, 56651, 1845, 1474, -1000, -1000,
	1662, 416, 26018, 46899, 679, 1814, 1296, 24725, -1000, -138,
	-141, 1472, -1000, -1000, 1413, 24725, -1000, 66568, 1404, 1404,
	-144, -147, -1000, 830, 816, 813, 56651, 16799, -1000, -1000,
	-1000, 811, -1000, -65, 24725, 1266, 1792, 702, -1000, 38763,
	688, -1000, -1000, 24725, -1000, 46899, 24725, 1377, -1000, 634,
	37959, -1000, 2009, -1000, 1998, 56651, 2065, -1000, -1000, -1000,
	1708, 415, -1000, 666, 414, 413, -152, 24725, 24725, -163,
	-79, -1000, 653, 651, -1000, -1000, 46899, -1000, 6472, 6472,
	6472, -1000, 230, -1000, -1000, 1315, 2146, -1000, 62604, 62298,
	210, 26018, 66568, -168, -1000, 56651, 66047, -150, -1000, -1000,
	-1000, 48519, 574, -1000, -1000, 1342, -1000, -1000, -1000, 56651,
	1466, -1000, -1000, 24725, 5754, 411, 24725, -1000, -1000, 1734,
	1881, 1758, 410, -1000, -1000, -1000, -1000, 1199, -1000, -1000,
	66047, 2116, -1000, -1000, 402, 400, 56651, 56651, 399, 632,
	-1000, 398, 66047, 688, -1000, 1255, -1000, 1722, 229, 2197,
	-170, 756, -173, 46899, 37959, -1000, 1632, 927, -176, 56651,
	1117, -1000, -1000, 37553, 37553, 1296, -178, -179, -1000, 1590,
	-1000, 56651, -1000, 56651, -1000, -1000, 1262, 24725, -1000, -1000,
	210, -181, -1000, -140, -1000, 2196, -1000, -1000, -1000, -1000,
	1928, 62223, 1594, 56651, 61917, 1876, -1000, -1000, 1266, 56651,
	46899, 755, 13767, 1271, 1271, -1000, -1000, 24725, 16799, 24725,
	-1000, 46899, -1000, 2031, 1758, 64, 1296, 393, 1296, 390,
	-1000, 1638, 1031, -1000, 712, -1000, -1000, -184, -189, 1758,
	1296, -1000, -1000, -191, -192, 208, 25587, 25587, 25587, -150,
	-1000, 56651, 389, 1893, -1000, 1355, 1252, 181, 773, -1000,
	-1000, 1814, -197, 385, -1000, 24725, -1000, -205, -1000, 746,
	-206, -1000, 745, -207, -1000, -208, 384, -1000, 1266, 702,
	1758, 24725, 1758, 24725, -1000, 32200, -1000, 666, 666, 1266,
	1758, -1000, -1000, -1000, -1000, -1000, 26449, 1372, 1107, 64203,
	-1000, -1000, -1000, -1000, 56651, -1000, 1375, 1365, 1059, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1594, 66047, -1000,
	1271, 1778, -1000, 1271, 1849, -1000, -1000, 56651, 688, -1000,
	1266, -213, 1266, -215, -194, -1000, -1000, -1000, 1266, 2219,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1999, -1000, 781,
	1367, 1367, 1355, -1000, 382, -1000, 381, -231, -1000, 711,
	1296, 711, 1296, -1000, -1000, 25156, -1000, 2231, -1000, -1000,
	1523, -1000, 1814, 24725, 24725, 1376, -1000, 2289, 1758, -1000,
	1758, -1000, -1000, -1000, -1000, -1000, -232, -237, -1000, -1000,
	-1000, -1000, 1266, 1266, 1266, 810, 711, 711, -1000, 379,
	-1000, -1000, 24725, -240, 1266, -1000,
}
var sqlPgo = [...]int{

	0, 2964, 2960, 1936, 2954, 2952, 2951, 2948, 2946, 2944,
	2943, 2942, 2940, 2939, 2937, 2936, 2934, 2933, 2932, 2931,
	2928, 2926, 2924, 2923, 2921, 2920, 2917, 2916, 2909, 2903,
	2901, 2900, 2899, 2898, 2897, 2891, 2883, 2882, 2881, 2880,
	2879, 2878, 2877, 2873, 2872, 35, 2871, 2870, 2865, 2864,
	2862, 2861, 2855, 2853, 2852, 2849, 2842, 2839, 2836, 2834,
	2832, 2828, 2827, 2826, 2825, 2817, 2816, 2812, 2811, 2810,
	2809, 2808, 2806, 2805, 2804, 116, 2803, 2802, 2801, 2800,
	2798, 2794, 2792, 2791, 2790, 2789, 2788, 2786, 2785, 2784,
	166, 2783, 2782, 2781, 2780, 2777, 2775, 2774, 2772, 2771,
	2770, 184, 2765, 2764, 2763, 2762, 2761, 2760, 2759, 2758,
	2757, 2756, 2755, 2754, 2751, 2750, 2749, 2748, 2747, 2746,
	2745, 2744, 2743, 2742, 2741, 2740, 2739, 2737, 192, 129,
	2736, 2734, 2732, 2730, 2725, 2724, 90, 87, 19, 2723,
	80, 127, 175, 4489, 173, 2722, 2715, 2714, 2713, 2711,
	70, 123, 115, 122, 112, 75, 2709, 2706, 63, 45,
	29, 26, 97, 2699, 2698, 2697, 1885, 86, 2696, 2694,
	186, 176, 2691, 881, 2690, 124, 71, 84, 117, 62,
	2689, 102, 21, 2665, 121, 28, 2664, 109, 64, 27,
	5271, 6424, 78, 197, 65, 155, 162, 148, 160, 147,
	125, 154, 2663, 179, 111, 142, 2660, 2654, 2652, 44,
	138, 4, 3, 120, 11, 2648, 16, 2636, 7, 2630,
	2628, 2626, 2625, 74, 113, 41, 58, 2624, 17, 140,
	152, 2623, 158, 2621, 89, 2616, 188, 144, 161, 14,
	169, 2614, 2613, 2612, 2611, 2610, 93, 20, 85, 2609,
	2607, 103, 174, 2605, 32, 110, 69, 91, 191, 156,
	94, 165, 159, 2602, 2599, 2598, 132, 2594, 2593, 114,
	151, 2592, 2587, 30, 54, 170, 36, 2586, 2584, 108,
	2580, 146, 2578, 2577, 2575, 193, 128, 150, 9, 59,
	81, 10, 167, 106, 77, 66, 2574, 3777, 1056, 1380,
	2573, 100, 72, 31, 82, 104, 185, 39, 2572, 2570,
	261, 2569, 2566, 2565, 2564, 131, 2562, 2552, 2547, 95,
	38, 68, 2546, 107, 55, 247, 187, 60, 157, 164,
	180, 2545, 130, 2544, 136, 105, 2543, 139, 178, 73,
	2542, 669, 2536, 149, 2535, 2534, 2532, 2531, 214, 2530,
	2529, 363, 2528, 101, 2527, 2526, 134, 141, 88, 37,
	2525, 52, 351, 2524, 137, 56, 2522, 1789, 34, 0,
	6012, 5004, 5894, 2521, 1878, 2520, 145, 99, 2519, 2518,
	2517, 2516, 33, 15, 6, 8, 18, 13, 632, 499,
	2514, 2513, 67, 92, 118, 2512, 190, 153, 2511, 2510,
	2498, 57, 2497, 25, 2495, 22, 2494, 2493, 23, 5,
	2492, 2491, 177, 2489, 2488, 2486, 2485, 2215, 2484, 183,
	2483, 96, 2472, 126, 98, 2470, 2468, 2467, 2466, 182,
	2465, 181, 2464, 12, 24, 1, 2461, 2460, 2459, 143,
	2, 2059, 2453, 2451, 51, 135, 76, 2450, 2448, 133,
}
var sqlR1 = [...]int{

	0, 1, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 4, 4, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 5, 5, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 8, 8, 9, 9, 9, 33,
	33, 11, 11, 10, 10, 10, 12, 12, 7, 7,
	7, 7, 7, 7, 7, 7, 14, 14, 24, 24,
	15, 26, 419, 419, 18, 28, 19, 29, 13, 421,
	421, 421, 421, 22, 20, 20, 30, 139, 139, 17,
	17, 25, 25, 152, 152, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 151, 151, 151, 151, 151, 151,
	151, 151, 151, 151, 418, 418, 154, 154, 153, 149,
	149, 422, 422, 155, 155, 155, 157, 157, 34, 34,
	88, 88, 88, 140, 81, 81, 81, 81, 81, 81,
	81, 76, 76, 367, 367, 368, 368, 135, 135, 136,
	136, 136, 136, 137, 137, 138, 138, 138, 48, 36,
	36, 36, 36, 36, 36, 36, 37, 37, 37, 37,
	38, 38, 38, 38, 38, 38, 39, 39, 39, 39,
	39, 39, 46, 46, 46, 129, 129, 49, 49, 49,
	49, 49, 49, 49, 49, 49, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 426, 426, 426,
	426, 426, 426, 426, 426, 426, 426, 427, 427, 428,
	428, 429, 429, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 430, 430, 430, 430, 430, 430, 430,
	430, 430, 430, 51, 51, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 60, 60,
	50, 414, 414, 237, 237, 336, 336, 62, 62, 63,
	63, 63, 63, 63, 63, 64, 64, 64, 64, 64,
	64, 64, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 71, 71, 71, 72, 72, 72, 69, 69,
	69, 67, 67, 67, 66, 66, 66, 70, 70, 70,
	68, 68, 68, 238, 238, 73, 73, 73, 73, 73,
	73, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 338, 338, 74, 74, 308, 308, 77, 77, 267,
	267, 78, 78, 78, 78, 78, 79, 79, 79, 79,
	89, 89, 89, 89, 417, 417, 230, 230, 170, 170,
	170, 170, 84, 84, 84, 84, 85, 85, 85, 86,
	86, 134, 134, 95, 95, 95, 95, 95, 94, 94,
	94, 94, 94, 94, 40, 40, 40, 41, 41, 42,
	42, 43, 43, 44, 44, 45, 45, 45, 45, 45,
	97, 97, 423, 423, 99, 96, 96, 96, 98, 98,
	98, 98, 100, 101, 101, 101, 101, 101, 101, 102,
	102, 361, 361, 245, 245, 359, 359, 375, 375, 360,
	360, 207, 207, 207, 207, 207, 208, 208, 208, 366,
	366, 366, 366, 366, 366, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 119, 119, 119, 128, 128, 128, 128, 128,
	128, 128, 121, 121, 121, 112, 112, 104, 104, 104,
	104, 108, 108, 108, 108, 108, 105, 105, 109, 109,
	111, 111, 113, 113, 113, 113, 113, 113, 106, 106,
	106, 106, 115, 115, 115, 115, 114, 114, 124, 124,
	124, 124, 124, 124, 322, 322, 120, 120, 120, 120,
	123, 123, 123, 123, 118, 118, 118, 122, 122, 125,
	125, 125, 125, 107, 107, 107, 432, 432, 432, 126,
	126, 117, 117, 127, 127, 127, 127, 127, 127, 127,
	116, 116, 116, 420, 420, 110, 415, 415, 412, 412,
	412, 412, 412, 412, 412, 413, 413, 416, 416, 82,
	82, 82, 55, 55, 433, 433, 433, 56, 56, 434,
	434, 434, 431, 431, 431, 431, 431, 431, 431, 431,
	209, 209, 210, 210, 290, 290, 290, 290, 290, 211,
	211, 156, 156, 156, 214, 215, 215, 212, 212, 213,
	213, 213, 217, 217, 216, 219, 219, 218, 289, 380,
	380, 381, 381, 381, 381, 381, 381, 381, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 378, 378,
	378, 379, 376, 376, 377, 377, 377, 377, 435, 435,
	435, 435, 435, 435, 436, 436, 288, 288, 223, 223,
	383, 383, 383, 383, 384, 384, 384, 384, 384, 387,
	386, 385, 385, 385, 385, 385, 318, 318, 318, 59,
	59, 59, 256, 256, 255, 255, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	131, 131, 57, 57, 57, 162, 162, 54, 54, 54,
	438, 438, 58, 58, 58, 439, 439, 61, 61, 61,
	61, 61, 61, 53, 53, 53, 53, 53, 440, 440,
	273, 273, 272, 272, 228, 228, 324, 174, 174, 150,
	150, 150, 21, 23, 23, 16, 16, 16, 16, 16,
	16, 31, 31, 32, 32, 27, 27, 424, 424, 425,
	425, 83, 83, 87, 87, 87, 93, 93, 130, 130,
	130, 130, 130, 130, 130, 35, 35, 35, 35, 47,
	47, 47, 47, 91, 442, 442, 442, 92, 92, 441,
	441, 169, 169, 169, 169, 171, 171, 285, 285, 286,
	286, 443, 443, 287, 287, 287, 164, 163, 165, 165,
	52, 52, 52, 158, 158, 159, 159, 160, 160, 161,
	161, 444, 444, 80, 80, 80, 133, 133, 203, 203,
	281, 281, 281, 224, 224, 179, 179, 284, 284, 282,
	282, 282, 254, 254, 254, 132, 132, 233, 233, 247,
	247, 248, 248, 333, 333, 249, 90, 90, 143, 143,
	141, 141, 141, 141, 141, 141, 445, 445, 142, 142,
	142, 144, 144, 144, 144, 144, 144, 144, 147, 147,
	147, 147, 148, 148, 148, 146, 146, 394, 394, 394,
	396, 396, 397, 393, 393, 395, 395, 437, 437, 258,
	258, 258, 221, 222, 220, 220, 446, 446, 226, 226,
	225, 227, 227, 323, 323, 323, 252, 252, 252, 252,
	276, 276, 274, 274, 275, 275, 277, 277, 278, 278,
	278, 279, 279, 280, 280, 251, 251, 304, 304, 145,
	145, 145, 232, 232, 232, 234, 234, 295, 295, 295,
	296, 296, 294, 294, 294, 294, 325, 325, 325, 325,
	325, 325, 325, 325, 325, 326, 326, 235, 235, 327,
	283, 283, 410, 410, 410, 411, 411, 321, 321, 328,
	328, 328, 328, 328, 328, 319, 319, 320, 320, 334,
	335, 335, 261, 261, 261, 261, 259, 259, 260, 260,
	329, 329, 329, 329, 253, 253, 330, 330, 330, 331,
	291, 291, 339, 339, 339, 339, 353, 231, 231, 231,
	447, 447, 340, 340, 340, 340, 340, 340, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	341, 341, 341, 341, 341, 341, 341, 341, 341, 341,
	343, 343, 343, 342, 342, 342, 342, 342, 342, 342,
	342, 342, 342, 342, 342, 342, 342, 342, 342, 342,
	342, 352, 352, 352, 352, 352, 344, 344, 349, 349,
	350, 350, 350, 345, 346, 351, 351, 351, 351, 448,
	448, 355, 355, 347, 347, 347, 347, 347, 347, 347,
	347, 347, 348, 270, 270, 270, 270, 270, 270, 270,
	270, 270, 270, 270, 270, 270, 268, 268, 269, 269,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 297, 297, 297, 297,
	297, 297, 297, 297, 297, 297, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 298, 298, 298, 298, 298,
	298, 298, 298, 298, 298, 299, 299, 299, 299, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 300, 300, 300, 300, 300, 300,
	300, 300, 300, 300, 388, 388, 388, 388, 388, 388,
	388, 388, 391, 391, 392, 392, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 389, 389, 389,
	389, 389, 389, 389, 389, 389, 389, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 390, 390, 390, 390, 390,
	390, 390, 390, 390, 390, 398, 398, 399, 399, 401,
	401, 402, 402, 403, 404, 404, 404, 405, 406, 406,
	400, 400, 407, 407, 407, 407, 408, 408, 409, 409,
	409, 409, 409, 310, 310, 311, 311, 317, 317, 317,
	206, 206, 206, 206, 206, 206, 206, 206, 206, 206,
	206, 206, 206, 206, 206, 206, 172, 172, 172, 172,
	172, 243, 243, 241, 241, 241, 244, 244, 242, 242,
	240, 240, 239, 239, 307, 307, 305, 305, 309, 309,
	262, 262, 354, 354, 354, 354, 354, 354, 354, 263,
	263, 263, 271, 264, 264, 265, 265, 265, 265, 265,
	301, 302, 266, 266, 266, 303, 303, 312, 316, 316,
	315, 314, 314, 313, 313, 292, 292, 293, 293, 250,
	250, 449, 449, 246, 246, 332, 332, 332, 332, 205,
	205, 236, 236, 204, 204, 198, 198, 199, 199, 199,
	199, 229, 229, 356, 356, 356, 357, 358, 306, 189,
	188, 176, 177, 187, 186, 185, 175, 178, 182, 183,
	184, 180, 181, 194, 193, 192, 191, 337, 200, 200,
	201, 201, 201, 202, 202, 202, 202, 173, 173, 195,
	195, 196, 197, 197, 190, 190, 190, 166, 166, 166,
	167, 167, 168, 168, 365, 365, 363, 363, 363, 364,
	364, 364, 364, 362, 362, 362, 362, 362, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 369, 369,
	369, 369, 369, 369, 369, 369, 369, 369, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 372, 372, 372, 372, 372, 372, 372,
	372, 372, 372, 370, 370, 370, 370, 370, 370, 370,
	370, 370, 370, 370, 370, 370, 370, 370, 370, 370,
	371, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	373, 373, 373, 373, 373, 373, 373, 373, 373, 373,
	374, 374,
}
var sqlR2 = [...]int{

	0, 1, 3, 1, 1, 1, 1, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 0, 1,
	1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 1, 3, 1, 1, 3, 4,
	6, 1, 3, 1, 1, 3, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 6, 4, 6,
	6, 6, 1, 1, 5, 5, 6, 6, 4, 4,
	4, 4, 3, 4, 4, 7, 4, 3, 5, 4,
	12, 4, 12, 1, 3, 2, 5, 3, 6, 4,
	6, 5, 6, 6, 4, 8, 3, 4, 3, 6,
	4, 3, 1, 3, 2, 1, 1, 3, 1, 3,
	2, 2, 0, 1, 1, 0, 2, 0, 7, 2,
	5, 6, 2, 1, 6, 4, 9, 7, 12, 12,
	2, 7, 2, 1, 1, 1, 3, 3, 0, 3,
	1, 3, 1, 1, 3, 2, 5, 0, 5, 1,
	2, 1, 2, 1, 2, 2, 3, 3, 3, 3,
	3, 5, 3, 3, 5, 3, 3, 5, 3, 3,
	5, 3, 6, 6, 3, 1, 1, 1, 2, 1,
	2, 1, 1, 2, 1, 2, 3, 3, 4, 3,
	4, 7, 4, 4, 4, 3, 5, 7, 4, 3,
	3, 4, 3, 3, 3, 3, 3, 2, 0, 1,
	0, 1, 0, 3, 3, 3, 3, 3, 6, 4,
	4, 4, 3, 5, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 1, 1, 2, 1, 2, 7, 3,
	6, 1, 2, 1, 3, 2, 0, 8, 3, 2,
	2, 2, 2, 2, 2, 1, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 4, 6, 3, 4, 6, 3, 4, 6,
	3, 4, 6, 3, 4, 6, 3, 3, 5, 3,
	3, 5, 3, 1, 3, 2, 2, 5, 3, 6,
	3, 1, 1, 2, 1, 1, 1, 2, 1, 1,
	1, 2, 1, 2, 1, 2, 1, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 3, 5, 2, 3, 0, 3, 2, 3,
	0, 2, 3, 2, 3, 2, 6, 4, 7, 2,
	6, 4, 7, 2, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 2, 1, 2, 2, 3, 2, 4,
	3, 2, 2, 1, 2, 1, 3, 3, 1, 2,
	1, 2, 1, 2, 1, 1, 3, 5, 4, 6,
	4, 3, 0, 1, 3, 2, 4, 2, 4, 1,
	6, 3, 1, 1, 5, 3, 2, 6, 3, 3,
	4, 4, 3, 1, 3, 2, 1, 3, 1, 2,
	1, 1, 2, 2, 3, 1, 1, 1, 1, 1,
	3, 2, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
	2, 1, 2, 1, 2, 1, 2, 1, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
	1, 2, 2, 3, 3, 1, 1, 1, 1, 1,
	2, 2, 5, 7, 3, 3, 3, 3, 4, 4,
	3, 4, 4, 3, 4, 4, 4, 3, 2, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 2, 3, 3, 3, 2, 3, 5, 4,
	6, 4, 6, 4, 1, 0, 2, 3, 3, 3,
	6, 4, 2, 3, 4, 2, 3, 3, 3, 4,
	3, 3, 3, 3, 4, 3, 1, 1, 1, 2,
	3, 2, 3, 6, 6, 7, 9, 6, 3, 4,
	5, 5, 3, 1, 1, 5, 2, 0, 1, 1,
	1, 1, 3, 2, 2, 2, 1, 2, 0, 3,
	3, 2, 10, 13, 0, 2, 3, 9, 12, 0,
	2, 3, 1, 1, 2, 2, 2, 2, 1, 0,
	1, 0, 1, 3, 1, 1, 1, 1, 3, 8,
	0, 1, 1, 0, 2, 1, 0, 1, 0, 9,
	9, 3, 1, 3, 7, 1, 3, 11, 3, 2,
	0, 3, 1, 2, 2, 3, 2, 6, 2, 1,
	1, 2, 4, 2, 5, 5, 5, 2, 8, 9,
	6, 5, 3, 1, 5, 8, 5, 11, 0, 1,
	3, 3, 2, 2, 1, 1, 4, 0, 3, 0,
	2, 2, 2, 0, 1, 1, 2, 2, 0, 3,
	3, 2, 1, 1, 2, 2, 1, 2, 1, 5,
	8, 4, 1, 0, 1, 2, 2, 1, 2, 3,
	2, 2, 3, 2, 2, 2, 2, 2, 3, 1,
	4, 2, 4, 7, 3, 3, 0, 3, 6, 3,
	1, 1, 8, 7, 5, 0, 1, 6, 7, 6,
	5, 3, 4, 14, 17, 14, 17, 4, 0, 2,
	2, 0, 1, 0, 1, 3, 2, 2, 0, 1,
	1, 0, 6, 6, 8, 6, 8, 8, 10, 8,
	10, 6, 8, 6, 8, 6, 8, 1, 0, 2,
	0, 2, 2, 3, 3, 2, 2, 2, 1, 2,
	1, 2, 1, 2, 1, 3, 2, 3, 2, 2,
	2, 2, 2, 2, 1, 1, 0, 2, 2, 1,
	0, 1, 3, 2, 0, 2, 1, 1, 0, 1,
	3, 1, 0, 1, 1, 1, 2, 3, 2, 2,
	8, 11, 3, 3, 0, 3, 0, 3, 0, 3,
	0, 1, 0, 6, 7, 3, 6, 3, 1, 3,
	1, 4, 2, 1, 3, 1, 3, 8, 5, 4,
	3, 0, 2, 2, 0, 10, 3, 2, 0, 1,
	3, 1, 1, 3, 3, 5, 1, 1, 3, 3,
	2, 3, 4, 3, 4, 5, 0, 2, 2, 1,
	1, 1, 2, 1, 2, 1, 2, 1, 8, 8,
	8, 2, 4, 4, 4, 2, 2, 2, 2, 3,
	1, 3, 6, 1, 0, 1, 0, 1, 0, 1,
	1, 0, 1, 5, 1, 0, 1, 0, 1, 0,
	3, 1, 3, 2, 4, 5, 2, 2, 1, 1,
	1, 0, 2, 5, 2, 3, 1, 1, 1, 3,
	0, 1, 1, 1, 1, 3, 0, 2, 0, 4,
	2, 5, 3, 2, 0, 1, 3, 3, 5, 1,
	1, 3, 2, 4, 4, 0, 8, 4, 3, 4,
	1, 5, 3, 4, 5, 1, 5, 1, 3, 2,
	0, 3, 0, 2, 3, 1, 3, 2, 0, 3,
	4, 5, 4, 5, 4, 3, 2, 1, 0, 5,
	1, 0, 2, 2, 2, 1, 1, 0, 4, 2,
	1, 2, 2, 4, 1, 3, 1, 2, 3, 2,
	2, 0, 2, 5, 2, 1, 1, 2, 3, 0,
	1, 1, 1, 1, 1, 1, 2, 4, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 3, 0, 5, 4,
	1, 2, 1, 4, 1, 1, 2, 1, 1, 1,
	1, 1, 0, 1, 1, 4, 1, 4, 1, 4,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 3, 1, 0, 1, 4,
	1, 3, 3, 3, 5, 2, 2, 2, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 5, 4, 6, 3, 5,
	4, 6, 4, 6, 5, 7, 3, 3, 3, 3,
	3, 4, 3, 2, 4, 2, 3, 3, 4, 3,
	4, 3, 4, 5, 6, 6, 7, 6, 7, 6,
	7, 3, 4, 4, 1, 3, 1, 3, 3, 2,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 6, 6, 7, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 6, 2, 1, 5, 1, 1,
	1, 1, 2, 1, 5, 5, 3, 1, 1, 1,
	2, 2, 2, 4, 3, 5, 6, 8, 6, 6,
	4, 3, 4, 1, 1, 1, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 6, 6, 8, 8,
	6, 4, 6, 6, 6, 4, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 3, 4,
	3, 4, 3, 4, 4, 3, 6, 5, 5, 5,
	4, 4, 3, 4, 3, 5, 0, 5, 0, 2,
	0, 1, 3, 3, 2, 2, 0, 6, 1, 0,
	3, 0, 2, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 4, 1, 1, 5, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 1,
	2, 2, 3, 1, 2, 3, 2, 3, 2, 3,
	1, 0, 1, 3, 1, 3, 3, 3, 1, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 4,
	3, 1, 2, 3, 0, 3, 3, 2, 2, 1,
	2, 2, 3, 2, 1, 1, 1, 5, 1, 2,
	4, 2, 0, 1, 0, 3, 5, 1, 0, 1,
	2, 1, 0, 1, 3, 3, 2, 1, 1, 1,
	3, 1, 3, 3, 1, 1, 1, 1, 5, 3,
	1, 1, 3, 1, 2, 2, 1, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 5, 7, 1, 7, 5, 3, 1, 1, 1,
	1, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, 445, -75, -48, -46, -77, -78,
	-63, -76, -79, -74, -89, -93, -83, -95, -130, -4,
	-34, -36, -49, -62, -64, -73, -81, -80, -82, -84,
	-88, -87, -40, -90, -94, -103, -131, -132, -133, 80,
	67, 120, 102, 107, 126, 152, 276, 305, 315, 299,
	-98, -99, 334, -35, -47, -92, -91, -5, -11, 27,
	38, -37, -38, -39, 52, -57, -54, -51, -60, -426,
	82, -395, -65, -68, -70, -430, 112, 125, 163, 269,
	-85, -86, 301, 303, -42, -41, 121, -141, -143, -96,
	-97, -134, -104, -105, -106, -107, -108, -109, -110, -111,
	-112, -113, -114, -115, -116, -117, -118, -119, -120, -121,
	-122, -123, -124, -125, -126, -127, 337, 383, 39, 346,
	68, 115, 309, 21, -6, -7, -8, -9, -10, -12,
	-23, -50, -52, -53, -55, -56, -61, -58, -59, -394,
	-66, -67, -69, -71, -72, 300, -144, -142, 442, 395,
	-14, -18, -19, -15, -17, -20, -16, -24, -28, -29,
	-26, -25, -27, -30, -31, -32, -33, -21, -22, -13,
	413, 421, -147, -145, -146, -148, 322, 403, 360, 446,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, -191,
	-195, -196, -197, -190, -166, -371, -374, 4, -369, -372,
	131, 176, 240, 21, 22, 23, 24, 25, 27, 37,
	38, 39, 42, 44, 45, 48, 49, 50, 51, 52,
	53, 56, 61, 66, 67, 68, 69, 70, 75, 72,
	73, 74, 77, 79, 80, 81, 84, 85, 93, 94,
	95, 96, 97, 98, 102, 105, 104, 107, 110, 111,
	112, 114, 116, 117, 120, 121, 124, 122, 366, 368,
	123, 125, 126, 127, 137, 138, 139, 141, 142, 144,
	146, 150, 151, 153, 157, 159, 160, 161, 162, 163,
	164, 165, 177, 172, 178, 182, 185, 184, 186, 187,
	188, 179, 193, 196, 197, 198, 200, 201, 204, 205,
	206, 207, 210, 209, 212, 215, 216, 219, 220, 223,
	225, 226, 228, 229, 227, 230, 233, 231, 232, 235,
	236, 238, 237, 245, 246, 248, 249, 250, 264, 253,
	254, 257, 260, 263, 265, 266, 267, 268, 269, 270,
	272, 274, 276, 278, 280, 281, 282, 283, 284, 285,
	287, 288, 290, 291, 292, 293, 294, 299, 296, 297,
	298, 300, 301, 302, 303, 305, 307, 308, 309, 310,
	312, 314, 335, 336, 348, 315, 316, 317, 318, 319,
	320, 321, 325, 329, 326, 327, 328, 330, 323, 324,
	331, 332, 334, 337, 339, 341, 342, 345, 346, 347,
	349, 352, 353, 354, 350, 351, 344, 359, 357, 358,
	361, 362, 363, 364, 365, 367, 369, 374, 377, 378,
	380, 383, 384, 385, 387, 388, 391, 392, 393, 394,
	399, 395, 397, 400, 401, 402, 408, 407, 414, 415,
	417, 418, 419, 32, 40, 41, 43, 46, 57, 58,
	59, 62, 99, 100, 119, 128, 129, 140, 154, 156,
	166, 167, 168, 183, 189, 191, 171, 213, 243, 244,
	258, 262, 273, 275, 286, 311, 340, 355, 371, 372,
	373, 379, 381, 403, 404, 405, 409, 416, 251, -184,
	2, -166, -166, 276, 26, 2, 26, 272, 324, 362,
	364, 2, 192, 2, -417, -230, 2, 26, -170, -166,
	82, 152, 322, -184, 2, -417, -230, 24, 2, -166,
	2, -171, 2, 315, -166, 445, 77, 220, 61, 311,
	331, -101, 378, -100, 371, 317, -102, -361, 2, 233,
	-166, 445, 445, 445, 445, 2, 360, 267, 407, 323,
	396, 95, 283, 176, -412, 2, 4, -372, -369, -199,
	-198, 360, 95, -197, -190, 435, -196, 445, 445, 445,
	2, 197, 198, 282, 281, 331, 332, 445, 445, 445,
	2, 25, 55, 76, 79, 101, 127, 147, 150, 255,
	-427, 226, 264, 280, 317, 330, 359, 369, 380, -431,
	347, 56, 396, -438, 385, 110, -272, 95, 364, 362,
	220, 151, 392, 307, 155, 390, 105, 182, 394, 393,
	445, 445, 25, 55, 64, 79, 110, 127, 147, 150,
	-429, 264, 280, 314, 317, 330, 359, 369, 385, 380,
	2, 407, 323, 360, 176, 95, 396, 307, 279, -75,
	2, 442, 29, 334, -140, 360, 2, -166, 197, 198,
	2, 445, 445, -412, 2, 197, 198, 2, 319, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, 2, -128, 331, 347, 160, 38,
	61, 26, 66, 96, 153, 176, 177, 205, 76, 77,
	281, 220, 198, -322, 332, 361, 318, 357, 378, 82,
	397, 308, 419, -420, 122, 4, 95, 233, 333, 371,
	70, 365, 366, -437, 2, 360, -441, 2, 378, 378,
	2, -441, 2, -441, 2, -169, 2, 378, 375, -442,
	378, 416, 445, 445, 445, 445, 445, 445, 445, 445,
	445, 445, 445, 445, -142, -144, -143, 445, 445, 445,
	445, 445, -128, 331, 2, 61, 26, -445, 145, -225,
	-226, 389, 190, 118, 256, -141, -143, 2, -394, -359,
	2, -297, -375, -299, 433, 434, 428, 239, 420, -310,
	101, 390, 251, -374, -300, -312, 119, 311, -244, 8,
	9, 5, 6, 7, -173, -341, -306, -348, 382, 130,
	242, -202, 448, 10, 442, -391, -143, -311, 33, 156,
	54, -363, -201, -342, -350, -346, -347, -447, 44, 50,
	49, 369, 232, 325, 326, 341, 327, 328, 42, 399,
	172, 248, 250, 184, 4, 191, -200, -190, -388, -389,
	-369, -370, 183, 189, 185, 340, 186, 187, 188, 41,
	286, 141, 142, 140, 111, 100, 99, 244, 46, 45,
	43, 404, -351, 97, 371, 372, 373, 374, 200, 201,
	-166, -371, 64, 87, 88, 86, 91, 90, 92, 89,
	333, 396, 55, 32, 166, 167, 171, 243, 168, 62,
	-390, 351, 83, 149, 181, 169, 194, 195, 199, 214,
	217, 234, 241, 259, 261, 306, 338, -448, 405, 128,
	129, 262, 273, 355, 379, 381, 154, 213, 57, 58,
	-396, 287, -397, -184, -396, 445, 445, 447, 445, -220,
	-221, -222, 2, 26, 108, 442, 2, -325, 2, 440,
	-329, -143, 208, -328, 442, -326, -191, 252, -392, 312,
	-388, -389, -173, -190, -201, 4, -3, -223, 442, 444,
	360, 65, 2, -267, 442, -166, 26, -140, 251, 375,
	447, -308, 442, 251, 148, 253, -166, 2, 2, 335,
	2, 442, -101, 59, 378, -286, 2, -287, -163, -164,
	-165, 196, 278, 285, 419, -359, -423, 148, 425, 375,
	-359, -245, 444, 2, -329, 166, -191, 2, -188, -362,
	4, -369, -372, -370, -373, 64, -371, 26, 28, 29,
	30, 31, 33, 34, 35, 36, 47, 54, 55, 60,
	63, 65, 76, 82, 86, 87, 89, 88, 90, 91,
	92, 101, 103, 106, 108, 109, 113, 115, 118, 130,
	132, 145, 147, 148, 152, 155, 158, 170, 180, 190,
	192, 208, 211, 218, 221, 222, 239, 242, 247, 251,
	252, 255, 256, 271, 277, 289, 304, 322, 333, 343,
	356, 360, 370, 375, 376, 382, 389, 390, 396, 398,
	406, 410, 411, 412, 413, -374, 2, -329, 166, 2,
	-192, 166, -329, -195, 2, -367, 166, -365, 10, -364,
	5, 4, -369, -372, -370, 2, -175, -166, 2, -187,
	-362, 2, -204, 166, -191, 375, 447, -236, -198, -199,
	-229, -166, 444, -297, 2, -90, 2, -297, 166, 2,
	-90, 166, 2, -297, 166, 2, -90, 166, 2, 2,
	2, 380, 2, 79, 166, -166, 360, 94, 2, 298,
	-428, 314, 384, 407, 2, 2, 2, 2, 2, 2,
	2, 360, 323, -439, 287, -180, 2, -166, 145, -367,
	166, 2, -367, 166, 2, -193, -195, -193, 176, 193,
	-175, 166, 2, 364, 362, 364, 362, 148, 2, 192,
	2, 192, 2, -330, 2, -331, -191, 2, 2, 2,
	2, 2, 166, -166, 360, 94, 2, 207, 2, 2,
	2, 2, 2, 2, 2, 2, 2, -238, 166, 2,
	-191, -238, 166, 2, -238, 166, 2, -205, 166, 2,
	-204, -175, 166, 2, -368, 166, 2, -367, -368, 166,
	2, -338, 2, -337, -364, 403, -75, 442, 331, 442,
	-367, -191, -297, -90, 148, -297, -90, 2, 95, 360,
	-128, 2, 145, 398, 2, 8, 2, -367, 284, 137,
	2, 335, 2, 281, 332, 61, 419, 148, 2, 2,
	-415, 2, 251, 148, 2, 148, 2, 148, 2, 148,
	2, 148, 2, 2, 281, 332, 2, 377, 206, 123,
	2, 148, 2, 148, 2, 5, 2, 196, 278, 348,
	2, -191, -432, 2, 360, 407, 323, 2, 2, 72,
	73, 148, 2, 148, 419, 2, -253, -329, -285, -286,
	-285, 375, -171, -445, -225, -226, -128, 335, 2, 2,
	-445, -252, -274, -275, 218, 132, 247, -258, 26, 108,
	-258, -258, 48, 443, 443, 11, 12, 63, 37, 433,
	434, 435, 436, 143, 437, 438, 431, 432, 430, 423,
	424, 427, 202, 203, 78, 426, 425, 71, 224, 313,
	133, 134, 135, 136, 295, 173, 174, 175, 14, 15,
	16, 30, 255, 217, 420, 169, 338, 428, 17, 18,
	19, 194, 195, 241, 40, 170, -172, -206, -297, -297,
	-297, -297, -297, 261, 442, -250, -292, 440, -143, 442,
	442, 442, 5, 442, 5, -358, 8, -143, -297, -310,
	443, -242, 442, -143, -310, -305, 442, 311, 440, 442,
	-313, -297, 444, -398, 414, -344, 442, 275, -343, 442,
	-343, -343, 408, 415, 421, 415, 421, 145, 442, 442,
	442, 442, 442, 442, 442, 442, 442, 442, 442, 442,
	442, 408, 442, 442, 442, 442, 442, 442, 442, 442,
	442, 447, -396, -223, 442, -246, -332, -297, 435, -246,
	-246, 251, -239, -297, 83, -261, 199, 234, 149, 214,
	306, 181, -358, -75, -294, 448, -321, 421, -143, -326,
	-190, -143, -328, 442, -325, -321, 435, -191, 442, 148,
	442, 444, 148, -229, -362, -191, -200, -201, -239, -367,
	-412, -229, -170, 34, -307, -339, -340, -352, -341, -349,
	-345, -348, 291, 292, 290, 294, 293, 44, 50, 49,
	369, 232, 325, 326, 341, 327, 328, 42, 399, 172,
	248, 250, 184, 4, 43, 404, -351, 191, 183, 189,
	185, 340, 186, 187, 188, 41, 286, 141, 142, 140,
	111, 100, 99, 244, 46, 45, 97, 371, 372, 373,
	374, 200, 201, 405, 351, 57, 58, -412, -229, 145,
	-361, -239, 34, -286, 2, -443, 447, 216, -208, 223,
	238, 159, 252, 417, -366, 5, 4, -306, -318, 101,
	220, -348, 9, 434, -356, 8, 433, -360, -359, 85,
	444, -362, -152, 296, -151, 23, 27, 112, 401, 124,
	-213, 178, 267, 119, 344, -419, -421, 316, 367, 368,
	74, 245, 296, 119, -255, -257, 34, 93, 236, 263,
	51, 164, 227, 228, 346, 409, 119, 296, 413, 119,
	-421, 296, -421, -154, 344, -419, -421, 316, 296, -153,
	-213, 119, 448, -367, -236, 447, 447, -362, 435, 119,
	119, 119, 119, 2, 2, 239, 2, 2, 2, 150,
	-431, -429, 2, 2, 2, -191, 166, -192, 166, 2,
	-195, 407, 251, -414, -237, 360, -191, -162, -393, 413,
	239, 239, 34, 442, 2, -177, 166, 2, -167, -166,
	176, -393, 239, -330, -203, -191, -203, 334, -184, 34,
	-294, 119, 2, 2, 2, -166, -155, 447, 53, 302,
	119, -155, 119, -155, 119, -155, 447, 119, -155, 119,
	447, 119, 119, 443, 447, -338, -367, -138, 413, 148,
	82, 442, -368, -175, 2, -191, 2, 360, 200, -367,
	-367, -361, 26, 336, 2, 73, -191, -416, 145, -413,
	307, -412, -191, -191, -191, -191, -191, 145, 2, 377,
	2, 377, 2, -166, -166, 216, -191, 145, 360, 176,
	360, -155, 447, -171, -445, -252, -361, -445, -275, -274,
	-277, -297, 26, -280, 139, 235, -297, -299, -142, -142,
	-142, -227, -323, -297, 277, 176, -353, -339, -339, -189,
	-362, 371, -297, -297, -297, -297, -297, -297, -297, -297,
	-297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
	-297, -297, -297, -297, -297, -297, -297, -297, -297, -297,
	-297, -297, -297, -297, -297, -297, -297, 217, 169, 338,
	40, 170, -297, 375, -297, -297, -297, -297, 231, 239,
	242, 382, 130, 391, 108, 245, -449, 356, 36, -303,
	-143, -243, 442, -317, 31, 343, 26, -310, 442, 2,
	-292, -297, -293, -240, -239, -239, 443, 406, 26, 108,
	435, 2, 8, -268, -270, 418, 230, 98, 161, 229,
	-269, 321, 443, 447, 34, 443, -297, -240, -309, -305,
	-239, -316, -315, 410, -362, 435, -399, 138, 155, 8,
	-358, 371, 371, 371, 371, 442, 443, 2, 443, 2,
	443, 2, 443, 2, 443, 2, -297, -297, -297, -297,
	-297, -297, -297, -239, -262, 2, -354, -239, 4, 418,
	230, 98, 161, 229, 321, -262, 2, -263, 2, -297,
	-239, -264, -298, -299, 433, 434, 428, -310, -265, 2,
	-297, -240, -297, 47, 211, 376, -266, -297, 148, -239,
	-239, 2, -239, 2, -397, 34, -239, -232, 447, 148,
	34, 4, -232, -232, 442, 443, 447, 199, 199, -325,
	-261, 199, -259, 259, -259, -259, -410, 442, 441, -321,
	-176, 440, 449, -362, -320, -319, 34, -184, 257, -321,
	-321, 444, 443, -320, -191, 442, -239, -362, 349, 443,
	444, 194, 194, 443, -138, 375, 413, -75, 443, 447,
	-231, 33, 440, -270, 442, -355, 408, 442, 442, 148,
	-230, -423, 443, 378, -287, -207, 285, 342, 297, 329,
	9, 8, 8, 447, -362, 447, 375, -424, 76, 65,
	-289, 166, 65, -376, -178, 76, -377, -166, 60, 390,
	277, 147, -424, 76, -424, 76, 76, 334, 347, 48,
	-329, 37, -90, 212, 148, 419, 360, 375, -329, -257,
	-339, 93, 227, 228, 48, -357, -356, 434, -357, 48,
	-357, -357, -357, 413, -192, -329, 375, 268, -367, 375,
	447, 37, -90, 212, 148, 375, -204, -176, -335, -334,
	422, -198, -166, 444, -297, -90, -297, -90, 119, 2,
	-439, 207, 442, -223, 239, -256, -255, 239, -194, 2,
	-191, -229, -336, 192, 447, -237, 268, 119, 119, 442,
	116, 283, 2, 251, 239, -177, 166, -158, 363, 119,
	-291, 411, -281, -90, 442, 101, 34, -281, -247, -248,
	-333, -249, -178, 442, -184, -166, 2, -191, -238, -238,
	-238, -204, -205, -175, -367, -368, -368, -75, -337, 443,
	443, -137, 254, -136, -166, 5, -140, 398, -210, -290,
	-289, -378, -379, -376, 217, 176, 390, 193, 131, -138,
	-334, -335, -335, -191, 145, -229, -229, 331, 145, 145,
	444, 283, 95, 360, 267, 176, -191, -204, -191, -329,
	-445, -278, -356, 442, -279, 311, 312, 447, -150, 35,
	106, 204, -191, 419, 117, -297, -297, 375, -449, 356,
	-303, 117, -297, 231, 242, 382, 130, 391, 108, 245,
	148, 442, -298, -298, 443, -241, -297, -297, 441, 451,
	443, -446, 447, -225, -297, -239, -239, 443, 443, 375,
	375, 375, 375, 442, 444, -239, -229, 441, 441, 447,
	443, -314, -315, 113, -297, 444, -404, 260, 442, 442,
	443, 443, 447, 419, 419, 419, 419, -297, 34, 447,
	447, 447, 443, 447, 447, 447, 443, 443, 148, 443,
	443, -271, 271, 443, 11, 12, 433, 434, 435, 436,
	143, 437, 438, 431, 432, 430, 423, 424, 425, 71,
	224, 313, 14, 15, 16, 194, 170, -298, -298, -298,
	443, -301, -302, 148, 145, 34, -266, -266, -266, 443,
	148, -239, 443, 443, 442, 443, -291, -332, -234, 2,
	-325, -186, -362, -291, -291, -239, -297, -325, -325, -260,
	398, 251, 199, -325, -319, 443, -411, -358, -321, -320,
	-358, -296, -295, 146, 237, -184, -223, -320, -320, -362,
	-321, 443, -235, -327, -392, -446, 444, -362, -129, 5,
	242, -129, 148, -229, 24, -339, 440, 441, 8, 8,
	442, -358, -358, -229, 148, -359, -286, 388, 69, 285,
	-359, -151, -191, -178, -185, -166, 239, -289, 166, -157,
	239, -339, -185, 442, 442, 204, 204, -178, -185, 166,
	-178, 166, -185, -185, -418, 285, 246, -297, 219, 283,
	240, -152, 296, -90, -90, 442, -423, 398, 107, -191,
	-194, 296, -200, -357, -357, -255, 296, -192, -367, 413,
	-175, -153, -90, -90, 442, -176, -154, 296, -135, 165,
	245, 435, -166, 407, -166, -209, -210, -166, -433, 415,
	413, 119, 119, -223, 148, -138, -367, -191, -367, -367,
	-367, 2, 442, 2, -191, 119, 251, 239, -159, 114,
	-444, 425, -175, -226, -225, -297, -254, -284, 304, 251,
	-224, -179, -178, 403, -184, -254, -233, 447, 148, 425,
	444, -224, 2, -155, -155, -155, -155, -155, -75, -138,
	447, 442, 425, 425, 442, -367, -367, 443, 447, -191,
	-177, 176, 176, -183, -167, -138, -43, 413, 360, 331,
	331, -166, -187, -175, -191, -188, -204, -279, -297, -323,
	-191, 448, -297, -297, 117, 117, -297, -298, -298, -297,
	117, 148, 442, -297, -307, 30, 30, 443, 447, -293,
	-297, 443, 406, -446, -446, -446, 5, 230, 161, 229,
	-269, 229, -269, -269, 8, 435, -362, 443, -305, 115,
	-297, 370, -362, 435, -405, -181, 442, -166, 411, -225,
	-358, 443, -353, -339, -297, -297, -297, -297, -297, -297,
	-301, -297, -353, -339, -298, -298, -298, -298, -298, -298,
	-298, -298, -298, -298, -298, -298, -298, -298, -298, -298,
	-298, -298, -298, 108, 239, 245, -298, -302, -301, -297,
	-297, -339, 443, 443, 443, -239, -75, -251, 155, -335,
	447, -251, -251, 443, -260, 442, -297, -325, 441, 443,
	447, -320, 441, 447, 450, 425, -223, 444, -319, 443,
	447, -283, 34, 443, -362, -90, 253, 8, 441, 443,
	-358, 443, 443, -229, 375, 375, 119, 239, 400, -380,
	-377, -297, -228, -324, -297, 442, 442, -149, 112, 334,
	-425, 2, 119, -155, 119, -155, 417, 442, 442, 375,
	-424, 76, -239, -297, -139, 101, -361, -421, 375, 375,
	268, -239, 375, -138, 148, 358, 2, 2, 2, 443,
	34, 249, -166, -191, -192, 34, -191, -162, 2, -273,
	398, -176, -191, 119, -160, 210, -444, -365, -393, -276,
	-274, -254, -246, 240, 75, 443, 447, 444, -291, -248,
	-234, -297, 2, 443, -136, -137, -367, -367, -367, -138,
	-140, -140, -290, 2, 442, -177, -167, 442, 254, -191,
	-215, -214, 267, 245, 252, 443, -150, -176, -297, -297,
	117, 30, 30, -297, -297, -307, 443, -297, -297, -239,
	441, 5, -297, 443, 443, 443, 443, -297, 444, -406,
	-166, -297, 443, 443, 443, 443, 447, 447, 443, 443,
	443, 443, -302, 148, 108, 245, 442, 443, 443, -304,
	158, 48, -325, -304, -304, -229, -294, -358, -295, -176,
	440, -362, -327, 442, 444, 441, 443, -178, -185, -289,
	119, -381, 76, -382, 63, 131, 82, 239, 242, 390,
	277, 60, 101, 289, 34, 443, 443, 447, -150, -228,
	-229, 239, 353, 101, 239, 101, 94, 385, -178, -185,
	-229, -229, -191, -178, -185, 443, 447, 425, -194, -192,
	-367, 443, -176, -368, 371, -211, 179, -90, 2, 442,
	-223, -256, -90, 442, -166, 251, 442, -176, -161, 209,
	-444, -365, -158, -254, -282, 442, 251, -90, -179, 2,
	-226, 425, 443, 443, 94, 94, -228, 442, 442, -229,
	-44, -45, 176, 76, 270, -188, 360, -150, -297, -297,
	-297, 443, -446, -362, 435, -400, 267, 443, -297, -297,
	-298, 148, 442, -307, -401, 412, -297, -239, -401, -401,
	443, -321, -358, 2, -289, -185, -189, -182, -166, 131,
	166, 242, 204, 442, -298, -191, 442, 2, -435, 103,
	180, -288, -436, 81, 354, -324, 443, 443, 242, 242,
	-297, -339, -155, -155, 443, 443, 375, 375, 375, -361,
	-359, 375, -297, -212, -213, 170, -434, 413, -209, -433,
	-228, -191, -228, 251, -444, -365, -159, 109, -229, 76,
	-276, -303, -138, 442, 442, 443, -228, -228, 443, 447,
	26, 442, 26, 442, -191, 443, -226, 48, 443, 443,
	-298, -307, 443, -402, -403, -181, -320, 441, -382, -182,
	239, -297, -168, 442, -297, 180, 104, 162, -211, 442,
	289, -174, 63, 442, 442, -178, -185, 442, 425, 442,
	-433, 265, 94, 236, 443, 34, 443, -273, 443, -191,
	-365, -160, 393, 240, 443, -185, -254, -368, -368, -288,
	443, 443, -45, -229, -229, -407, 283, 312, 157, -239,
	443, 447, 34, 119, 443, -383, 225, -166, 443, 104,
	162, -212, -229, -191, -422, 398, -189, -217, -216, -214,
	-219, -218, -214, -239, -359, -239, -191, 94, -211, -90,
	-288, 442, -288, 442, -161, 334, -291, 443, 443, -211,
	-288, 443, 443, 443, -408, -409, 40, 387, 85, -297,
	-408, -408, -403, -405, 131, -384, -387, -386, 251, 149,
	266, 339, 443, 353, 409, -435, 443, -223, -297, 443,
	447, 403, 443, 447, 403, 443, 443, 442, -212, -434,
	-211, -228, -211, -228, -247, -138, -138, -212, -211, -409,
	274, 144, 311, 274, 144, -182, -386, 251, -387, 251,
	393, 105, -383, -216, 170, -218, 148, -229, -433, -212,
	443, -212, 443, -291, -212, 30, -385, 236, 302, 53,
	334, -385, -384, 442, 442, 443, -440, 411, -288, -440,
	-288, -409, 22, 242, 101, -435, -239, -239, -156, 53,
	302, 2, -211, -211, 443, 443, -212, -212, -212, 375,
	-440, -440, 442, -239, 443, -212,
}
var sqlDef = [...]int{

	-2, -2, 1, 3, 4, 5, 6, 7, 8, 10,
	12, 14, 16, 18, 20, 22, 24, 26, 27, 331,
	332, 334, 335, 336, 338, 339, 340, 342, 344, 346,
	347, 349, 351, 352, 353, 354, 355, 357, 359, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	403, 405, 0, 828, 830, 832, 834, 29, 30, 0,
	0, 169, 171, 173, 0, 197, 199, 201, 202, 204,
	-2, 0, 285, 286, 288, 290, -2, -2, 0, 0,
	392, 394, 0, 0, 414, 415, 0, 916, -2, 408,
	410, 412, 475, 477, 479, 481, 483, 485, 487, 488,
	490, 492, 494, 496, 498, 500, 502, 504, 506, 508,
	510, 512, 514, 516, 518, 520, -2, -2, -2, 0,
	-2, -2, -2, 846, 33, 35, 37, 39, 41, 43,
	61, 253, 254, 256, 258, 260, 263, 264, 266, 955,
	292, 294, 296, 298, 300, 0, -2, 969, 0, 0,
	45, 46, 47, 48, 49, 50, 51, 68, 69, 70,
	71, 72, 73, 74, 54, 56, 57, 63, 64, 66,
	0, 0, 931, 933, 935, 937, -2, 0, 0, -2,
	9, 11, 13, 15, 17, 19, 21, 23, 25, 333,
	337, 341, 343, 345, 348, 350, 356, 358, 360, 719,
	1546, 1559, 1560, 1561, 1564, 1565, 1566, 1567, 1568, 1569,
	1890, 1970, 1971, 1588, 1589, 1590, 1591, 1592, 1593, 1594,
	1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1603, 1604,
	1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1614,
	1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624,
	1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634,
	1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644,
	1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654,
	1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664,
	1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674,
	1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684,
	1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694,
	1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704,
	1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714,
	1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724,
	1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734,
	1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744,
	1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754,
	1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764,
	1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
	1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
	1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
	1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
	1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814,
	1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824,
	1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834,
	1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844,
	1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854,
	1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864,
	1865, 1866, 1867, 1868, 1869, 1870, 1871, 1872, 0, 370,
	368, 1540, 371, 1727, 373, 375, 279, 280, 281, 282,
	283, 284, 0, 152, 0, 385, 379, 384, 386, 388,
	389, 390, 391, 366, 364, 0, 385, 1591, 383, 826,
	827, 821, 822, 1760, 856, 404, -2, -2, -2, 1860,
	-2, 436, -2, 443, 1863, 1762, 446, 0, 448, -2,
	451, 829, 831, 833, 31, 32, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, -2, -2, -2, -2,
	0, 0, 1625, 1517, 1561, 1520, 1515, 170, 172, 174,
	175, 0, 0, 0, 0, 0, 0, 198, 200, 203,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 775,
	0, 0, 0, 0, 0, 0, 0, 0, 642, 643,
	0, 0, 648, 770, 771, 792, 0, 0, 0, 0,
	287, 289, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	291, 0, 0, 0, 0, 0, 0, 0, 231, 325,
	326, 0, 956, 0, 0, 0, 150, 143, 0, 0,
	631, 393, 395, 0, 142, 0, 0, 825, 0, 409,
	411, 413, 476, 478, 480, 482, 484, 486, 489, 491,
	493, 495, 497, 499, 501, 503, 505, 507, 509, 511,
	513, 515, 517, 519, 521, 522, 0, 0, 0, 0,
	0, 526, 0, -2, -2, 0, 0, 0, 0, 0,
	-2, 0, -2, 0, -2, -2, -2, 0, 0, 0,
	-2, -2, 0, 0, 0, 525, 527, 528, 529, 0,
	574, 613, 614, 0, 761, 957, 858, 836, 849, 858,
	838, 839, 840, 841, 842, 847, 848, 851, 0, 843,
	844, 845, 34, 36, 38, 40, 42, 44, 255, 257,
	259, 261, 265, 267, -2, 929, 930, 293, 295, 297,
	299, 301, 396, 0, 398, 0, 526, 920, 0, -2,
	0, 961, 961, 961, 0, 0, 930, 928, 0, 401,
	402, 455, 456, 1180, 0, 0, 0, 0, 0, 1415,
	1264, 0, 457, -2, 1295, 1297, 1839, 1860, 1414, 1299,
	1300, 1301, 1302, 1303, 0, 0, 1306, 0, 1308, 1309,
	1310, 1311, 0, 1313, 0, 1317, 1318, 1319, 0, 1844,
	1494, 1557, -2, 1088, 1089, 1090, 1091, 1092, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 1553, 0, 1386, 1333,
	-2, 1578, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 1634, -2, -2, -2, -2, -2,
	-2, -2, 1144, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, 1873, 1337, 1338, 1339, 1340, 1341, 1342, 1343,
	1344, 1345, 0, 1828, 1845, 1846, 1851, 1853, 1847, 1836,
	1356, -2, 1874, 1875, 1876, 1877, 1878, 1879, 1880, 1881,
	1882, 1883, 1884, 1885, 1886, 1887, 1888, 1145, -2, 1840,
	1841, 1856, 1857, 1862, 1866, 1867, 1843, 1852, -2, -2,
	947, 1735, 950, 719, 948, 932, 934, 0, 936, 0,
	0, 0, 941, 964, 962, 0, 1000, 945, 946, 956,
	1015, 1038, 0, 1020, 0, 1038, 1060, 0, 1025, 1755,
	1334, 1335, 0, 1561, 1558, -2, 2, 0, 0, 0,
	0, 0, 194, 367, 0, 372, 374, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 855, 406, 407, 0,
	431, 0, 435, 1835, -2, -2, 439, 859, 863, 864,
	865, 0, 0, 0, 0, 445, 0, 0, 432, 433,
	449, 452, 0, 52, 0, 1845, 1060, 53, 0, 1530,
	1583, 1584, 1585, 1586, 1587, 1873, 1889, 1891, 1892, 1893,
	1894, 1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903,
	1904, 1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913,
	1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923,
	1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933,
	1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943,
	1944, 1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953,
	1954, 1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963,
	1964, 1965, 1966, 1967, 1968, 1969, 55, 0, 1845, 58,
	0, 1845, 0, -2, 62, 0, 1845, 153, 154, 1574,
	1575, 1579, 1580, 1581, 1582, 65, 0, 1536, 67, 0,
	1533, 75, 0, 1845, 1514, 0, 0, 623, 1511, 1516,
	624, 1521, 0, 176, 177, 178, 179, 180, 1845, 182,
	183, 0, 185, 186, 1845, 188, 189, 0, 191, 206,
	207, 0, 209, 0, 1845, 0, 0, 0, 215, -2,
	232, 0, 229, 0, 219, 220, 222, 223, 224, 225,
	226, 0, 0, 0, 776, 0, 269, 1541, 0, -2,
	1845, 764, 767, 1845, 769, 781, 1544, 0, -2, 0,
	954, 1845, 872, 644, 645, 646, 647, 0, 278, 0,
	885, 0, 887, 0, 906, 1066, 1015, 233, 234, 235,
	236, 237, 1845, 0, 0, 0, 242, 0, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 135, 1845, 304,
	323, 135, 1845, 307, 135, 1845, 310, 135, 1845, 313,
	1509, 135, 1845, 316, 317, 1845, 319, 155, 320, 1845,
	322, 0, -2, 361, 1547, -2, 328, 0, -2, 0,
	167, 0, 629, 630, 0, 823, 824, 416, 0, 0,
	523, 524, 0, 0, 534, 535, 536, 537, 1733, 1649,
	540, 0, 543, 564, 578, 0, 0, 0, 547, 549,
	628, 551, 0, 0, 553, 0, 555, 0, 557, 0,
	559, 0, 561, 563, 565, 579, 567, 0, 0, 0,
	577, 0, 583, 0, 586, 587, 588, 0, 590, 591,
	592, 593, 0, 595, 596, -2, -2, 600, 602, 0,
	608, 0, 612, 0, 530, 531, 135, 1064, 835, -2,
	837, 0, 853, 923, -2, 0, 397, 0, 400, 927,
	921, 926, 978, 979, 0, 0, 0, 0, 959, 960,
	0, 0, 0, 918, 919, 0, 0, 0, 0, 1420,
	1421, 1422, 1423, 1424, 1425, 1428, 1429, 1426, 1427, 1430,
	1431, 0, 0, 0, 0, 0, 1432, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1433, 1434,
	1435, 0, 0, 1437, 0, 1439, 0, 0, 0, 0,
	0, 0, 1243, 1245, 1502, 0, 0, 1436, 1185, 1186,
	1187, 1222, 1223, 0, 0, 1296, 1499, 1498, 1298, 0,
	1451, 0, 1305, 0, 1177, 1312, 1527, -2, 0, 1415,
	1446, 0, 0, 1320, 1321, 1322, 0, 0, 1451, 0,
	0, 1493, 0, 1388, 0, 1124, 0, 1125, 1126, 0,
	1127, 1128, 1141, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1146, 0, 0, 0, 1474, -2, 0, 0, 0,
	0, 0, 949, 0, 0, 1004, 1503, 1507, 1508, 1004,
	1004, 0, 0, 1452, 0, 0, 0, 0, 1057, 1057,
	1057, 1055, 1032, 0, 1038, 0, 1048, 0, 1038, 1038,
	0, -2, 1020, 0, 0, 1048, 1061, 1062, 0, 0,
	0, 0, 0, 0, 1562, 0, 0, 1549, 0, 167,
	0, 377, 387, 956, 0, 1454, 1079, 1075, 1082, 1083,
	1084, 1085, 1131, 1132, 1133, 1134, 1135, 1093, 1094, 1095,
	1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105,
	1106, 1107, 1108, 1109, -2, 1142, 1144, 1162, 1113, 1114,
	1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1137,
	0, 1112, 1112, 1112, 1129, 1130, 1153, 1154, 1156, 1158,
	1160, 1080, 1081, 1147, 1148, 1149, 1150, 0, 381, 0,
	0, 0, 0, -2, 441, 0, 861, 0, 866, 466,
	467, 468, 868, 869, 444, 469, 470, 471, 472, 473,
	474, 0, 736, 0, 738, 1523, 0, 442, 459, 447,
	0, 453, 76, 818, 103, 0, 818, 818, 0, 0,
	122, 0, 0, 0, 0, 0, 94, 99, 82, 83,
	0, 0, 0, 0, 59, 744, 0, 747, 0, 0,
	0, 0, 0, 0, 0, 759, 0, 0, 0, 0,
	93, 0, 88, 78, 0, 0, 96, 101, 0, 126,
	128, 0, 0, 1051, 622, 0, 0, 1562, 1519, 0,
	0, 0, 0, 208, 210, 0, 212, 213, 214, 0,
	775, 0, 221, 218, 262, 719, 1845, 743, 1845, 741,
	1545, 0, 0, 276, 271, 0, 273, 762, 0, 953,
	0, 0, 0, 0, 782, 0, 1845, 787, 1532, 1570,
	1571, 874, 0, 1071, 0, 888, 0, 0, 1067, 0,
	1069, 0, 239, 240, 241, 0, 302, 0, 133, 134,
	0, 305, 0, 308, 0, 311, 0, 0, 314, 0,
	0, 0, 0, 956, 0, 0, 0, 145, 0, 0,
	0, 0, 167, 1051, 418, 1051, 420, 0, 0, 538,
	539, 541, 542, 544, 545, 609, 546, 550, 0, 616,
	1751, 626, 552, 554, 556, 558, 560, 0, 569, 0,
	571, 0, 573, 581, 584, 589, 594, 0, 0, 0,
	0, 760, 0, 852, 924, 926, 399, 922, 976, 977,
	982, 986, 987, 990, 993, 994, 984, 1180, 942, 943,
	944, 970, 971, 801, 0, 1970, 1181, 1076, 1182, 1183,
	1529, 0, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195,
	1196, 1197, -2, -2, -2, -2, -2, -2, -2, -2,
	1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215,
	1216, -2, -2, -2, 1220, 1221, -2, 1438, 1440, 0,
	1502, 0, -2, 0, -2, -2, -2, -2, 1240, 0,
	1242, 1247, 1249, 1251, 0, 0, 0, 0, 1501, 1261,
	1485, 1486, 0, 0, 1417, 1418, 1419, 1246, 0, 1265,
	1500, 1497, 0, 0, 1450, 967, 1324, 0, 0, 0,
	0, 1331, 0, 1528, 1176, 1163, 1164, 1165, 1166, 1167,
	1168, 1178, 1316, 1448, 0, 1447, 0, 0, 0, 1458,
	0, 1492, 1488, 0, 1550, 1556, 1396, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1357, 1358, 1359, 1360,
	1361, 1362, 1363, 1364, 1365, 1366, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1368, 0, 1461, -2, -2,
	-2, -2, -2, -2, -2, 0, 1370, 0, 1372, 1452,
	1471, 0, 0, 1266, 0, 0, 0, 1415, 0, 1375,
	1452, 1479, 0, 0, 0, 0, 0, 1452, 0, 1484,
	0, 1382, 0, 1384, 951, 0, 0, 1071, 0, 0,
	0, 1506, 1071, 1071, 0, 999, 0, 0, 0, 0,
	0, 0, 1052, 1056, 1053, 1054, 0, 0, 1038, 1048,
	1012, 0, 0, 1531, 1018, 1047, 0, 719, 1037, 1048,
	1048, 0, -2, 1022, 0, 0, 967, -2, 168, 718,
	0, 0, 0, 369, 0, 0, 0, 363, 365, 0,
	1072, 1074, 0, 1086, 0, 0, -2, 0, 0, 0,
	0, 0, 434, 0, 860, 867, 0, 463, 0, 465,
	737, 1525, 1524, 0, 454, 0, 0, 0, 0, 817,
	105, 1845, 0, 137, 0, 0, 703, 1537, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 745,
	746, 748, 754, 756, 0, 750, 1526, 0, 751, 0,
	753, 755, 757, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 1513, 158, 1050,
	0, 1512, 1522, 0, 181, 184, 187, 190, 0, 216,
	0, 0, 651, 634, 0, 739, 742, 0, 719, 774,
	1543, 0, 167, 0, 0, 272, 0, 0, 0, 0,
	0, 0, 780, 0, 0, 0, 1845, 876, 882, 0,
	969, 0, 904, 890, 0, 0, 0, 904, 908, 909,
	911, 912, 0, 0, 1068, 0, 243, 324, 135, 135,
	135, 1510, 135, 135, 156, 318, 321, 327, 362, 956,
	167, 165, 1715, 163, 160, 162, 0, 0, 0, 652,
	654, 655, 656, 657, 0, 1571, 0, 1677, 1571, 140,
	167, 417, 422, 532, 0, 627, 625, 568, 0, 0,
	0, 0, 0, 0, 0, 0, 610, 611, 615, 1065,
	925, 0, 988, 0, 985, 991, 992, 0, 973, 799,
	800, 0, 0, 0, 0, -2, -2, 0, 0, 0,
	1262, 0, -2, 1241, 1244, 1248, 1250, 1252, 0, 0,
	0, 0, 0, 0, 1441, 0, 1443, 1263, 1495, 1498,
	1413, 0, 0, 966, 967, 967, 967, 1330, 0, 0,
	0, 0, 0, 0, 0, 1449, 0, 1456, 1457, 0,
	1323, 0, 1489, 0, 0, 0, 1332, 0, 0, 0,
	1136, 1110, 0, 1155, 1157, 1159, 1161, 0, 0, 0,
	0, 0, 1351, 0, 0, 0, 1355, 1367, 0, 1369,
	1371, 0, 0, 1373, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1269, 1270, 1271,
	1374, 1477, 1478, 0, 0, 0, 0, 0, 0, 1380,
	0, 1483, 1381, 1383, 956, 1001, 996, 1504, 1051, 1003,
	1005, 1505, 1534, 996, 996, 0, 1453, 1040, 0, 1042,
	0, 0, 0, 1044, 0, 1033, 0, 1035, 1048, 1017,
	0, 0, 1010, 0, 1009, 719, 1046, 1019, 1023, 1550,
	0, 1063, 0, 1027, 1030, 0, 0, 1563, 192, 195,
	196, 193, 0, 376, 0, 1455, 0, 1077, 0, 0,
	0, 0, 0, 380, 0, 430, -2, 461, 462, 464,
	460, 104, 805, 0, 0, 1535, 0, 107, 1845, 116,
	0, 680, 0, 0, 0, 0, 0, 820, 0, 1845,
	135, 1845, 135, 118, 121, 0, 125, 123, 0, 0,
	671, 77, 818, 80, 86, 0, 0, 0, 92, 0,
	811, 0, 749, 752, 758, 60, 0, 813, 803, 0,
	802, 127, 81, 87, 0, 815, 79, 0, 167, 0,
	0, 1518, 0, 0, 0, 0, 650, -2, 0, 0,
	0, 0, 0, 0, 0, 270, 275, 274, 765, -2,
	768, 777, 0, 779, 791, 0, 0, 0, 878, 882,
	0, 881, 954, 981, 968, 1070, 883, 904, 0, 0,
	0, 893, 895, 892, 889, 886, 1071, 0, 0, 0,
	0, 0, 238, 303, 306, 309, 312, 315, 329, 144,
	0, 0, 0, 0, 0, 167, 0, 0, 0, 0,
	0, 1571, 1571, 0, 1539, 141, 419, 0, 0, 570,
	572, 580, 603, 604, 666, 0, 607, 0, 0, 972,
	801, 0, 1184, 1225, 0, 0, -2, 0, 0, 1229,
	0, 0, 0, -2, 0, 0, 0, 1442, 1444, 0,
	1497, 1325, 0, 0, 0, 0, 1307, 1169, 1170, 1171,
	1172, 1173, 1174, 1175, 0, 1314, 1315, 1416, 1459, 1487,
	1491, 0, 1551, 1555, 1394, 1395, 1399, 1542, 0, 0,
	0, 1336, 0, 0, 0, 0, 0, 0, 0, 1460,
	1470, 1472, 1267, 1268, 1272, 1273, 1274, 1275, 1276, 1277,
	1278, 1279, 1280, 1281, -2, -2, -2, 1285, 1286, 1287,
	-2, -2, -2, 0, 0, 0, 1473, 1475, 1476, 1480,
	1481, 0, 1377, 1378, 1379, 1482, 0, 998, 0, 1002,
	0, 998, 998, 963, 1041, 0, 1059, 1043, 1015, 1034,
	0, 1024, 1013, 0, 1014, 0, 1045, 0, 1021, 1026,
	0, 1029, 0, 1325, -2, 151, 378, 0, 1078, 1087,
	0, 1139, 1143, 382, 0, 0, 0, 0, 136, 678,
	702, 0, 0, 794, 801, 0, 0, 109, 0, 0,
	0, 117, 0, 114, 0, 120, 124, 0, 0, 0,
	0, 0, 0, 89, 90, 91, 0, 95, 0, 0,
	0, 0, 0, 138, 0, 0, 211, 773, 217, 660,
	0, 635, 0, 719, 743, 0, 268, 763, 778, 0,
	0, 0, 0, 0, 880, 882, 0, 873, 874, 904,
	980, 884, 902, -2, 901, 0, 0, 0, 969, 910,
	907, 913, 914, 0, 164, 0, 159, 161, 0, 147,
	0, 0, 653, 658, 0, 0, 0, 0, 0, 533,
	605, 665, 0, 0, 983, 989, 974, 801, 1227, 1231,
	0, 0, 0, 1233, -2, 0, 1255, -2, -2, 1445,
	1496, 1304, 967, 1326, 1328, 1329, 1179, 1490, 0, 1401,
	1398, 0, 1385, 1111, 1346, 1347, 0, 0, 1350, 1352,
	1353, 1354, 1469, 0, 0, 0, 0, 1376, 952, 1390,
	0, 0, 1006, 1390, 1390, 0, 1038, 1036, 1011, 1007,
	0, 1551, 1028, 0, 0, 1073, 1138, 807, 809, 106,
	0, 679, 0, 682, 0, 0, 0, 0, 689, 690,
	0, 0, 0, 0, 0, 708, 717, 0, 796, 0,
	0, 0, 111, 130, 0, 0, 819, 0, 135, 135,
	0, 0, 806, 0, 0, 0, 0, 0, 812, 814,
	804, 0, 816, 157, 0, 668, 0, 639, 636, 651,
	634, 740, 772, 0, 790, 0, 0, 0, 870, 882,
	0, 875, 876, 277, 0, 0, 0, 891, 894, 896,
	981, 0, 166, 167, 0, 0, 0, 0, 0, 0,
	421, 423, 0, 0, 429, 664, 0, 975, 1235, -2,
	-2, 1256, 0, 1552, 1554, 969, 0, 1387, 0, 0,
	-2, 0, 0, 0, 938, 0, 997, 995, 939, 940,
	1058, 1048, 0, 1031, 108, 0, 683, 684, 1538, 686,
	0, 688, 691, 0, 693, 1573, 0, 697, 704, 709,
	0, 660, 0, 714, 715, 795, 706, 0, 110, 112,
	129, 798, 113, 119, 0, 0, 0, 0, 0, 0,
	97, 0, 1049, 634, 667, 0, 637, 0, 0, 0,
	0, 791, 0, 0, 0, 877, 878, 0, 0, 0,
	904, 915, 146, 0, 0, 717, 0, 0, 701, 0,
	425, 0, 427, 0, 606, 1327, 1405, 0, 1348, 1349,
	-2, 0, 1293, 1389, 1391, 0, 1016, 1008, 681, 685,
	0, 0, 723, 0, 0, 0, 712, 713, 668, 0,
	0, 132, 0, 0, 0, 808, 810, 0, 0, 0,
	632, 0, 640, 0, 660, 0, 717, 0, 717, 0,
	879, 880, 0, 898, 1071, 900, 905, 0, 0, 660,
	717, 700, 424, 0, 0, 0, 0, 0, 0, 1400,
	1294, 0, 0, 0, 692, 728, 0, 0, 0, 710,
	711, 708, 0, 719, 115, 0, 797, 0, 672, 0,
	0, 675, 0, 0, 98, 0, 0, 641, 668, 639,
	660, 0, 660, 0, 871, 0, 899, 167, 167, 668,
	660, 426, 428, 1397, 1402, 1406, -2, 1809, 1622, 0,
	1403, 1404, 1392, 1393, 0, 694, 724, 725, 0, 720,
	721, 722, 1572, 695, 696, 705, 716, 723, 131, 669,
	0, 0, 670, 0, 0, 100, 102, 0, 634, 638,
	668, 0, 668, 0, 1071, 148, 149, 698, 668, 0,
	1408, 1409, 1410, 1411, 1412, 687, 726, 0, 727, 0,
	0, 0, 728, 673, 0, 676, 0, 0, 633, 788,
	717, 788, 717, 897, 699, 0, 729, 0, 732, 733,
	0, 730, 708, 0, 0, 663, 783, 0, 660, 785,
	660, 1407, 731, 734, 735, 707, 0, 0, 659, 661,
	662, 789, 668, 668, 668, 0, 788, 788, 674, 0,
	784, 786, 0, 0, 668, 677,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 431, 3, 437, 432, 3,
	442, 443, 435, 433, 447, 434, 444, 436, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 451, 446,
	423, 425, 424, 427, 448, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 440, 3, 441, 438, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 449, 430, 450, 428,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 426, 57766, 429, 57767, 439, 57768, 445, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1029
		{
			sqllex.(*Scanner).stmts = sqlDollar[1].union.stmts()
		}
	case 2:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1035
		{
			l := sqlDollar[1].union.stmts()
			s := sqlDollar[3].union.stmt()
			if s != nil {
				l = append(l, s)
			}
			sqlVAL.union.val = l
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1044
		{
			sqlVAL.union.val = []tree.Statement(nil)
			s := sqlDollar[1].union.stmt()
			if s != nil {
				sqlVAL.union.val = []tree.Statement{s}
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1053
		{
			return helpWith(sqllex, "")
		}
	case 9:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1057
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1058
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1059
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 15:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1060
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1061
		{
			return helpWith(sqllex, "GRANT")
		}
	case 19:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1062
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 21:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1063
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 23:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1064
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 25:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1065
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 28:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1069
		{
			sqlVAL.union.val = tree.Statement(nil)
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1078
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 32:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1079
		{
			return helpWith(sqllex, "ALTER")
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1082
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 36:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1083
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 38:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1084
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 40:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1085
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1086
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 44:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1087
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1137
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1138
		{
			return helpWith(sqllex, "ALTER TABLE")
		}
	case 55:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1149
		{
			return helpWith(sqllex, "ALTER VIEW")
		}
	case 58:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1164
		{
			return helpWith(sqllex, "ALTER SEQUENCE")
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1168
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[4].union.seqOpts(), IfExists: false}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1177
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterSequence{Name: name, Options: sqlDollar[6].union.seqOpts(), IfExists: true}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1193
		{
			return helpWith(sqllex, "ALTER USER")
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1205
		{
			return helpWith(sqllex, "ALTER DATABASE")
		}
	case 67:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1223
		{
			return helpWith(sqllex, "ALTER RANGE")
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1246
		{
			return helpWith(sqllex, "ALTER INDEX")
		}
	case 76:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1250
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: false, Cmds: sqlDollar[4].union.alterTableCmds()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1259
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AlterTable{Table: name, IfExists: true, Cmds: sqlDollar[6].union.alterTableCmds()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1270
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[3].union.newTableWithIdx(), IfExists: false, Cmds: sqlDollar[4].union.alterIndexCmds()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1274
		{
			sqlVAL.union.val = &tree.AlterIndex{Index: sqlDollar[5].union.newTableWithIdx(), IfExists: true, Cmds: sqlDollar[6].union.alterIndexCmds()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1280
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Split{Table: &name, Rows: sqlDollar[6].union.slct()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1291
		{
			sqlVAL.union.val = &tree.Split{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct()}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1301
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[5].union.slct()}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1313
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[5].union.slct()}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1320
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Relocate{Table: &name, Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 87:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1332
		{

			sqlVAL.union.val = &tree.Relocate{Index: sqlDollar[3].union.newTableWithIdx(), Rows: sqlDollar[6].union.slct(), RelocateLease: true}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1339
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 89:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1347
		{

			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: sqlDollar[4].union.expr()}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1352
		{
			sqlVAL.union.val = &tree.SetZoneConfig{Options: sqlDollar[4].union.kvOptions()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1356
		{

			sqlVAL.union.val = &tree.SetZoneConfig{SetDefault: true}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1361
		{
			sqlVAL.union.val = &tree.SetZoneConfig{YAMLConfig: tree.DNull}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1367
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{Database: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = s
		}
	case 94:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1375
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
			}
			sqlVAL.union.val = s
		}
	case 95:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1388
		{
			name, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			s := sqlDollar[7].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
				Partition:    tree.Name(sqlDollar[3].str),
			}
			sqlVAL.union.val = s
		}
	case 96:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1404
		{
			s := sqlDollar[4].union.setZoneConfig()
			s.ZoneSpecifier = tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[3].union.tableWithIdx(),
			}
			sqlVAL.union.val = s
		}
	case 97:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1414
		{
			sqlVAL.union.val = []tree.KVOption{tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[1].union.strs(), ".")), Value: sqlDollar[3].union.expr()}}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1418
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), tree.KVOption{Key: tree.Name(strings.Join(sqlDollar[3].union.strs(), ".")), Value: sqlDollar[5].union.expr()})
		}
	case 99:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1424
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scatter{Table: &name}
		}
	case 100:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1433
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scatter{Table: &name, From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1444
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx()}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1448
		{
			sqlVAL.union.val = &tree.Scatter{Index: sqlDollar[3].union.newTableWithIdx(), From: sqlDollar[7].union.exprs(), To: sqlDollar[11].union.exprs()}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1454
		{
			sqlVAL.union.val = tree.AlterTableCmds{sqlDollar[1].union.alterTableCmd()}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1458
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterTableCmds(), sqlDollar[3].union.alterTableCmd())
		}
	case 105:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1465
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[2].union.colDef()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1470
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[5].union.colDef()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1475
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: false, ColumnDef: sqlDollar[3].union.colDef()}
		}
	case 108:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1480
		{
			sqlVAL.union.val = &tree.AlterTableAddColumn{IfNotExists: true, ColumnDef: sqlDollar[6].union.colDef()}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1485
		{
			sqlVAL.union.val = &tree.AlterTableSetDefault{Column: tree.Name(sqlDollar[3].str), Default: sqlDollar[4].union.expr()}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1490
		{
			sqlVAL.union.val = &tree.AlterTableDropNotNull{Column: tree.Name(sqlDollar[3].str)}
		}
	case 111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1495
		{
			sqlVAL.union.val = &tree.AlterTableDropStored{Column: tree.Name(sqlDollar[3].str)}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1499
		{
			return unimplementedWithIssue(sqllex, 28751)
		}
	case 113:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1502
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     true,
				Column:       tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1511
		{
			sqlVAL.union.val = &tree.AlterTableDropColumn{
				IfExists:     false,
				Column:       tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 115:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:1523
		{
			sqlVAL.union.val = &tree.AlterTableAlterColumnType{
				Column:    tree.Name(sqlDollar[3].str),
				ToType:    sqlDollar[6].union.colType(),
				Collation: sqlDollar[7].str,
				Using:     sqlDollar[8].union.expr(),
			}
		}
	case 116:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1533
		{
			sqlVAL.union.val = &tree.AlterTableAddConstraint{
				ConstraintDef:      sqlDollar[2].union.constraintDef(),
				ValidationBehavior: sqlDollar[3].union.validationBehavior(),
			}
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1540
		{
			return unimplemented(sqllex, "alter constraint")
		}
	case 118:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1543
		{
			sqlVAL.union.val = &tree.AlterTableValidateConstraint{
				Constraint: tree.Name(sqlDollar[3].str),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1550
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     true,
				Constraint:   tree.Name(sqlDollar[5].str),
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1559
		{
			sqlVAL.union.val = &tree.AlterTableDropConstraint{
				IfExists:     false,
				Constraint:   tree.Name(sqlDollar[3].str),
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1568
		{
			sqlVAL.union.val = &tree.AlterTableSetAudit{Mode: sqlDollar[3].union.auditMode()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1573
		{
			sqlVAL.union.val = &tree.AlterTablePartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 123:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1580
		{

			sqlVAL.union.val = &tree.AlterTableInjectStats{
				Stats: sqlDollar[3].union.expr(),
			}
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1588
		{
			sqlVAL.union.val = tree.AuditModeReadWrite
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1589
		{
			sqlVAL.union.val = tree.AuditModeDisable
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1593
		{
			sqlVAL.union.val = tree.AlterIndexCmds{sqlDollar[1].union.alterIndexCmd()}
		}
	case 127:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1597
		{
			sqlVAL.union.val = append(sqlDollar[1].union.alterIndexCmds(), sqlDollar[3].union.alterIndexCmd())
		}
	case 128:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1603
		{
			sqlVAL.union.val = &tree.AlterIndexPartitionBy{
				PartitionBy: sqlDollar[1].union.partitionBy(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1611
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 130:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1615
		{
			sqlVAL.union.val = nil
		}
	case 131:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1621
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1625
		{
			sqlVAL.union.val = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1632
		{
			sqlVAL.union.val = tree.DropCascade
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1636
		{
			sqlVAL.union.val = tree.DropRestrict
		}
	case 135:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1640
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 136:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1646
		{
			sqlVAL.union.val = tree.ValidationSkip
		}
	case 137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1650
		{
			sqlVAL.union.val = tree.ValidationDefault
		}
	case 138:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1676
		{
			sqlVAL.union.val = &tree.Backup{Targets: sqlDollar[2].union.targetList(), To: sqlDollar[4].union.expr(), IncrementalFrom: sqlDollar[6].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[7].union.kvOptions()}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1679
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 140:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1702
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1706
		{
			sqlVAL.union.val = &tree.Restore{Targets: sqlDollar[2].union.targetList(), From: sqlDollar[4].union.exprs(), AsOf: sqlDollar[5].union.asOfClause(), Options: sqlDollar[6].union.kvOptions()}
		}
	case 142:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1709
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 143:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1713
		{
			sqlVAL.str = strings.ToUpper(sqlDollar[1].str)
		}
	case 144:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:1750
		{

			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[4].union.expr()}, Options: sqlDollar[6].union.kvOptions()}
		}
	case 145:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:1755
		{
			sqlVAL.union.val = &tree.Import{Bundle: true, FileFormat: sqlDollar[2].str, Files: tree.Exprs{sqlDollar[3].union.expr()}, Options: sqlDollar[4].union.kvOptions()}
		}
	case 146:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:1759
		{

			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[7].union.expr()}, Options: sqlDollar[9].union.kvOptions()}
		}
	case 147:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1769
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Bundle: true, Table: &name, FileFormat: sqlDollar[5].str, Files: tree.Exprs{sqlDollar[6].union.expr()}, Options: sqlDollar[7].union.kvOptions()}
		}
	case 148:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1778
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Table: &name, CreateFile: sqlDollar[6].union.expr(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 149:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:1787
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Import{Table: &name, CreateDefs: sqlDollar[5].union.tblDefs(), FileFormat: sqlDollar[7].str, Files: sqlDollar[10].union.exprs(), Options: sqlDollar[12].union.kvOptions()}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1795
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 151:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:1811
		{
			sqlVAL.union.val = &tree.Export{Query: sqlDollar[7].union.slct(), FileFormat: sqlDollar[3].str, File: sqlDollar[4].union.expr(), Options: sqlDollar[5].union.kvOptions()}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1814
		{
			return helpWith(sqllex, "EXPORT")
		}
	case 153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1818
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1822
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 155:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1828
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 156:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1832
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 157:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1838
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1842
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 159:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1848
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1852
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1856
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str), Value: sqlDollar[3].union.expr()}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1860
		{
			sqlVAL.union.val = tree.KVOption{Key: tree.Name(sqlDollar[1].str)}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:1866
		{
			sqlVAL.union.val = []tree.KVOption{sqlDollar[1].union.kvOption()}
		}
	case 164:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1870
		{
			sqlVAL.union.val = append(sqlDollar[1].union.kvOptions(), sqlDollar[3].union.kvOption())
		}
	case 165:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1876
		{
			sqlVAL.union.val = sqlDollar[2].union.kvOptions()
		}
	case 166:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1880
		{
			sqlVAL.union.val = sqlDollar[4].union.kvOptions()
		}
	case 167:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:1884
		{
			sqlVAL.union.val = nil
		}
	case 168:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1890
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CopyFrom{
				Table:   name,
				Columns: sqlDollar[3].union.nameList(),
				Stdin:   true,
			}
		}
	case 170:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1907
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 172:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1908
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 174:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1909
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 175:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:1910
		{
			return helpWith(sqllex, "CANCEL")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1920
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.CancelJob,
			}
		}
	case 177:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1928
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 178:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1930
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.CancelJob}
		}
	case 179:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1933
		{
			return helpWith(sqllex, "CANCEL JOBS")
		}
	case 180:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1943
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 181:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1952
		{
			sqlVAL.union.val = &tree.CancelQueries{
				Queries: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1960
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1962
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1966
		{
			sqlVAL.union.val = &tree.CancelQueries{Queries: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 185:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1969
		{
			return helpWith(sqllex, "CANCEL QUERIES")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1979
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				IfExists: false,
			}
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:1988
		{
			sqlVAL.union.val = &tree.CancelSessions{
				Sessions: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[5].union.expr()}}},
				},
				IfExists: true,
			}
		}
	case 188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1996
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:1998
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[3].union.slct(), IfExists: false}
		}
	case 190:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2002
		{
			sqlVAL.union.val = &tree.CancelSessions{Sessions: sqlDollar[5].union.slct(), IfExists: true}
		}
	case 191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2005
		{
			return helpWith(sqllex, "CANCEL SESSIONS")
		}
	case 192:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2009
		{
			return unimplementedWithIssueDetail(sqllex, 19472, "table")
		}
	case 193:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2013
		{
			return unimplementedWithIssueDetail(sqllex, 19472, "column")
		}
	case 194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2017
		{
			return unimplementedWithIssue(sqllex, 19472)
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2022
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2023
		{
			sqlVAL.str = ""
		}
	case 198:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2032
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 200:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2033
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 203:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2035
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 204:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2036
		{
		}
	case 205:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2037
		{
			return helpWith(sqllex, "CREATE")
		}
	case 206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2040
		{
			return unimplemented(sqllex, "create aggregate")
		}
	case 207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2041
		{
			return unimplemented(sqllex, "create cast")
		}
	case 208:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2042
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create constraint")
		}
	case 209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2043
		{
			return unimplemented(sqllex, "create conversion")
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2044
		{
			return unimplemented(sqllex, "create def conv")
		}
	case 211:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2045
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[6].str)
		}
	case 212:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2046
		{
			return unimplemented(sqllex, "create extension "+sqlDollar[3].str)
		}
	case 213:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2047
		{
			return unimplemented(sqllex, "create foreign table")
		}
	case 214:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2048
		{
			return unimplemented(sqllex, "create fdw")
		}
	case 215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2049
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 216:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2050
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create function")
		}
	case 217:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2051
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "create language "+sqlDollar[6].str)
		}
	case 218:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2052
		{
			return unimplementedWithIssue(sqllex, 24747)
		}
	case 219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2053
		{
			return unimplemented(sqllex, "create operator")
		}
	case 220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2054
		{
			return unimplemented(sqllex, "create publication")
		}
	case 221:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2055
		{
			return unimplemented(sqllex, "create rule")
		}
	case 222:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2056
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "create")
		}
	case 223:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2057
		{
			return unimplemented(sqllex, "create server")
		}
	case 224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2058
		{
			return unimplemented(sqllex, "create subscription")
		}
	case 225:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2059
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "create text")
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2060
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "create")
		}
	case 227:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2063
		{
		}
	case 228:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2064
		{
		}
	case 229:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2067
		{
		}
	case 230:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2068
		{
		}
	case 231:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2071
		{
		}
	case 232:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2072
		{
		}
	case 233:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2075
		{
			return unimplemented(sqllex, "drop aggregate")
		}
	case 234:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2076
		{
			return unimplemented(sqllex, "drop cast")
		}
	case 235:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2077
		{
			return unimplemented(sqllex, "drop collation")
		}
	case 236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2078
		{
			return unimplemented(sqllex, "drop conversion")
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2079
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "drop")
		}
	case 238:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2080
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[5].str)
		}
	case 239:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2081
		{
			return unimplemented(sqllex, "drop extension "+sqlDollar[3].str)
		}
	case 240:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2082
		{
			return unimplemented(sqllex, "drop foreign table")
		}
	case 241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2083
		{
			return unimplemented(sqllex, "drop fdw")
		}
	case 242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2084
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop function")
		}
	case 243:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2085
		{
			return unimplementedWithIssueDetail(sqllex, 17511, "drop language "+sqlDollar[4].str)
		}
	case 244:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2086
		{
			return unimplemented(sqllex, "drop operator")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2087
		{
			return unimplemented(sqllex, "drop publication")
		}
	case 246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2088
		{
			return unimplemented(sqllex, "drop rule")
		}
	case 247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2089
		{
			return unimplementedWithIssueDetail(sqllex, 26443, "drop")
		}
	case 248:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2090
		{
			return unimplemented(sqllex, "drop server")
		}
	case 249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2091
		{
			return unimplemented(sqllex, "drop subscription")
		}
	case 250:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2092
		{
			return unimplementedWithIssueDetail(sqllex, 7821, "drop text")
		}
	case 251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2093
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "drop type")
		}
	case 252:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2094
		{
			return unimplementedWithIssueDetail(sqllex, 28296, "drop")
		}
	case 255:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2098
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 257:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2099
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 259:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2100
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 261:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2101
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2103
		{
			return helpWith(sqllex, "CREATE TABLE")
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2104
		{
		}
	case 265:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2105
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 267:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2106
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 268:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2116
		{

			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateStats{
				Name:        tree.Name(sqlDollar[3].str),
				ColumnNames: sqlDollar[5].union.nameList(),
				Table:       name,
			}
		}
	case 269:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2129
		{
			return helpWith(sqllex, "CREATE STATISTICS")
		}
	case 270:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2133
		{
			sqlVAL.union.val = &tree.CreateChangefeed{
				Targets: sqlDollar[4].union.targetList(),
				SinkURI: sqlDollar[5].union.expr(),
				Options: sqlDollar[6].union.kvOptions(),
			}
		}
	case 271:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2143
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[1].union.tablePatterns()}
		}
	case 272:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2147
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 273:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2153
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2157
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 275:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2164
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 276:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2168
		{

			sqlVAL.union.val = nil
		}
	case 277:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:2182
		{
			sqlVAL.union.val = &tree.Delete{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[4].union.tblExpr(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				OrderBy:   sqlDollar[6].union.orderBy(),
				Limit:     sqlDollar[7].union.limit(),
				Returning: sqlDollar[8].union.retClause(),
			}
		}
	case 278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2192
		{
			return helpWith(sqllex, "DELETE")
		}
	case 279:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2199
		{
			sqlVAL.union.val = &tree.Discard{Mode: tree.DiscardModeAll}
		}
	case 280:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2202
		{
			return unimplemented(sqllex, "discard plans")
		}
	case 281:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2203
		{
			return unimplemented(sqllex, "discard sequences")
		}
	case 282:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2204
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 283:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2205
		{
			return unimplemented(sqllex, "discard temp")
		}
	case 284:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2206
		{
			return helpWith(sqllex, "DISCARD")
		}
	case 287:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2215
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 289:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2216
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 290:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2217
		{
		}
	case 291:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2218
		{
			return helpWith(sqllex, "DROP")
		}
	case 293:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2221
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 295:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2222
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 297:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2223
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 299:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2224
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 301:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2225
		{
			return helpWith(sqllex, "DROP SEQUENCE")
		}
	case 302:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2233
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 303:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2237
		{
			sqlVAL.union.val = &tree.DropView{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 304:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2240
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 305:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2248
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 306:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2252
		{
			sqlVAL.union.val = &tree.DropSequence{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 307:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2255
		{
			return helpWith(sqllex, "DROP VIEW")
		}
	case 308:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2263
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[3].union.tableNames(), IfExists: false, DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 309:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2267
		{
			sqlVAL.union.val = &tree.DropTable{Names: sqlDollar[5].union.tableNames(), IfExists: true, DropBehavior: sqlDollar[6].union.dropBehavior()}
		}
	case 310:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2270
		{
			return helpWith(sqllex, "DROP TABLE")
		}
	case 311:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2278
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[3].union.newTableWithIdxList(),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 312:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2286
		{
			sqlVAL.union.val = &tree.DropIndex{
				IndexList:    sqlDollar[5].union.newTableWithIdxList(),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 313:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2293
		{
			return helpWith(sqllex, "DROP INDEX")
		}
	case 314:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2301
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[3].str),
				IfExists:     false,
				DropBehavior: sqlDollar[4].union.dropBehavior(),
			}
		}
	case 315:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2309
		{
			sqlVAL.union.val = &tree.DropDatabase{
				Name:         tree.Name(sqlDollar[5].str),
				IfExists:     true,
				DropBehavior: sqlDollar[6].union.dropBehavior(),
			}
		}
	case 316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2316
		{
			return helpWith(sqllex, "DROP DATABASE")
		}
	case 317:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2324
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 318:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2328
		{
			sqlVAL.union.val = &tree.DropUser{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 319:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2331
		{
			return helpWith(sqllex, "DROP USER")
		}
	case 320:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2339
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[3].union.exprs(), IfExists: false}
		}
	case 321:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2343
		{
			sqlVAL.union.val = &tree.DropRole{Names: sqlDollar[5].union.exprs(), IfExists: true}
		}
	case 322:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2346
		{
			return helpWith(sqllex, "DROP ROLE")
		}
	case 323:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2350
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2359
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 325:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2386
		{
			sqlVAL.union.val = &tree.Explain{Statement: sqlDollar[2].union.stmt()}
		}
	case 326:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2389
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 327:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2391
		{
			sqlVAL.union.val = &tree.Explain{Options: sqlDollar[3].union.strs(), Statement: sqlDollar[5].union.stmt()}
		}
	case 328:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2395
		{
			sqlVAL.union.val = &tree.Explain{Options: []string{"DISTSQL", sqlDollar[2].str}, Statement: sqlDollar[3].union.stmt()}
		}
	case 329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2399
		{
			sqlVAL.union.val = &tree.Explain{Options: append(sqlDollar[4].union.strs(), sqlDollar[2].str), Statement: sqlDollar[6].union.stmt()}
		}
	case 330:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2406
		{
			return helpWith(sqllex, "EXPLAIN")
		}
	case 333:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2410
		{
			return helpWith(sqllex, "BACKUP")
		}
	case 337:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2413
		{
			return helpWith(sqllex, "DELETE")
		}
	case 339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2415
		{
		}
	case 341:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2416
		{
			return helpWith(sqllex, "IMPORT")
		}
	case 343:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2417
		{
			return helpWith(sqllex, "INSERT")
		}
	case 345:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2418
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 348:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2420
		{
			return helpWith(sqllex, "RESTORE")
		}
	case 350:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2421
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 352:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2424
		{
			sqlVAL.union.val = sqlDollar[1].union.slct()
		}
	case 356:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2429
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 358:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2430
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 360:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2431
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 361:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2435
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2439
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 363:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2449
		{
			sqlVAL.union.val = &tree.Prepare{
				Name:      tree.Name(sqlDollar[2].str),
				Types:     sqlDollar[3].union.colTypes(),
				Statement: sqlDollar[5].union.stmt(),
			}
		}
	case 364:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2456
		{
			return helpWith(sqllex, "PREPARE")
		}
	case 365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2460
		{
			sqlVAL.union.val = sqlDollar[2].union.colTypes()
		}
	case 366:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2464
		{
			sqlVAL.union.val = []coltypes.T(nil)
		}
	case 367:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2474
		{
			sqlVAL.union.val = &tree.Execute{
				Name:   tree.Name(sqlDollar[2].str),
				Params: sqlDollar[3].union.exprs(),
			}
		}
	case 368:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2480
		{
			return helpWith(sqllex, "EXECUTE")
		}
	case 369:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2484
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 370:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2488
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 371:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2498
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[2].str)}
		}
	case 372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2502
		{
			sqlVAL.union.val = &tree.Deallocate{Name: tree.Name(sqlDollar[3].str)}
		}
	case 373:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2506
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 374:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2510
		{
			sqlVAL.union.val = &tree.Deallocate{}
		}
	case 375:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2513
		{
			return helpWith(sqllex, "DEALLOCATE")
		}
	case 376:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2533
		{
			sqlVAL.union.val = &tree.Grant{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 377:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2537
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 378:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2541
		{
			sqlVAL.union.val = &tree.GrantRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: true}
		}
	case 379:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2544
		{
			return helpWith(sqllex, "GRANT")
		}
	case 380:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2564
		{
			sqlVAL.union.val = &tree.Revoke{Privileges: sqlDollar[2].union.privilegeList(), Grantees: sqlDollar[6].union.nameList(), Targets: sqlDollar[4].union.targetList()}
		}
	case 381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2568
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[2].union.nameList(), Members: sqlDollar[4].union.nameList(), AdminOption: false}
		}
	case 382:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:2572
		{
			sqlVAL.union.val = &tree.RevokeRole{Roles: sqlDollar[5].union.nameList(), Members: sqlDollar[7].union.nameList(), AdminOption: true}
		}
	case 383:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2575
		{
			return helpWith(sqllex, "REVOKE")
		}
	case 384:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2580
		{
			sqlVAL.union.val = privilege.List{privilege.ALL}
		}
	case 385:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2584
		{
			privList, err := privilege.ListFromStrings(sqlDollar[1].union.nameList().ToStrings())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = privList
		}
	case 386:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2595
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 387:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2599
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 393:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2613
		{
			return helpWith(sqllex, "RESET")
		}
	case 395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2614
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 396:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2622
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[2].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 397:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2626
		{
			sqlVAL.union.val = &tree.SetVar{Name: sqlDollar[3].str, Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 398:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2629
		{
			return helpWith(sqllex, "RESET")
		}
	case 399:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2637
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: tree.DefaultVal{}}
		}
	case 400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2640
		{
			return helpWith(sqllex, "RESET CLUSTER SETTING")
		}
	case 401:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2651
		{
			sqlVAL.union.val = &tree.SetVar{Name: "database", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2654
		{
			return helpWith(sqllex, "USE")
		}
	case 404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2658
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 405:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2659
		{
		}
	case 406:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2660
		{
			return unimplemented(sqllex, "set constraints")
		}
	case 407:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2661
		{
			return unimplemented(sqllex, "set local")
		}
	case 409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2665
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2666
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 413:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2667
		{
			return helpWith(sqllex, "USE")
		}
	case 416:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2683
		{
			return helpWith(sqllex, "SCRUB")
		}
	case 417:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2698
		{
			sqlVAL.union.val = &tree.Scrub{Typ: tree.ScrubDatabase, Database: tree.Name(sqlDollar[4].str), AsOf: sqlDollar[5].union.asOfClause()}
		}
	case 418:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2701
		{
			return helpWith(sqllex, "SCRUB DATABASE")
		}
	case 419:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2719
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Scrub{
				Typ:     tree.ScrubTable,
				Table:   name,
				AsOf:    sqlDollar[5].union.asOfClause(),
				Options: sqlDollar[6].union.scrubOptions(),
			}
		}
	case 420:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2732
		{
			return helpWith(sqllex, "SCRUB TABLE")
		}
	case 421:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2736
		{
			sqlVAL.union.val = sqlDollar[3].union.scrubOptions()
		}
	case 422:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:2740
		{
			sqlVAL.union.val = tree.ScrubOptions{}
		}
	case 423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2746
		{
			sqlVAL.union.val = tree.ScrubOptions{sqlDollar[1].union.scrubOption()}
		}
	case 424:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2750
		{
			sqlVAL.union.val = append(sqlDollar[1].union.scrubOptions(), sqlDollar[3].union.scrubOption())
		}
	case 425:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2756
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{}
		}
	case 426:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2760
		{
			sqlVAL.union.val = &tree.ScrubOptionIndex{IndexNames: sqlDollar[3].union.nameList()}
		}
	case 427:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2764
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{}
		}
	case 428:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2768
		{
			sqlVAL.union.val = &tree.ScrubOptionConstraint{ConstraintNames: sqlDollar[3].union.nameList()}
		}
	case 429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2772
		{
			sqlVAL.union.val = &tree.ScrubOptionPhysical{}
		}
	case 430:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2783
		{
			sqlVAL.union.val = &tree.SetClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), "."), Value: sqlDollar[6].union.expr()}
		}
	case 431:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2786
		{
			return helpWith(sqllex, "SET CLUSTER SETTING")
		}
	case 434:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:2796
		{
			sqlVAL.union.val = &tree.SetVar{Values: sqlDollar[4].union.exprs()}
		}
	case 435:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2812
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 436:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2816
		{
			sqlVAL.union.val = sqlDollar[2].union.stmt()
		}
	case 437:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:2821
		{
			sqlVAL.union.val = &tree.SetSessionCharacteristics{Modes: sqlDollar[6].union.transactionModes()}
		}
	case 438:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2838
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[3].union.transactionModes()}
		}
	case 439:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2841
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 440:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2843
		{
			sqlVAL.union.val = &tree.SetTransaction{Modes: sqlDollar[4].union.transactionModes()}
		}
	case 441:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:2846
		{
			return helpWith(sqllex, "SET TRANSACTION")
		}
	case 442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2850
		{

			varName := sqlDollar[1].union.strs()
			if len(varName) == 1 && varName[0] == "tracing" {
				sqlVAL.union.val = &tree.SetTracing{Values: sqlDollar[3].union.exprs()}
			} else {
				sqlVAL.union.val = &tree.SetVar{Name: strings.Join(sqlDollar[1].union.strs(), "."), Values: sqlDollar[3].union.exprs()}
			}
		}
	case 444:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2869
		{

			sqlVAL.union.val = &tree.SetVar{Name: "timezone", Values: tree.Exprs{sqlDollar[3].union.expr()}}
		}
	case 445:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2876
		{

			sqlVAL.union.val = &tree.SetVar{Name: "search_path", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2882
		{
			return unimplemented(sqllex, "set from current")
		}
	case 448:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2883
		{
			return helpWith(sqllex, "SET SESSION")
		}
	case 449:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2891
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{sqlDollar[2].union.expr()}}
		}
	case 450:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2896
		{

			sqlVAL.union.val = &tree.SetVar{Name: "client_encoding", Values: tree.Exprs{tree.DefaultVal{}}}
		}
	case 451:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2903
		{
			sqlVAL.union.val = []string{sqlDollar[1].str}
		}
	case 452:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2907
		{
			sqlVAL.union.val = append([]string{sqlDollar[1].str}, sqlDollar[2].union.strs()...)
		}
	case 453:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2913
		{
			sqlVAL.union.val = []string{sqlDollar[2].str}
		}
	case 454:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2917
		{
			sqlVAL.union.val = append(sqlDollar[1].union.strs(), sqlDollar[3].str)
		}
	case 456:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2924
		{
			sqlVAL.union.val = tree.Expr(&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}})
		}
	case 459:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2945
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:2949
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 461:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2955
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 462:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2959
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 463:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2963
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 464:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:2967
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 465:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2971
		{
			sqlVAL.union.val = tree.SerializableIsolation
		}
	case 466:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2977
		{
			sqlVAL.union.val = tree.Low
		}
	case 467:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2981
		{
			sqlVAL.union.val = tree.Normal
		}
	case 468:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2985
		{
			sqlVAL.union.val = tree.High
		}
	case 469:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:2996
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 470:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3000
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3004
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 473:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3009
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 474:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3013
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 476:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3025
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3026
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3027
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 482:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3028
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 484:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3029
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 486:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3030
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3032
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3033
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 493:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3034
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 495:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3035
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 497:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3036
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 499:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3037
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 501:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3038
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 503:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3039
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 505:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3040
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 507:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3041
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 509:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3042
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 511:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3043
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 513:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3044
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 515:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3045
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 517:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3046
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 519:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3047
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 521:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3049
		{
			return helpWith(sqllex, "SHOW")
		}
	case 522:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3056
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[2].str}
		}
	case 523:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3057
		{
			sqlVAL.union.val = &tree.ShowVar{Name: sqlDollar[3].str}
		}
	case 524:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3058
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 528:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3069
		{
			sqlVAL.str = "client_encoding"
		}
	case 530:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3072
		{
			sqlVAL.str = "timezone"
		}
	case 531:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3073
		{
			return helpWith(sqllex, "SHOW SESSION")
		}
	case 532:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3087
		{

			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowTableStats{Table: name}
		}
	case 533:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3097
		{

			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowTableStats{Table: name, UsingJSON: true}
		}
	case 534:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3106
		{
			return helpWith(sqllex, "SHOW STATISTICS")
		}
	case 535:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3117
		{

			id, err := sqlDollar[3].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowHistogram{HistogramID: id}
		}
	case 536:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3126
		{
			return helpWith(sqllex, "SHOW HISTOGRAM")
		}
	case 537:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3134
		{
			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupDefaultDetails,
				Path:    sqlDollar[3].union.expr(),
			}
		}
	case 538:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3141
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupRangeDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 539:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3149
		{

			sqlVAL.union.val = &tree.ShowBackup{
				Details: tree.BackupFileDetails,
				Path:    sqlDollar[4].union.expr(),
			}
		}
	case 540:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3156
		{
			return helpWith(sqllex, "SHOW BACKUP")
		}
	case 541:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3166
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: strings.Join(sqlDollar[4].union.strs(), ".")}
		}
	case 542:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3170
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 543:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3173
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 544:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3175
		{
			sqlVAL.union.val = &tree.ShowClusterSetting{Name: "all"}
		}
	case 545:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3178
		{
			return helpWith(sqllex, "SHOW CLUSTER SETTING")
		}
	case 546:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3186
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowColumns{Table: name}
		}
	case 547:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3194
		{
			return helpWith(sqllex, "SHOW COLUMNS")
		}
	case 548:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3202
		{
			sqlVAL.union.val = &tree.ShowDatabases{}
		}
	case 549:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3205
		{
			return helpWith(sqllex, "SHOW DATABASES")
		}
	case 550:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3218
		{
			lst := sqlDollar[3].union.targetListPtr()
			if lst != nil && lst.ForRoles {
				sqlVAL.union.val = &tree.ShowRoleGrants{Roles: lst.Roles, Grantees: sqlDollar[4].union.nameList()}
			} else {
				sqlVAL.union.val = &tree.ShowGrants{Targets: lst, Grantees: sqlDollar[4].union.nameList()}
			}
		}
	case 551:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3226
		{
			return helpWith(sqllex, "SHOW GRANTS")
		}
	case 552:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3234
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 553:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3242
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 554:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3244
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 555:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3252
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 556:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3254
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowIndex{Table: name}
		}
	case 557:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3262
		{
			return helpWith(sqllex, "SHOW INDEXES")
		}
	case 558:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3270
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 559:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3278
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 560:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3280
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowConstraints{Table: name}
		}
	case 561:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3288
		{
			return helpWith(sqllex, "SHOW CONSTRAINTS")
		}
	case 562:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3296
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 563:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3299
		{
			return helpWith(sqllex, "SHOW QUERIES")
		}
	case 564:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3301
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: true}
		}
	case 565:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3305
		{
			sqlVAL.union.val = &tree.ShowQueries{Cluster: false}
		}
	case 566:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3315
		{
			sqlVAL.union.val = &tree.ShowJobs{}
		}
	case 567:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3318
		{
			return helpWith(sqllex, "SHOW JOBS")
		}
	case 568:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3327
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceRaw, Compact: sqlDollar[2].union.bool()}
		}
	case 569:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3330
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 570:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3332
		{
			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceKV, Compact: sqlDollar[2].union.bool()}
		}
	case 571:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3335
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 572:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3337
		{

			sqlVAL.union.val = &tree.ShowTraceForSession{TraceType: tree.ShowTraceReplica, Compact: sqlDollar[2].union.bool()}
		}
	case 573:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3341
		{
			return helpWith(sqllex, "SHOW TRACE")
		}
	case 574:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3344
		{
			sqlVAL.union.val = true
		}
	case 575:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3345
		{
			sqlVAL.union.val = false
		}
	case 576:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3353
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 577:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3356
		{
			return helpWith(sqllex, "SHOW SESSIONS")
		}
	case 578:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3358
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: true}
		}
	case 579:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3362
		{
			sqlVAL.union.val = &tree.ShowSessions{Cluster: false}
		}
	case 580:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3372
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{
				CatalogName:     tree.Name(sqlDollar[4].str),
				ExplicitCatalog: true,
				SchemaName:      tree.Name(sqlDollar[6].str),
				ExplicitSchema:  true,
			}}
		}
	case 581:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3381
		{
			sqlVAL.union.val = &tree.ShowTables{TableNamePrefix: tree.TableNamePrefix{

				SchemaName:     tree.Name(sqlDollar[4].str),
				ExplicitSchema: true,
			}}
		}
	case 582:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3390
		{
			sqlVAL.union.val = &tree.ShowTables{}
		}
	case 583:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3393
		{
			return helpWith(sqllex, "SHOW TABLES")
		}
	case 584:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3400
		{
			sqlVAL.union.val = &tree.ShowSchemas{Database: tree.Name(sqlDollar[4].str)}
		}
	case 585:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3404
		{
			sqlVAL.union.val = &tree.ShowSchemas{}
		}
	case 586:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3407
		{
			return helpWith(sqllex, "SHOW SCHEMAS")
		}
	case 587:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3414
		{

			sqlVAL.union.val = &tree.ShowSyntax{Statement: sqlDollar[3].str}
		}
	case 588:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3418
		{
			return helpWith(sqllex, "SHOW SYNTAX")
		}
	case 589:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3426
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_isolation"}
		}
	case 590:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3431
		{

			sqlVAL.union.val = &tree.ShowVar{Name: "transaction_priority"}
		}
	case 591:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3436
		{

			sqlVAL.union.val = &tree.ShowTransactionStatus{}
		}
	case 592:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3440
		{
			return helpWith(sqllex, "SHOW TRANSACTION")
		}
	case 593:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3448
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 594:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3457
		{

			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowCreate{Name: name}
		}
	case 595:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3466
		{
			return helpWith(sqllex, "SHOW CREATE")
		}
	case 599:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3479
		{
			sqlVAL.union.val = &tree.ShowUsers{}
		}
	case 600:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3482
		{
			return helpWith(sqllex, "SHOW USERS")
		}
	case 601:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3490
		{
			sqlVAL.union.val = &tree.ShowRoles{}
		}
	case 602:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3493
		{
			return helpWith(sqllex, "SHOW ROLES")
		}
	case 603:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3497
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{NamedZone: tree.UnrestrictedName(sqlDollar[6].str)}}
		}
	case 604:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3501
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{Database: tree.Name(sqlDollar[6].str)}}
		}
	case 605:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:3505
		{
			name, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
			}}
		}
	case 606:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3516
		{
			name, err := tree.NormalizeTableName(sqlDollar[9].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: tree.TableNameWithIndex{Table: name},
				Partition:    tree.Name(sqlDollar[6].str),
			}}
		}
	case 607:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:3528
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{ZoneSpecifier: tree.ZoneSpecifier{
				TableOrIndex: sqlDollar[6].union.tableWithIdx(),
			}}
		}
	case 608:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3534
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 609:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:3538
		{
			sqlVAL.union.val = &tree.ShowZoneConfig{}
		}
	case 610:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3549
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowRanges{Table: &name}
		}
	case 611:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3558
		{
			sqlVAL.union.val = &tree.ShowRanges{Index: sqlDollar[5].union.newTableWithIdx()}
		}
	case 612:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3561
		{
			return helpWith(sqllex, "SHOW RANGES")
		}
	case 615:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:3569
		{

			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ShowFingerprints{Table: name}
		}
	case 616:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3581
		{
			tmp := sqlDollar[2].union.targetList()
			sqlVAL.union.val = &tmp
		}
	case 617:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3586
		{
			sqlVAL.union.val = (*tree.TargetList)(nil)
		}
	case 618:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3706
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 619:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3710
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}}}
		}
	case 620:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3714
		{

			sqlVAL.union.val = tree.TargetList{
				Tables:   tree.TablePatterns{&tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}},
				ForRoles: sqlDollar[1].str == "role",
			}
		}
	case 621:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3753
		{
			sqlVAL.union.val = tree.TargetList{Tables: tree.TablePatterns{sqlDollar[1].union.unresolvedName()}}
		}
	case 622:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3757
		{
			remainderPats := sqlDollar[3].union.tablePatterns()
			sqlVAL.union.val = tree.TargetList{Tables: append(tree.TablePatterns{sqlDollar[1].union.unresolvedName()}, remainderPats...)}
		}
	case 623:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3762
		{
			sqlVAL.union.val = tree.TargetList{Tables: sqlDollar[2].union.tablePatterns()}
		}
	case 624:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3766
		{
			sqlVAL.union.val = tree.TargetList{Databases: sqlDollar[2].union.nameList()}
		}
	case 625:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3775
		{
			sqlVAL.union.val = tree.TargetList{ForRoles: true, Roles: sqlDollar[2].union.nameList()}
		}
	case 627:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3782
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 628:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3786
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 629:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3798
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.PauseJob,
			}
		}
	case 630:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3807
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.PauseJob}
		}
	case 631:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3810
		{
			return helpWith(sqllex, "PAUSE JOBS")
		}
	case 632:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:3846
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    sqlDollar[8].union.interleave(),
				Defs:          sqlDollar[6].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[9].union.partitionBy(),
			}
		}
	case 633:
		sqlDollar = sqlS[sqlpt-13 : sqlpt+1]
		//line sql-gen.y:3863
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    sqlDollar[11].union.interleave(),
				Defs:          sqlDollar[9].union.tblDefs(),
				AsSource:      nil,
				AsColumnNames: nil,
				PartitionBy:   sqlDollar[12].union.partitionBy(),
			}
		}
	case 634:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3881
		{
		}
	case 635:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3882
		{
		}
	case 636:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3883
		{
			return unimplemented(sqllex, "create table with "+sqlDollar[2].str)
		}
	case 637:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:3887
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   false,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[8].union.slct(),
				AsColumnNames: sqlDollar[5].union.nameList(),
			}
		}
	case 638:
		sqlDollar = sqlS[sqlpt-12 : sqlpt+1]
		//line sql-gen.y:3903
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateTable{
				Table:         name,
				IfNotExists:   true,
				Interleave:    nil,
				Defs:          nil,
				AsSource:      sqlDollar[11].union.slct(),
				AsColumnNames: sqlDollar[8].union.nameList(),
			}
		}
	case 639:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3920
		{
		}
	case 640:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3921
		{
		}
	case 641:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3922
		{
			return unimplemented(sqllex, "create table as with no data")
		}
	case 642:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3936
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 643:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3937
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 644:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3938
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 645:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3939
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 646:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3940
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 647:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:3941
		{
			return unimplementedWithIssue(sqllex, 5807)
		}
	case 648:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3942
		{
			return unimplemented(sqllex, "create unlogged")
		}
	case 649:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3943
		{
		}
	case 651:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3948
		{
			sqlVAL.union.val = tree.TableDefs(nil)
		}
	case 652:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3954
		{
			sqlVAL.union.val = tree.TableDefs{sqlDollar[1].union.tblDef()}
		}
	case 653:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3958
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblDefs(), sqlDollar[3].union.tblDef())
		}
	case 654:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3964
		{
			sqlVAL.union.val = sqlDollar[1].union.colDef()
		}
	case 657:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3970
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 658:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:3973
		{
			return unimplementedWithIssue(sqllex, 30840)
		}
	case 659:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:3977
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.InterleaveDef{
				Parent:       name,
				Fields:       sqlDollar[6].union.nameList(),
				DropBehavior: sqlDollar[8].union.dropBehavior(),
			}
		}
	case 660:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:3990
		{
			sqlVAL.union.val = (*tree.InterleaveDef)(nil)
		}
	case 661:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:3997
		{

			sqlVAL.union.val = tree.DropCascade
		}
	case 662:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4002
		{

			sqlVAL.union.val = tree.DropRestrict
		}
	case 663:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4007
		{
			sqlVAL.union.val = tree.DropDefault
		}
	case 664:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4013
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 666:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4020
		{
			sqlVAL.str = ""
		}
	case 668:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4027
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 669:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4033
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				List:   sqlDollar[8].union.listPartitions(),
			}
		}
	case 670:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4040
		{
			sqlVAL.union.val = &tree.PartitionBy{
				Fields: sqlDollar[5].union.nameList(),
				Range:  sqlDollar[8].union.rangePartitions(),
			}
		}
	case 671:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4047
		{
			sqlVAL.union.val = (*tree.PartitionBy)(nil)
		}
	case 672:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4053
		{
			sqlVAL.union.val = []tree.ListPartition{sqlDollar[1].union.listPartition()}
		}
	case 673:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4057
		{
			sqlVAL.union.val = append(sqlDollar[1].union.listPartitions(), sqlDollar[3].union.listPartition())
		}
	case 674:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4063
		{
			sqlVAL.union.val = tree.ListPartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				Exprs:        sqlDollar[5].union.exprs(),
				Subpartition: sqlDollar[7].union.partitionBy(),
			}
		}
	case 675:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4073
		{
			sqlVAL.union.val = []tree.RangePartition{sqlDollar[1].union.rangePartition()}
		}
	case 676:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4077
		{
			sqlVAL.union.val = append(sqlDollar[1].union.rangePartitions(), sqlDollar[3].union.rangePartition())
		}
	case 677:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4083
		{
			sqlVAL.union.val = tree.RangePartition{
				Name:         tree.UnrestrictedName(sqlDollar[1].str),
				From:         sqlDollar[5].union.exprs(),
				To:           sqlDollar[9].union.exprs(),
				Subpartition: sqlDollar[11].union.partitionBy(),
			}
		}
	case 678:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4094
		{
			tableDef, err := tree.NewColumnTableDef(tree.Name(sqlDollar[1].str), sqlDollar[2].union.colType(), sqlDollar[3].union.colQuals())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tableDef
		}
	case 679:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4105
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colQuals(), sqlDollar[2].union.colQual())
		}
	case 680:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4109
		{
			sqlVAL.union.val = []tree.NamedColumnQualification(nil)
		}
	case 681:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4115
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Name: tree.Name(sqlDollar[2].str), Qualification: sqlDollar[3].union.colQualElem()}
		}
	case 682:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4119
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: sqlDollar[1].union.colQualElem()}
		}
	case 683:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4123
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: tree.ColumnCollation(sqlDollar[2].str)}
		}
	case 684:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4127
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[2].str)}}
		}
	case 685:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4131
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[3].str), Create: true}}
		}
	case 686:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4135
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Create: true}}
		}
	case 687:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4139
		{
			sqlVAL.union.val = tree.NamedColumnQualification{Qualification: &tree.ColumnFamilyConstraint{Family: tree.Name(sqlDollar[6].str), Create: true, IfNotExists: true}}
		}
	case 688:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4157
		{
			sqlVAL.union.val = tree.NotNullConstraint{}
		}
	case 689:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4161
		{
			sqlVAL.union.val = tree.NullConstraint{}
		}
	case 690:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4165
		{
			sqlVAL.union.val = tree.UniqueConstraint{}
		}
	case 691:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4169
		{
			sqlVAL.union.val = tree.PrimaryKeyConstraint{}
		}
	case 692:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4173
		{
			sqlVAL.union.val = &tree.ColumnCheckConstraint{Expr: sqlDollar[3].union.expr()}
		}
	case 693:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4177
		{
			sqlVAL.union.val = &tree.ColumnDefault{Expr: sqlDollar[2].union.expr()}
		}
	case 694:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4181
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ColumnFKConstraint{
				Table:   name,
				Col:     tree.Name(sqlDollar[3].str),
				Actions: sqlDollar[5].union.referenceActions(),
			}
		}
	case 695:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4194
		{
			sqlVAL.union.val = &tree.ColumnComputedDef{Expr: sqlDollar[3].union.expr()}
		}
	case 696:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4198
		{
			return unimplemented(sqllex, "virtual computed columns")
		}
	case 697:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4202
		{
			sqllex.Error("syntax error: use AS ( <expr> ) STORED")
			return 1
		}
	case 698:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4209
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:        tree.Name(sqlDollar[2].str),
				Columns:     sqlDollar[4].union.idxElems(),
				Storing:     sqlDollar[6].union.nameList(),
				Interleave:  sqlDollar[7].union.interleave(),
				PartitionBy: sqlDollar[8].union.partitionBy(),
			}
		}
	case 699:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql-gen.y:4219
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Name:        tree.Name(sqlDollar[3].str),
					Columns:     sqlDollar[5].union.idxElems(),
					Storing:     sqlDollar[7].union.nameList(),
					Interleave:  sqlDollar[8].union.interleave(),
					PartitionBy: sqlDollar[9].union.partitionBy(),
				},
			}
		}
	case 700:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4231
		{
			sqlVAL.union.val = &tree.IndexTableDef{
				Name:     tree.Name(sqlDollar[3].str),
				Columns:  sqlDollar[5].union.idxElems(),
				Inverted: true,
			}
		}
	case 701:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4241
		{
			sqlVAL.union.val = &tree.FamilyTableDef{
				Name:    tree.Name(sqlDollar[2].str),
				Columns: sqlDollar[4].union.nameList(),
			}
		}
	case 702:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4253
		{
			sqlVAL.union.val = sqlDollar[3].union.constraintDef()
			sqlVAL.union.val.(tree.ConstraintTableDef).SetName(tree.Name(sqlDollar[2].str))
		}
	case 703:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4258
		{
			sqlVAL.union.val = sqlDollar[1].union.constraintDef()
		}
	case 704:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4264
		{
			sqlVAL.union.val = &tree.CheckConstraintTableDef{
				Expr: sqlDollar[3].union.expr(),
			}
		}
	case 705:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4270
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns:     sqlDollar[3].union.idxElems(),
					Storing:     sqlDollar[5].union.nameList(),
					Interleave:  sqlDollar[6].union.interleave(),
					PartitionBy: sqlDollar[7].union.partitionBy(),
				},
			}
		}
	case 706:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4281
		{
			sqlVAL.union.val = &tree.UniqueConstraintTableDef{
				IndexTableDef: tree.IndexTableDef{
					Columns: sqlDollar[4].union.idxElems(),
				},
				PrimaryKey: true,
			}
		}
	case 707:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:4291
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.ForeignKeyConstraintTableDef{
				Table:    name,
				FromCols: sqlDollar[4].union.nameList(),
				ToCols:   sqlDollar[8].union.nameList(),
				Actions:  sqlDollar[10].union.referenceActions(),
			}
		}
	case 708:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4306
		{
		}
	case 709:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4307
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "deferrable")
		}
	case 710:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4308
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially deferred")
		}
	case 711:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4309
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "def initially immediate")
		}
	case 712:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4310
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially deferred")
		}
	case 713:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4311
		{
			return unimplementedWithIssueDetail(sqllex, 31632, "initially immediate")
		}
	case 716:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4328
		{
			sqlVAL.union.val = sqlDollar[3].union.nameList()
		}
	case 717:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4332
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 718:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4338
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 719:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4342
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 720:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4347
		{
			return unimplemented(sqllex, "references match full")
		}
	case 721:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4348
		{
			return unimplemented(sqllex, "references match partial")
		}
	case 722:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4349
		{
			return unimplemented(sqllex, "references match simple")
		}
	case 723:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4350
		{
		}
	case 724:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4357
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction()}
		}
	case 725:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4361
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction()}
		}
	case 726:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4365
		{
			sqlVAL.union.val = tree.ReferenceActions{Update: sqlDollar[1].union.referenceAction(), Delete: sqlDollar[2].union.referenceAction()}
		}
	case 727:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4369
		{
			sqlVAL.union.val = tree.ReferenceActions{Delete: sqlDollar[1].union.referenceAction(), Update: sqlDollar[2].union.referenceAction()}
		}
	case 728:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4373
		{
			sqlVAL.union.val = tree.ReferenceActions{}
		}
	case 729:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4379
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 730:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4385
		{
			sqlVAL.union.val = sqlDollar[3].union.referenceAction()
		}
	case 731:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4393
		{
			sqlVAL.union.val = tree.NoAction
		}
	case 732:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4397
		{
			sqlVAL.union.val = tree.Restrict
		}
	case 733:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4401
		{
			sqlVAL.union.val = tree.Cascade
		}
	case 734:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4405
		{
			sqlVAL.union.val = tree.SetNull
		}
	case 735:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4409
		{
			sqlVAL.union.val = tree.SetDefault
		}
	case 736:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4415
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 737:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4419
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 738:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4425
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 739:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4444
		{
			name, err := tree.NormalizeTableName(sqlDollar[4].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[5].union.seqOpts()}
		}
	case 740:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4453
		{
			name, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateSequence{Name: name, Options: sqlDollar[8].union.seqOpts(), IfNotExists: true}
		}
	case 741:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4461
		{
			return helpWith(sqllex, "CREATE SEQUENCE")
		}
	case 743:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4465
		{
			sqlVAL.union.val = []tree.SequenceOption(nil)
		}
	case 744:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4468
		{
			sqlVAL.union.val = []tree.SequenceOption{sqlDollar[1].union.seqOpt()}
		}
	case 745:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4469
		{
			sqlVAL.union.val = append(sqlDollar[1].union.seqOpts(), sqlDollar[2].union.seqOpt())
		}
	case 746:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4472
		{
			return unimplementedWithIssueDetail(sqllex, 25110, sqlDollar[2].union.colType().String())
		}
	case 747:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4473
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCycle}
		}
	case 748:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4475
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptNoCycle}
		}
	case 749:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4476
		{
			return unimplementedWithIssue(sqllex, 26382)
		}
	case 750:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4477
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptCache, IntVal: &x}
		}
	case 751:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4480
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x}
		}
	case 752:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4482
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptIncrement, IntVal: &x, OptionalWord: true}
		}
	case 753:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4484
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue, IntVal: &x}
		}
	case 754:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4486
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMinValue}
		}
	case 755:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4487
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue, IntVal: &x}
		}
	case 756:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4489
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptMaxValue}
		}
	case 757:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4490
		{
			x := sqlDollar[2].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x}
		}
	case 758:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4492
		{
			x := sqlDollar[3].union.int64()
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptStart, IntVal: &x, OptionalWord: true}
		}
	case 759:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4494
		{
			sqlVAL.union.val = tree.SequenceOption{Name: tree.SeqOptVirtual}
		}
	case 760:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4502
		{
			sqlVAL.union.val = &tree.Truncate{Tables: sqlDollar[3].union.tableNames(), DropBehavior: sqlDollar[4].union.dropBehavior()}
		}
	case 761:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4505
		{
			return helpWith(sqllex, "TRUNCATE")
		}
	case 762:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4513
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[3].union.expr(), Password: sqlDollar[4].union.expr()}
		}
	case 763:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4517
		{
			sqlVAL.union.val = &tree.CreateUser{Name: sqlDollar[6].union.expr(), Password: sqlDollar[7].union.expr(), IfNotExists: true}
		}
	case 764:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4520
		{
			return helpWith(sqllex, "CREATE USER")
		}
	case 765:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4524
		{
			sqlVAL.union.val = sqlDollar[3].union.expr()
		}
	case 766:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4528
		{
			sqlVAL.union.val = nil
		}
	case 767:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4538
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[3].union.expr()}
		}
	case 768:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4542
		{
			sqlVAL.union.val = &tree.CreateRole{Name: sqlDollar[6].union.expr(), IfNotExists: true}
		}
	case 769:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4545
		{
			return helpWith(sqllex, "CREATE ROLE")
		}
	case 770:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4550
		{
		}
	case 771:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4551
		{
		}
	case 772:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4559
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateView{
				Name:        name,
				ColumnNames: sqlDollar[6].union.nameList(),
				AsSource:    sqlDollar[8].union.slct(),
			}
		}
	case 773:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4571
		{
			return unimplementedWithIssue(sqllex, 24897)
		}
	case 774:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4572
		{
			return helpWith(sqllex, "CREATE VIEW")
		}
	case 775:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4575
		{
		}
	case 776:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4576
		{
			return unimplemented(sqllex, "create recursive view")
		}
	case 777:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4582
		{
			return unimplementedWithIssue(sqllex, 27792)
		}
	case 778:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:4584
		{
			return unimplementedWithIssue(sqllex, 24873)
		}
	case 779:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4586
		{
			return unimplementedWithIssue(sqllex, 27791)
		}
	case 780:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:4588
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "base")
		}
	case 781:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4590
		{
			return unimplementedWithIssueDetail(sqllex, 27793, "shell")
		}
	case 782:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4592
		{
			return unimplementedWithIssueDetail(sqllex, 27796, "create")
		}
	case 783:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql-gen.y:4608
		{
			table, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[4].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
				Inverted:    sqlDollar[7].union.bool(),
			}
		}
	case 784:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
		//line sql-gen.y:4626
		{
			table, err := tree.NormalizeTableName(sqlDollar[9].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[7].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
				Inverted:    sqlDollar[10].union.bool(),
			}
		}
	case 785:
		sqlDollar = sqlS[sqlpt-14 : sqlpt+1]
		//line sql-gen.y:4645
		{
			table, err := tree.NormalizeTableName(sqlDollar[7].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[5].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				Columns:     sqlDollar[9].union.idxElems(),
				Storing:     sqlDollar[11].union.nameList(),
				Interleave:  sqlDollar[12].union.interleave(),
				PartitionBy: sqlDollar[13].union.partitionBy(),
			}
		}
	case 786:
		sqlDollar = sqlS[sqlpt-17 : sqlpt+1]
		//line sql-gen.y:4663
		{
			table, err := tree.NormalizeTableName(sqlDollar[10].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.CreateIndex{
				Name:        tree.Name(sqlDollar[8].str),
				Table:       table,
				Unique:      sqlDollar[2].union.bool(),
				Inverted:    true,
				IfNotExists: true,
				Columns:     sqlDollar[12].union.idxElems(),
				Storing:     sqlDollar[14].union.nameList(),
				Interleave:  sqlDollar[15].union.interleave(),
				PartitionBy: sqlDollar[16].union.partitionBy(),
			}
		}
	case 787:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:4681
		{
			return helpWith(sqllex, "CREATE INDEX")
		}
	case 788:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4684
		{
		}
	case 789:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4685
		{
			return unimplementedWithIssue(sqllex, 9683)
		}
	case 790:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4689
		{

			switch sqlDollar[2].str {
			case "gin":
				sqlVAL.union.val = true
			case "btree":
				sqlVAL.union.val = false
			case "hash", "gist", "spgist", "brin":
				return unimplemented(sqllex, "index using "+sqlDollar[2].str)
			default:
				sqllex.Error("unrecognized access method: " + sqlDollar[2].str)
				return 1
			}
		}
	case 791:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4704
		{
			sqlVAL.union.val = false
		}
	case 792:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4710
		{
			sqlVAL.union.val = true
		}
	case 793:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4714
		{
			sqlVAL.union.val = false
		}
	case 794:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4720
		{
			sqlVAL.union.val = tree.IndexElemList{sqlDollar[1].union.idxElem()}
		}
	case 795:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4724
		{
			sqlVAL.union.val = append(sqlDollar[1].union.idxElems(), sqlDollar[3].union.idxElem())
		}
	case 796:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4733
		{

			e := sqlDollar[1].union.expr()
			if colName, ok := e.(*tree.UnresolvedName); ok && colName.NumParts == 1 {
				sqlVAL.union.val = tree.IndexElem{Column: tree.Name(colName.Parts[0]), Direction: sqlDollar[2].union.dir()}
			} else {
				return unimplementedWithIssueDetail(sqllex, 9682, fmt.Sprintf("%T", e))
			}
		}
	case 797:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4744
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 798:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4745
		{
			sqlVAL.str = ""
		}
	case 799:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4749
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 800:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4753
		{
			sqlVAL.union.val = tree.Descending
		}
	case 801:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4757
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 802:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4763
		{
			sqlVAL.union.val = &tree.RenameDatabase{Name: tree.Name(sqlDollar[3].str), NewName: tree.Name(sqlDollar[6].str)}
		}
	case 803:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4770
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[3].union.expr(), Password: sqlDollar[6].union.expr()}
		}
	case 804:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4774
		{
			sqlVAL.union.val = &tree.AlterUserSetPassword{Name: sqlDollar[5].union.expr(), Password: sqlDollar[8].union.expr(), IfExists: true}
		}
	case 805:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4780
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: false}
		}
	case 806:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4794
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: false}
		}
	case 807:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4808
		{
			table, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[6].str),
				NewName:  tree.Name(sqlDollar[8].str),
				IfExists: false,
			}
		}
	case 808:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4822
		{
			table, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameColumn{
				Table:    table,
				Name:     tree.Name(sqlDollar[8].str),
				NewName:  tree.Name(sqlDollar[10].str),
				IfExists: true,
			}
		}
	case 809:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4836
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 810:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:4838
		{
			return unimplemented(sqllex, "alter table rename constraint")
		}
	case 811:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4842
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsView: true}
		}
	case 812:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4856
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsView: true}
		}
	case 813:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4872
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[6].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: false, IsSequence: true}
		}
	case 814:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4886
		{
			name, err := tree.NormalizeTableName(sqlDollar[5].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			newName, err := tree.NormalizeTableName(sqlDollar[8].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.RenameTable{Name: name, NewName: newName, IfExists: true, IsSequence: true}
		}
	case 815:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:4902
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[3].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[6].str), IfExists: false}
		}
	case 816:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:4906
		{
			sqlVAL.union.val = &tree.RenameIndex{Index: sqlDollar[5].union.newTableWithIdx(), NewName: tree.UnrestrictedName(sqlDollar[8].str), IfExists: true}
		}
	case 817:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:4911
		{
		}
	case 818:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4912
		{
		}
	case 819:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4915
		{
		}
	case 820:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:4916
		{
		}
	case 821:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4924
		{
			sqlVAL.union.val = &tree.ReleaseSavepoint{Savepoint: sqlDollar[2].str}
		}
	case 822:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4927
		{
			return helpWith(sqllex, "RELEASE")
		}
	case 823:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4937
		{
			sqlVAL.union.val = &tree.ControlJobs{
				Jobs: &tree.Select{
					Select: &tree.ValuesClause{Rows: []tree.Exprs{tree.Exprs{sqlDollar[3].union.expr()}}},
				},
				Command: tree.ResumeJob,
			}
		}
	case 824:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4946
		{
			sqlVAL.union.val = &tree.ControlJobs{Jobs: sqlDollar[3].union.slct(), Command: tree.ResumeJob}
		}
	case 825:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4949
		{
			return helpWith(sqllex, "RESUME JOBS")
		}
	case 826:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4957
		{
			sqlVAL.union.val = &tree.Savepoint{Name: sqlDollar[2].str}
		}
	case 827:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4960
		{
			return helpWith(sqllex, "SAVEPOINT")
		}
	case 829:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4964
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 831:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4965
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 833:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4966
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 835:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4982
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 836:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4985
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 837:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:4987
		{
			sqlVAL.union.val = sqlDollar[3].union.stmt()
		}
	case 838:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:4990
		{
			return helpWith(sqllex, "BEGIN")
		}
	case 839:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5000
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 840:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5003
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 841:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5005
		{
			sqlVAL.union.val = &tree.CommitTransaction{}
		}
	case 842:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5008
		{
			return helpWith(sqllex, "COMMIT")
		}
	case 843:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5012
		{
			sqlVAL.union.val = &tree.RollbackTransaction{}
		}
	case 844:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5017
		{
		}
	case 845:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5018
		{
		}
	case 846:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5019
		{
		}
	case 847:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5027
		{
			if sqlDollar[2].str != "" {
				sqlVAL.union.val = &tree.RollbackToSavepoint{Savepoint: sqlDollar[2].str}
			} else {
				sqlVAL.union.val = &tree.RollbackTransaction{}
			}
		}
	case 848:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5034
		{
			return helpWith(sqllex, "ROLLBACK")
		}
	case 849:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5037
		{
		}
	case 850:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5038
		{
		}
	case 851:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5042
		{
			sqlVAL.str = ""
		}
	case 852:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5046
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 853:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5050
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 854:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5054
		{
			sqlVAL.str = ""
		}
	case 855:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5060
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 856:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5064
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 857:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5070
		{
			sqlVAL.union.val = &tree.BeginTransaction{Modes: sqlDollar[1].union.transactionModes()}
		}
	case 858:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5074
		{
			sqlVAL.union.val = &tree.BeginTransaction{}
		}
	case 859:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5080
		{
			sqlVAL.union.val = sqlDollar[1].union.transactionModes()
		}
	case 860:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5084
		{
			a := sqlDollar[1].union.transactionModes()
			b := sqlDollar[3].union.transactionModes()
			err := a.Merge(b)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 861:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5097
		{
		}
	case 862:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5099
		{
		}
	case 863:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5103
		{
			sqlVAL.union.val = tree.TransactionModes{Isolation: sqlDollar[1].union.isoLevel()}
		}
	case 864:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5107
		{
			sqlVAL.union.val = tree.TransactionModes{UserPriority: sqlDollar[1].union.userPriority()}
		}
	case 865:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5111
		{
			sqlVAL.union.val = tree.TransactionModes{ReadWriteMode: sqlDollar[1].union.readWriteMode()}
		}
	case 866:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5117
		{
			sqlVAL.union.val = sqlDollar[2].union.userPriority()
		}
	case 867:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5123
		{
			sqlVAL.union.val = sqlDollar[3].union.isoLevel()
		}
	case 868:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5129
		{
			sqlVAL.union.val = tree.ReadOnly
		}
	case 869:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5133
		{
			sqlVAL.union.val = tree.ReadWrite
		}
	case 870:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5143
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				Name:     tree.Name(sqlDollar[3].str),
				Template: sqlDollar[5].str,
				Encoding: sqlDollar[6].str,
				Collate:  sqlDollar[7].str,
				CType:    sqlDollar[8].str,
			}
		}
	case 871:
		sqlDollar = sqlS[sqlpt-11 : sqlpt+1]
		//line sql-gen.y:5153
		{
			sqlVAL.union.val = &tree.CreateDatabase{
				IfNotExists: true,
				Name:        tree.Name(sqlDollar[6].str),
				Template:    sqlDollar[8].str,
				Encoding:    sqlDollar[9].str,
				Collate:     sqlDollar[10].str,
				CType:       sqlDollar[11].str,
			}
		}
	case 872:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5163
		{
			return helpWith(sqllex, "CREATE DATABASE")
		}
	case 873:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5167
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 874:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5171
		{
			sqlVAL.str = ""
		}
	case 875:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5177
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 876:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5181
		{
			sqlVAL.str = ""
		}
	case 877:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5187
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 878:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5191
		{
			sqlVAL.str = ""
		}
	case 879:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5197
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 880:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5201
		{
			sqlVAL.str = ""
		}
	case 881:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5206
		{
		}
	case 882:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5207
		{
		}
	case 883:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5219
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 884:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:5226
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = sqlDollar[6].union.onConflict()
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[7].union.retClause()
		}
	case 885:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5233
		{
			return helpWith(sqllex, "INSERT")
		}
	case 886:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5244
		{
			sqlVAL.union.val = sqlDollar[5].union.stmt()
			sqlVAL.union.val.(*tree.Insert).With = sqlDollar[1].union.with()
			sqlVAL.union.val.(*tree.Insert).Table = sqlDollar[4].union.tblExpr()
			sqlVAL.union.val.(*tree.Insert).OnConflict = &tree.OnConflict{}
			sqlVAL.union.val.(*tree.Insert).Returning = sqlDollar[6].union.retClause()
		}
	case 887:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5251
		{
			return helpWith(sqllex, "UPSERT")
		}
	case 888:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5255
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &name
		}
	case 889:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5268
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &name, As: tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}}
		}
	case 890:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5279
		{
			sqlVAL.union.val = &tree.Insert{Rows: sqlDollar[1].union.slct()}
		}
	case 891:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5283
		{
			sqlVAL.union.val = &tree.Insert{Columns: sqlDollar[2].union.nameList(), Rows: sqlDollar[4].union.slct()}
		}
	case 892:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5287
		{
			sqlVAL.union.val = &tree.Insert{Rows: &tree.Select{}}
		}
	case 893:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5293
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 894:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5297
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 896:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5317
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 897:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5321
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), Exprs: sqlDollar[7].union.updateExprs(), Where: tree.NewWhere(tree.AstWhere, sqlDollar[8].union.expr())}
		}
	case 898:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5325
		{
			sqlVAL.union.val = &tree.OnConflict{Columns: sqlDollar[3].union.nameList(), DoNothing: true}
		}
	case 899:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5331
		{

			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 900:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5335
		{
			return unimplemented(sqllex, "on conflict on constraint")
		}
	case 901:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5337
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 902:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5343
		{
			ret := tree.ReturningExprs(sqlDollar[2].union.selExprs())
			sqlVAL.union.val = &ret
		}
	case 903:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5348
		{
			sqlVAL.union.val = tree.ReturningNothingClause
		}
	case 904:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5352
		{
			sqlVAL.union.val = tree.AbsentReturningClause
		}
	case 905:
		sqlDollar = sqlS[sqlpt-10 : sqlpt+1]
		//line sql-gen.y:5369
		{
			sqlVAL.union.val = &tree.Update{
				With:      sqlDollar[1].union.with(),
				Table:     sqlDollar[3].union.tblExpr(),
				Exprs:     sqlDollar[5].union.updateExprs(),
				Where:     tree.NewWhere(tree.AstWhere, sqlDollar[7].union.expr()),
				OrderBy:   sqlDollar[8].union.orderBy(),
				Limit:     sqlDollar[9].union.limit(),
				Returning: sqlDollar[10].union.retClause(),
			}
		}
	case 906:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5380
		{
			return helpWith(sqllex, "UPDATE")
		}
	case 907:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5384
		{
			return unimplementedWithIssue(sqllex, 7841)
		}
	case 908:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5385
		{
		}
	case 909:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5389
		{
			sqlVAL.union.val = tree.UpdateExprs{sqlDollar[1].union.updateExpr()}
		}
	case 910:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5393
		{
			sqlVAL.union.val = append(sqlDollar[1].union.updateExprs(), sqlDollar[3].union.updateExpr())
		}
	case 913:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5406
		{
			sqlVAL.union.val = &tree.UpdateExpr{Names: tree.NameList{tree.Name(sqlDollar[1].str)}, Expr: sqlDollar[3].union.expr()}
		}
	case 914:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5409
		{
			return unimplementedWithIssue(sqllex, 8318)
		}
	case 915:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5413
		{
			sqlVAL.union.val = &tree.UpdateExpr{Tuple: true, Names: sqlDollar[2].union.nameList(), Expr: sqlDollar[5].union.expr()}
		}
	case 917:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5456
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 918:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5462
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: sqlDollar[2].union.slct()}
		}
	case 919:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5466
		{
			sqlVAL.union.val = &tree.ParenSelect{Select: &tree.Select{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 920:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5481
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt()}
		}
	case 921:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5485
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy()}
		}
	case 922:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5489
		{
			sqlVAL.union.val = &tree.Select{Select: sqlDollar[1].union.selectStmt(), OrderBy: sqlDollar[2].union.orderBy(), Limit: sqlDollar[3].union.limit()}
		}
	case 923:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5493
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt()}
		}
	case 924:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5497
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy()}
		}
	case 925:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5501
		{
			sqlVAL.union.val = &tree.Select{With: sqlDollar[1].union.with(), Select: sqlDollar[2].union.selectStmt(), OrderBy: sqlDollar[3].union.orderBy(), Limit: sqlDollar[4].union.limit()}
		}
	case 926:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5506
		{
		}
	case 927:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5507
		{
			return unimplementedWithIssue(sqllex, 6583)
		}
	case 928:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5512
		{
			return helpWith(sqllex, "<SELECTCLAUSE>")
		}
	case 932:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5547
		{
			return helpWith(sqllex, "SELECT")
		}
	case 934:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5548
		{
			return helpWith(sqllex, "VALUES")
		}
	case 936:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5549
		{
			return helpWith(sqllex, "TABLE")
		}
	case 938:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5571
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:   sqlDollar[3].union.selExprs(),
				From:    sqlDollar[4].union.from(),
				Where:   tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy: sqlDollar[6].union.groupBy(),
				Having:  tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:  sqlDollar[8].union.window(),
			}
		}
	case 939:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5584
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Exprs:    sqlDollar[3].union.selExprs(),
				From:     sqlDollar[4].union.from(),
				Where:    tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:  sqlDollar[6].union.groupBy(),
				Having:   tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:   sqlDollar[8].union.window(),
			}
		}
	case 940:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:5598
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct:   true,
				DistinctOn: sqlDollar[2].union.distinctOn(),
				Exprs:      sqlDollar[3].union.selExprs(),
				From:       sqlDollar[4].union.from(),
				Where:      tree.NewWhere(tree.AstWhere, sqlDollar[5].union.expr()),
				GroupBy:    sqlDollar[6].union.groupBy(),
				Having:     tree.NewWhere(tree.AstHaving, sqlDollar[7].union.expr()),
				Window:     sqlDollar[8].union.window(),
			}
		}
	case 941:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5610
		{
			return helpWith(sqllex, "SELECT")
		}
	case 942:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5614
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 943:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5623
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 944:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5632
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  &tree.Select{Select: sqlDollar[1].union.selectStmt()},
				Right: &tree.Select{Select: sqlDollar[4].union.selectStmt()},
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 945:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5647
		{
			sqlVAL.union.val = &tree.SelectClause{
				Exprs:       tree.SelectExprs{tree.StarSelectExpr()},
				From:        &tree.From{Tables: tree.TableExprs{sqlDollar[2].union.tblExpr()}},
				TableSelect: true,
			}
		}
	case 946:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5654
		{
			return helpWith(sqllex, "TABLE")
		}
	case 947:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5666
		{
			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 948:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5670
		{

			sqlVAL.union.val = &tree.With{CTEList: sqlDollar[2].union.ctes()}
		}
	case 949:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5674
		{
			return unimplementedWithIssue(sqllex, 21085)
		}
	case 950:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5678
		{
			sqlVAL.union.val = []*tree.CTE{sqlDollar[1].union.cte()}
		}
	case 951:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5682
		{
			sqlVAL.union.val = append(sqlDollar[1].union.ctes(), sqlDollar[3].union.cte())
		}
	case 952:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:5688
		{
			sqlVAL.union.val = &tree.CTE{
				Name: tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()},
				Stmt: sqlDollar[5].union.stmt(),
			}
		}
	case 953:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5696
		{
		}
	case 954:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5697
		{
		}
	case 955:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5701
		{
			sqlVAL.union.val = sqlDollar[1].union.with()
		}
	case 956:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5705
		{
			sqlVAL.union.val = nil
		}
	case 957:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5710
		{
		}
	case 958:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5711
		{
		}
	case 959:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5715
		{
			sqlVAL.union.val = true
		}
	case 960:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5719
		{
			sqlVAL.union.val = false
		}
	case 961:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5723
		{
			sqlVAL.union.val = false
		}
	case 962:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5729
		{
			sqlVAL.union.val = true
		}
	case 963:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5735
		{
			sqlVAL.union.val = tree.DistinctOn(sqlDollar[4].union.exprs())
		}
	case 964:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5740
		{
		}
	case 965:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5741
		{
		}
	case 966:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5744
		{
			return unimplementedWithIssue(sqllex, 23620)
		}
	case 967:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5745
		{
		}
	case 968:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5749
		{
			sqlVAL.union.val = sqlDollar[1].union.orderBy()
		}
	case 969:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5753
		{
			sqlVAL.union.val = tree.OrderBy(nil)
		}
	case 970:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5759
		{
			sqlVAL.union.val = tree.OrderBy(sqlDollar[3].union.orders())
		}
	case 971:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5765
		{
			sqlVAL.union.val = []*tree.Order{sqlDollar[1].union.order()}
		}
	case 972:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5769
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orders(), sqlDollar[3].union.order())
		}
	case 973:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5775
		{
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByColumn, Expr: sqlDollar[1].union.expr(), Direction: sqlDollar[2].union.dir()}
		}
	case 974:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5779
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Order{OrderType: tree.OrderByIndex, Direction: sqlDollar[4].union.dir(), Table: name}
		}
	case 975:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5788
		{
			name, err := tree.NormalizeTableName(sqlDollar[2].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.Order{
				OrderType: tree.OrderByIndex,
				Direction: sqlDollar[5].union.dir(),
				Table:     name,
				Index:     tree.UnrestrictedName(sqlDollar[4].str),
			}
		}
	case 976:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5807
		{
			if sqlDollar[1].union.limit() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limit()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limit()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limit().Offset
			}
		}
	case 977:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5816
		{
			sqlVAL.union.val = sqlDollar[1].union.limit()
			if sqlDollar[2].union.limit() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limit().Count
			}
		}
	case 981:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5827
		{
			sqlVAL.union.val = (*tree.Limit)(nil)
		}
	case 982:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5831
		{
			if sqlDollar[2].union.expr() == nil {
				sqlVAL.union.val = (*tree.Limit)(nil)
			} else {
				sqlVAL.union.val = &tree.Limit{Count: sqlDollar[2].union.expr()}
			}
		}
	case 983:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5840
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.expr()}
		}
	case 984:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5846
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 985:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5853
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.expr()}
		}
	case 987:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5860
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 988:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5869
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 989:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5873
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 990:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5877
		{
			sqlVAL.union.val = &tree.NumVal{Value: constant.MakeInt64(1)}
		}
	case 991:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5883
		{
		}
	case 992:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5884
		{
		}
	case 993:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5887
		{
		}
	case 994:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5888
		{
		}
	case 995:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5905
		{
			sqlVAL.union.val = tree.GroupBy(sqlDollar[3].union.exprs())
		}
	case 996:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5909
		{
			sqlVAL.union.val = tree.GroupBy(nil)
		}
	case 997:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5915
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 998:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5919
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 999:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:5938
		{
			sqlVAL.union.val = &tree.ValuesClause{Rows: []tree.Exprs{sqlDollar[3].union.exprs()}}
		}
	case 1000:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5941
		{
			return helpWith(sqllex, "VALUES")
		}
	case 1001:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5943
		{
			valNode := sqlDollar[1].union.selectStmt().(*tree.ValuesClause)
			valNode.Rows = append(valNode.Rows, sqlDollar[4].union.exprs())
			sqlVAL.union.val = valNode
		}
	case 1002:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5955
		{
			sqlVAL.union.val = &tree.From{Tables: sqlDollar[2].union.tblExprs(), AsOf: sqlDollar[3].union.asOfClause()}
		}
	case 1003:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:5958
		{
			return helpWith(sqllex, "<SOURCE>")
		}
	case 1004:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:5960
		{
			sqlVAL.union.val = &tree.From{}
		}
	case 1005:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5966
		{
			sqlVAL.union.val = tree.TableExprs{sqlDollar[1].union.tblExpr()}
		}
	case 1006:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5970
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tblExprs(), sqlDollar[3].union.tblExpr())
		}
	case 1007:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5976
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1008:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:5980
		{

			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[4].union.int64())}
		}
	case 1009:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5986
		{
			sqlVAL.union.val = &tree.IndexFlags{NoIndexJoin: true}
		}
	case 1010:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:5992
		{
			sqlVAL.union.val = sqlDollar[1].union.indexFlags()
		}
	case 1011:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:5997
		{
			a := sqlDollar[1].union.indexFlags()
			b := sqlDollar[3].union.indexFlags()
			if err := a.CombineWith(b); err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = a
		}
	case 1012:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6009
		{
			sqlVAL.union.val = &tree.IndexFlags{Index: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1013:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6013
		{
			sqlVAL.union.val = &tree.IndexFlags{IndexID: tree.IndexID(sqlDollar[3].union.int64())}
		}
	case 1014:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6017
		{
			sqlVAL.union.val = sqlDollar[3].union.indexFlags()
		}
	case 1015:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6021
		{
			sqlVAL.union.val = (*tree.IndexFlags)(nil)
		}
	case 1016:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:6048
		{

			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr: &tree.TableRef{
					TableID: sqlDollar[2].union.int64(),
					Columns: sqlDollar[3].union.tableRefCols(),
					As:      sqlDollar[4].union.aliasClause(),
				},
				IndexFlags: sqlDollar[6].union.indexFlags(),
				Ordinality: sqlDollar[7].union.bool(),
				As:         sqlDollar[8].union.aliasClause(),
			}
		}
	case 1017:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6062
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
				Ordinality: sqlDollar[3].union.bool(),
				As:         sqlDollar[4].union.aliasClause(),
			}
		}
	case 1018:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6076
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &tree.Subquery{Select: sqlDollar[1].union.selectStmt()},
				Ordinality: sqlDollar[2].union.bool(),
				As:         sqlDollar[3].union.aliasClause(),
			}
		}
	case 1019:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6083
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "select")
		}
	case 1020:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6085
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1021:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6089
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1022:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6093
		{
			f := sqlDollar[1].union.tblExpr()
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: f, Ordinality: sqlDollar[2].union.bool(), As: sqlDollar[3].union.aliasClause()}
		}
	case 1023:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6097
		{
			return unimplementedWithIssueDetail(sqllex, 24560, "srf")
		}
	case 1024:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6113
		{
			sqlVAL.union.val = &tree.AliasedTableExpr{Expr: &tree.StatementSource{Statement: sqlDollar[2].union.stmt()}, Ordinality: sqlDollar[4].union.bool(), As: sqlDollar[5].union.aliasClause()}
		}
	case 1025:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6119
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: tree.Exprs{sqlDollar[1].union.expr()}}
		}
	case 1026:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6123
		{
			sqlVAL.union.val = &tree.RowsFromExpr{Items: sqlDollar[4].union.exprs()}
		}
	case 1027:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6129
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1028:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6131
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1029:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6135
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1030:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6141
		{
		}
	case 1031:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6143
		{
			return unimplemented(sqllex, "ROWS FROM with col_def_list")
		}
	case 1032:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6146
		{
			sqlVAL.union.val = nil
		}
	case 1033:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6147
		{
			sqlVAL.union.val = []tree.ColumnID{}
		}
	case 1034:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6148
		{
			sqlVAL.union.val = sqlDollar[2].union.tableRefCols()
		}
	case 1035:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6152
		{
			sqlVAL.union.val = []tree.ColumnID{tree.ColumnID(sqlDollar[1].union.int64())}
		}
	case 1036:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6156
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableRefCols(), tree.ColumnID(sqlDollar[3].union.int64()))
		}
	case 1037:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6162
		{
			sqlVAL.union.val = true
		}
	case 1038:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6166
		{
			sqlVAL.union.val = false
		}
	case 1039:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6186
		{
			sqlVAL.union.val = &tree.ParenTableExpr{Expr: sqlDollar[2].union.tblExpr()}
		}
	case 1040:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6190
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstCrossJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr()}
		}
	case 1041:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6194
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[2].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: sqlDollar[5].union.joinCond()}
		}
	case 1042:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6198
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[3].union.tblExpr(), Cond: sqlDollar[4].union.joinCond()}
		}
	case 1043:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6202
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: sqlDollar[3].str, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[5].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1044:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6206
		{
			sqlVAL.union.val = &tree.JoinTableExpr{Join: tree.AstJoin, Left: sqlDollar[1].union.tblExpr(), Right: sqlDollar[4].union.tblExpr(), Cond: tree.NaturalJoinCond{}}
		}
	case 1045:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6212
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 1046:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6216
		{
			sqlVAL.union.val = tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 1048:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6223
		{
			sqlVAL.union.val = tree.AliasClause{}
		}
	case 1049:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6229
		{
			sqlVAL.union.val = tree.AsOfClause{Expr: sqlDollar[5].union.expr()}
		}
	case 1051:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6236
		{
			sqlVAL.union.val = tree.AsOfClause{}
		}
	case 1052:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6242
		{
			sqlVAL.str = tree.AstFullJoin
		}
	case 1053:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6246
		{
			sqlVAL.str = tree.AstLeftJoin
		}
	case 1054:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6250
		{
			sqlVAL.str = tree.AstRightJoin
		}
	case 1055:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6254
		{
			sqlVAL.str = tree.AstInnerJoin
		}
	case 1056:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6260
		{
		}
	case 1057:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6261
		{
		}
	case 1058:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6272
		{
			sqlVAL.union.val = &tree.UsingJoinCond{Cols: sqlDollar[3].union.nameList()}
		}
	case 1059:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6276
		{
			sqlVAL.union.val = &tree.OnJoinCond{Expr: sqlDollar[2].union.expr()}
		}
	case 1060:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6281
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1061:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6282
		{
			sqlVAL.union.val = sqlDollar[1].union.unresolvedName()
		}
	case 1062:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6283
		{
			sqlVAL.union.val = sqlDollar[2].union.unresolvedName()
		}
	case 1063:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6284
		{
			sqlVAL.union.val = sqlDollar[3].union.unresolvedName()
		}
	case 1064:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6288
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNames{name}
		}
	case 1065:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6297
		{
			name, err := tree.NormalizeTableName(sqlDollar[3].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = append(sqlDollar[1].union.tableNames(), name)
		}
	case 1066:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6315
		{
			sqlVAL.union.val = sqlDollar[1].union.tblExpr()
		}
	case 1067:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6319
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[2].str)}
			sqlVAL.union.val = alias
		}
	case 1068:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6325
		{
			alias := sqlDollar[1].union.tblExpr().(*tree.AliasedTableExpr)
			alias.As = tree.AliasClause{Alias: tree.Name(sqlDollar[3].str)}
			sqlVAL.union.val = alias
		}
	case 1069:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6333
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = &tree.AliasedTableExpr{
				Expr:       &name,
				IndexFlags: sqlDollar[2].union.indexFlags(),
			}
		}
	case 1070:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6347
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1071:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6351
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1072:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6363
		{
			if bounds := sqlDollar[2].union.int32s(); bounds != nil {
				var err error
				sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), bounds)
				if err != nil {
					sqllex.Error(err.Error())
					return 1
				}
			} else {
				sqlVAL.union.val = sqlDollar[1].union.colType()
			}
		}
	case 1073:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6377
		{

			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1074:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6386
		{
			var err error
			sqlVAL.union.val, err = coltypes.ArrayOf(sqlDollar[1].union.colType(), []int32{-1})
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
		}
	case 1075:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6395
		{
			sqlVAL.union.val = sqlDollar[1].union.castTargetType()
		}
	case 1076:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6401
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1077:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6408
		{
			sqlVAL.union.val = []int32{-1}
		}
	case 1078:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6410
		{

			bound, err := sqlDollar[2].union.numVal().AsInt32()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = []int32{bound}
		}
	case 1079:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6419
		{
			sqlVAL.union.val = []int32(nil)
		}
	case 1086:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6430
		{
			return unimplemented(sqllex, "interval with unit qualifier")
		}
	case 1087:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6431
		{
			return unimplemented(sqllex, "interval with precision")
		}
	case 1092:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6448
		{
			sqlVAL.union.val = coltypes.JSON
		}
	case 1093:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6452
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1094:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6456
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1095:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6460
		{
			sqlVAL.union.val = coltypes.Bytes
		}
	case 1096:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6464
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1097:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6468
		{
			sqlVAL.union.val = coltypes.Name
		}
	case 1098:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6472
		{
			sqlVAL.union.val = coltypes.Serial
		}
	case 1099:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6476
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6480
		{
			sqlVAL.union.val = coltypes.Serial2
		}
	case 1101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6484
		{
			sqlVAL.union.val = coltypes.Serial4
		}
	case 1102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6488
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6492
		{
			sqlVAL.union.val = coltypes.Serial8
		}
	case 1104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6496
		{
			sqlVAL.union.val = coltypes.UUID
		}
	case 1105:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6500
		{
			sqlVAL.union.val = coltypes.INet
		}
	case 1106:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6504
		{
			sqlVAL.union.val = coltypes.Oid
		}
	case 1107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6508
		{
			sqlVAL.union.val = coltypes.OidVector
		}
	case 1108:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6512
		{
			sqlVAL.union.val = coltypes.Int2vector
		}
	case 1109:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6516
		{

			if sqlDollar[1].str == "char" {
				sqlVAL.union.val = coltypes.QChar
			} else {
				var ok bool
				var unimp int
				sqlVAL.union.val, ok, unimp = coltypes.TypeForNonKeywordTypeName(sqlDollar[1].str)
				if !ok {
					switch unimp {
					case 0:

						sqllex.Error("type does not exist")
						return 1
					case -1:
						return unimplemented(sqllex, "type name "+sqlDollar[1].str)
					default:
						return unimplementedWithIssueDetail(sqllex, unimp, sqlDollar[1].str)
					}
				}
			}
		}
	case 1110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6547
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64())}
		}
	case 1111:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6551
		{
			sqlVAL.union.val = &coltypes.TDecimal{Prec: int(sqlDollar[2].union.int64()), Scale: int(sqlDollar[4].union.int64())}
		}
	case 1112:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6555
		{
			sqlVAL.union.val = nil
		}
	case 1113:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6562
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6566
		{
			sqlVAL.union.val = coltypes.Int
		}
	case 1115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6570
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1116:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6574
		{
			sqlVAL.union.val = coltypes.Int2
		}
	case 1117:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6578
		{
			sqlVAL.union.val = coltypes.Int4
		}
	case 1118:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6582
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6586
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1120:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6590
		{
			sqlVAL.union.val = coltypes.Int8
		}
	case 1121:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6594
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1122:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6598
		{
			sqlVAL.union.val = coltypes.Float4
		}
	case 1123:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6602
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6606
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
		}
	case 1125:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6610
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1126:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6614
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1127:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6621
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6628
		{
			sqlVAL.union.val = sqlDollar[2].union.colType()
			if sqlVAL.union.val == nil {
				sqlVAL.union.val = coltypes.Decimal
			}
		}
	case 1129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6635
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6639
		{
			sqlVAL.union.val = coltypes.Bool
		}
	case 1131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6646
		{
			sqlVAL.union.val = coltypes.RegProc
		}
	case 1132:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6650
		{
			sqlVAL.union.val = coltypes.RegProcedure
		}
	case 1133:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6654
		{
			sqlVAL.union.val = coltypes.RegClass
		}
	case 1134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6658
		{
			sqlVAL.union.val = coltypes.RegType
		}
	case 1135:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6662
		{
			sqlVAL.union.val = coltypes.RegNamespace
		}
	case 1136:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6668
		{
			nv := sqlDollar[2].union.numVal()
			prec, err := nv.AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			typ, err := coltypes.NewFloat(prec)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = typ
		}
	case 1137:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6683
		{
			sqlVAL.union.val = coltypes.Float8
		}
	case 1138:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6689
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[4].union.int64()), sqlDollar[2].union.bool())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1139:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6695
		{
			bit, err := coltypes.NewBitArrayType(int(sqlDollar[3].union.int64()), true)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = bit
		}
	case 1140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6703
		{
			sqlVAL.union.val = coltypes.Bit
		}
	case 1141:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6707
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1142:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6711
		{
			sqlVAL.union.val = coltypes.VarBit
		}
	case 1143:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6717
		{
			colTyp := *(sqlDollar[1].union.colType().(*coltypes.TString))
			n := sqlDollar[3].union.int64()
			if n == 0 {
				sqllex.Error(fmt.Sprintf("length for type %s must be at least 1", &colTyp))
				return 1
			}
			colTyp.N = uint(n)
			sqlVAL.union.val = &colTyp
		}
	case 1144:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6730
		{
			sqlVAL.union.val = sqlDollar[1].union.colType()
		}
	case 1145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6736
		{
			sqlVAL.union.val = coltypes.Char
		}
	case 1146:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6740
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6744
		{
			sqlVAL.union.val = coltypes.VarChar
		}
	case 1148:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6748
		{
			sqlVAL.union.val = coltypes.String
		}
	case 1151:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6757
		{
			sqlVAL.union.val = true
		}
	case 1152:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6758
		{
			sqlVAL.union.val = false
		}
	case 1153:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6763
		{
			sqlVAL.union.val = coltypes.Date
		}
	case 1154:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6767
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1155:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6771
		{
			sqlVAL.union.val = coltypes.Time
		}
	case 1156:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6775
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1157:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6779
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "type")
		}
	case 1158:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6783
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1159:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6787
		{
			sqlVAL.union.val = coltypes.Timestamp
		}
	case 1160:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6791
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1161:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6795
		{
			sqlVAL.union.val = coltypes.TimestampWithTZ
		}
	case 1162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6800
		{
			sqlVAL.union.val = coltypes.Interval
		}
	case 1163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6806
		{
			sqlVAL.union.val = tree.Year
		}
	case 1164:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6810
		{
			sqlVAL.union.val = tree.Month
		}
	case 1165:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6814
		{
			sqlVAL.union.val = tree.Day
		}
	case 1166:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6818
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1167:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6822
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1168:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6826
		{
			sqlVAL.union.val = sqlDollar[1].union.durationField()
		}
	case 1169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6832
		{
			sqlVAL.union.val = tree.Month
		}
	case 1170:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6836
		{
			sqlVAL.union.val = tree.Hour
		}
	case 1171:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6840
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1172:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6844
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1173:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6848
		{
			sqlVAL.union.val = tree.Minute
		}
	case 1174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6852
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1175:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6856
		{
			sqlVAL.union.val = sqlDollar[3].union.durationField()
		}
	case 1177:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:6863
		{
			sqlVAL.union.val = nil
		}
	case 1178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:6869
		{
			sqlVAL.union.val = tree.Second
		}
	case 1179:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:6872
		{
			return unimplemented(sqllex, "interval second with precision")
		}
	case 1181:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6896
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6900
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1183:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6904
		{
			sqlVAL.union.val = &tree.CollateExpr{Expr: sqlDollar[1].union.expr(), Locale: sqlDollar[3].str}
		}
	case 1184:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:6907
		{
			return unimplemented(sqllex, "at tz")
		}
	case 1185:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6916
		{

			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1186:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6921
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1187:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:6925
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1188:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6929
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1189:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6933
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1190:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6937
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1191:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6941
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1192:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6945
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1193:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6949
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1194:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6953
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1195:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6957
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1196:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6961
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1197:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6965
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1198:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6969
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1199:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6973
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1200:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6977
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1201:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6981
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONSomeExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1202:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6985
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.JSONAllExists, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1203:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6989
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Contains, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1204:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6993
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ContainedBy, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1205:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:6997
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1206:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7001
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1207:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7005
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1208:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7009
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1209:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7013
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchVal, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1210:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7017
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchText, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1211:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7021
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchValPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1212:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7025
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.JSONFetchTextPath, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1213:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7029
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("json_remove_path"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1214:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7033
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contained_by_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1215:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7037
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_contained_by"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1216:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7041
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("inet_contains_or_equals"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr()}}
		}
	case 1217:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7045
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1218:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7049
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1219:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7053
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1220:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7057
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1221:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7061
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7065
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1223:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7069
		{
			sqlVAL.union.val = &tree.NotExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1224:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7073
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.Like, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1225:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7077
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1226:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7081
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotLike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1227:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7085
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_like_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1228:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7089
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.ILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1229:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7093
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1230:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7097
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotILike, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1231:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7101
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_ilike_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1232:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7105
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.SimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1233:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7109
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[4].union.expr(), sqlDollar[6].union.expr()}}
		}
	case 1234:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7113
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotSimilarTo, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1235:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7117
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("not_similar_to_escape"), Exprs: tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[5].union.expr(), sqlDollar[7].union.expr()}}
		}
	case 1236:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7121
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7125
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1238:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7129
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.RegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1239:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7133
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotRegIMatch, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7137
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1241:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7141
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: tree.NewStrVal("NaN")}
		}
	case 1242:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7145
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1243:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7149
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1244:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7153
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1245:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7157
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1246:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7160
		{
			return unimplemented(sqllex, "overlaps")
		}
	case 1247:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7162
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1248:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7166
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(true)}
		}
	case 1249:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7170
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1250:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7174
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.MakeDBool(false)}
		}
	case 1251:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7178
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1252:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7182
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: tree.DNull}
		}
	case 1253:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7186
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1254:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7190
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1255:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7194
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1256:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7198
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1257:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7202
		{
			sqlVAL.union.val = &tree.RangeCond{Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1258:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7206
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1259:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7210
		{
			sqlVAL.union.val = &tree.RangeCond{Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[4].union.expr(), To: sqlDollar[6].union.expr()}
		}
	case 1260:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7214
		{
			sqlVAL.union.val = &tree.RangeCond{Not: true, Symmetric: true, Left: sqlDollar[1].union.expr(), From: sqlDollar[5].union.expr(), To: sqlDollar[7].union.expr()}
		}
	case 1261:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7218
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.In, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1262:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7222
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NotIn, Left: sqlDollar[1].union.expr(), Right: sqlDollar[4].union.expr()}
		}
	case 1263:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7226
		{
			op := sqlDollar[3].union.cmpOp()
			subOp := sqlDollar[2].union.op()
			subOpCmp, ok := subOp.(tree.ComparisonOperator)
			if !ok {
				sqllex.Error(fmt.Sprintf("%s %s <array> is invalid because %q is not a boolean operator",
					subOp, op, subOp))
				return 1
			}
			sqlVAL.union.val = &tree.ComparisonExpr{
				Operator:    op,
				SubOperator: subOpCmp,
				Left:        sqlDollar[1].union.expr(),
				Right:       sqlDollar[4].union.expr(),
			}
		}
	case 1264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7243
		{
			sqlVAL.union.val = tree.DefaultVal{}
		}
	case 1265:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7248
		{
			return unimplemented(sqllex, "UNIQUE predicate")
		}
	case 1267:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7260
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.castTargetType(), SyntaxMode: tree.CastShort}
		}
	case 1268:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7264
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[1].union.expr(), Type: sqlDollar[3].union.colType(), SyntaxMode: tree.AnnotateShort}
		}
	case 1269:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7268
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1270:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7272
		{
			sqlVAL.union.val = unaryNegation(sqlDollar[2].union.expr())
		}
	case 1271:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7276
		{
			sqlVAL.union.val = &tree.UnaryExpr{Operator: tree.UnaryComplement, Expr: sqlDollar[2].union.expr()}
		}
	case 1272:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7280
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Plus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1273:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7284
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Minus, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1274:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7288
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mult, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1275:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7292
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Div, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1276:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7296
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.FloorDiv, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1277:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7300
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Mod, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1278:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7304
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Pow, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1279:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7308
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitxor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1280:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7312
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitand, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1281:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7316
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Bitor, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1282:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7320
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1283:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7324
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GT, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1284:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7328
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.EQ, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1285:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7332
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.Concat, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1286:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7336
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.LShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1287:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7340
		{
			sqlVAL.union.val = &tree.BinaryExpr{Operator: tree.RShift, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1288:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7344
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.LE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1289:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7348
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.GE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1290:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7352
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.NE, Left: sqlDollar[1].union.expr(), Right: sqlDollar[3].union.expr()}
		}
	case 1291:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7356
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[5].union.expr()}
		}
	case 1292:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7360
		{
			sqlVAL.union.val = &tree.ComparisonExpr{Operator: tree.IsNotDistinctFrom, Left: sqlDollar[1].union.expr(), Right: sqlDollar[6].union.expr()}
		}
	case 1293:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7364
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Expr: sqlDollar[1].union.expr(), Types: sqlDollar[5].union.colTypes()}
		}
	case 1294:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:7368
		{
			sqlVAL.union.val = &tree.IsOfTypeExpr{Not: true, Expr: sqlDollar[1].union.expr(), Types: sqlDollar[6].union.colTypes()}
		}
	case 1296:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7382
		{
			sqlVAL.union.val = &tree.IndirectionExpr{
				Expr:        sqlDollar[1].union.expr(),
				Indirection: sqlDollar[2].union.arraySubscripts(),
			}
		}
	case 1298:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7390
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStmt(), Exists: true}
		}
	case 1299:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7426
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1300:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7430
		{
			sqlVAL.union.val = sqlDollar[1].union.numVal()
		}
	case 1301:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7434
		{
			sqlVAL.union.val = tree.NewStrVal(sqlDollar[1].str)
		}
	case 1302:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7438
		{
			sqlVAL.union.val = tree.NewBytesStrVal(sqlDollar[1].str)
		}
	case 1303:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7442
		{
			d, err := tree.ParseDBitArray(sqlDollar[1].str)
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1304:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7447
		{
			return unimplemented(sqllex, "func const")
		}
	case 1305:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7449
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: tree.NewStrVal(sqlDollar[2].str), Type: sqlDollar[1].union.colType(), SyntaxMode: tree.CastPrepend}
		}
	case 1306:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7453
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1307:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7456
		{
			return unimplemented(sqllex, "expr_const const_interval")
		}
	case 1308:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7458
		{
			sqlVAL.union.val = tree.MakeDBool(true)
		}
	case 1309:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7462
		{
			sqlVAL.union.val = tree.MakeDBool(false)
		}
	case 1310:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7466
		{
			sqlVAL.union.val = tree.DNull
		}
	case 1311:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7470
		{
			sqlVAL.union.val = tree.Expr(sqlDollar[1].union.unresolvedName())
		}
	case 1312:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7474
		{
			colNum := sqlDollar[2].union.int64()
			if colNum < 1 || colNum > int64(MaxInt) {
				sqllex.Error(fmt.Sprintf("invalid column ordinal: @%d", colNum))
				return 1
			}
			sqlVAL.union.val = tree.NewOrdinalReference(int(colNum - 1))
		}
	case 1313:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7483
		{
			sqlVAL.union.val = tree.NewPlaceholder(sqlDollar[1].str)
		}
	case 1314:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7488
		{
			sqlVAL.union.val = &tree.TupleStar{Expr: sqlDollar[2].union.expr()}
		}
	case 1315:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7492
		{
			sqlVAL.union.val = &tree.ColumnAccessExpr{Expr: sqlDollar[2].union.expr(), ColName: sqlDollar[5].str}
		}
	case 1316:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7496
		{
			sqlVAL.union.val = &tree.ParenExpr{Expr: sqlDollar[2].union.expr()}
		}
	case 1318:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7501
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1319:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7505
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1320:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7509
		{
			sqlVAL.union.val = &tree.ArrayFlatten{Subquery: &tree.Subquery{Select: sqlDollar[2].union.selectStmt()}}
		}
	case 1321:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7513
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.tuple().Exprs}
		}
	case 1322:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7517
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1323:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7520
		{
			return unimplemented(sqllex, "d_expr grouping")
		}
	case 1324:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7524
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName()}
		}
	case 1325:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7528
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1326:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7531
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1327:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7532
		{
			return unimplemented(sqllex, "variadic")
		}
	case 1328:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7534
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.AllFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1329:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7538
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Type: tree.DistinctFuncType, Exprs: sqlDollar[4].union.exprs()}
		}
	case 1330:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7542
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: sqlDollar[1].union.resolvableFuncRefFromName(), Exprs: tree.Exprs{tree.StarExpr()}}
		}
	case 1331:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7545
		{
			return helpWithFunction(sqllex, sqlDollar[1].union.resolvableFuncRefFromName())
		}
	case 1332:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7556
		{
			f := sqlDollar[1].union.expr().(*tree.FuncExpr)
			f.Filter = sqlDollar[3].union.expr()
			f.WindowDef = sqlDollar[4].union.windowDef()
			sqlVAL.union.val = f
		}
	case 1333:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7563
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1334:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7572
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1335:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7573
		{
			sqlVAL.union.val = sqlDollar[1].union.expr()
		}
	case 1336:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7577
		{
			return unimplemented(sqllex, "func_expr_common_subexpr collation for")
		}
	case 1337:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7579
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1338:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7583
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1339:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7589
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_database")}
		}
	case 1340:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7593
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1341:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7597
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1342:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7601
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1343:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7607
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1344:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7611
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1345:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7615
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("current_user")}
		}
	case 1346:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7619
		{
			sqlVAL.union.val = &tree.CastExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.castTargetType(), SyntaxMode: tree.CastExplicit}
		}
	case 1347:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7623
		{
			sqlVAL.union.val = &tree.AnnotateTypeExpr{Expr: sqlDollar[3].union.expr(), Type: sqlDollar[5].union.colType(), SyntaxMode: tree.AnnotateExplicit}
		}
	case 1348:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7627
		{
			sqlVAL.union.val = &tree.IfExpr{Cond: sqlDollar[3].union.expr(), True: sqlDollar[5].union.expr(), Else: sqlDollar[7].union.expr()}
		}
	case 1349:
		sqlDollar = sqlS[sqlpt-8 : sqlpt+1]
		//line sql-gen.y:7631
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr(), ErrCode: sqlDollar[7].union.expr()}
		}
	case 1350:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7635
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), Else: sqlDollar[5].union.expr()}
		}
	case 1351:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7639
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr()}
		}
	case 1352:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7643
		{
			sqlVAL.union.val = &tree.IfErrExpr{Cond: sqlDollar[3].union.expr(), ErrCode: sqlDollar[5].union.expr()}
		}
	case 1353:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7647
		{
			sqlVAL.union.val = &tree.NullIfExpr{Expr1: sqlDollar[3].union.expr(), Expr2: sqlDollar[5].union.expr()}
		}
	case 1354:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7651
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "IFNULL", Exprs: tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[5].union.expr()}}
		}
	case 1355:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7655
		{
			sqlVAL.union.val = &tree.CoalesceExpr{Name: "COALESCE", Exprs: sqlDollar[3].union.exprs()}
		}
	case 1357:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7662
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1358:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7665
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1359:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7667
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1360:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7670
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1361:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7672
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1362:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7675
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1363:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7677
		{
			return unimplementedWithIssueDetail(sqllex, 26097, "current_time")
		}
	case 1364:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7680
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1365:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7682
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str)}
		}
	case 1366:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7685
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1367:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7687
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1368:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7690
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1369:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7692
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1370:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7695
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1371:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7697
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1372:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7700
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1373:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7702
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("strpos"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1374:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7706
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1375:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7709
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1376:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7710
		{
			return unimplemented(sqllex, "treat")
		}
	case 1377:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7712
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1378:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7716
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("ltrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1379:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7720
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("rtrim"), Exprs: sqlDollar[4].union.exprs()}
		}
	case 1380:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7724
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction("btrim"), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1381:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7728
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1382:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7731
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1383:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7733
		{
			sqlVAL.union.val = &tree.FuncExpr{Func: tree.WrapFunction(sqlDollar[1].str), Exprs: sqlDollar[3].union.exprs()}
		}
	case 1384:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7736
		{
			return helpWithFunctionByName(sqllex, sqlDollar[1].str)
		}
	case 1385:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7741
		{
			return unimplemented(sqllex, "within group")
		}
	case 1386:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7742
		{
		}
	case 1387:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7746
		{
			sqlVAL.union.val = sqlDollar[4].union.expr()
		}
	case 1388:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7750
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1389:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7757
		{
			sqlVAL.union.val = sqlDollar[2].union.window()
		}
	case 1390:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7761
		{
			sqlVAL.union.val = tree.Window(nil)
		}
	case 1391:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7767
		{
			sqlVAL.union.val = tree.Window{sqlDollar[1].union.windowDef()}
		}
	case 1392:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7771
		{
			sqlVAL.union.val = append(sqlDollar[1].union.window(), sqlDollar[3].union.windowDef())
		}
	case 1393:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7777
		{
			n := sqlDollar[3].union.windowDef()
			n.Name = tree.Name(sqlDollar[1].str)
			sqlVAL.union.val = n
		}
	case 1394:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7785
		{
			sqlVAL.union.val = sqlDollar[2].union.windowDef()
		}
	case 1395:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7789
		{
			sqlVAL.union.val = &tree.WindowDef{Name: tree.Name(sqlDollar[2].str)}
		}
	case 1396:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7793
		{
			sqlVAL.union.val = (*tree.WindowDef)(nil)
		}
	case 1397:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql-gen.y:7800
		{
			sqlVAL.union.val = &tree.WindowDef{
				RefName:    tree.Name(sqlDollar[2].str),
				Partitions: sqlDollar[3].union.exprs(),
				OrderBy:    sqlDollar[4].union.orderBy(),
				Frame:      sqlDollar[5].union.windowFrame(),
			}
		}
	case 1399:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7820
		{
			sqlVAL.str = ""
		}
	case 1400:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:7826
		{
			sqlVAL.union.val = sqlDollar[3].union.exprs()
		}
	case 1401:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7830
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1402:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7841
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.RANGE,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1403:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7848
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.ROWS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1404:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7855
		{
			sqlVAL.union.val = &tree.WindowFrame{
				Mode:   tree.GROUPS,
				Bounds: sqlDollar[2].union.windowFrameBounds(),
			}
		}
	case 1405:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:7862
		{
			sqlVAL.union.val = (*tree.WindowFrame)(nil)
		}
	case 1406:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7868
		{
			startBound := sqlDollar[1].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case startBound.BoundType == tree.OffsetFollowing:
				sqllex.Error("frame starting from following row cannot end with current row")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound}
		}
	case 1407:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7881
		{
			startBound := sqlDollar[2].union.windowFrameBound()
			endBound := sqlDollar[4].union.windowFrameBound()
			switch {
			case startBound.BoundType == tree.UnboundedFollowing:
				sqllex.Error("frame start cannot be UNBOUNDED FOLLOWING")
				return 1
			case endBound.BoundType == tree.UnboundedPreceding:
				sqllex.Error("frame end cannot be UNBOUNDED PRECEDING")
				return 1
			case startBound.BoundType == tree.CurrentRow && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from current row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.OffsetPreceding:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			case startBound.BoundType == tree.OffsetFollowing && endBound.BoundType == tree.CurrentRow:
				sqllex.Error("frame starting from following row cannot have preceding rows")
				return 1
			}
			sqlVAL.union.val = tree.WindowFrameBounds{StartBound: startBound, EndBound: endBound}
		}
	case 1408:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7909
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedPreceding}
		}
	case 1409:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7913
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.UnboundedFollowing}
		}
	case 1410:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7917
		{
			sqlVAL.union.val = &tree.WindowFrameBound{BoundType: tree.CurrentRow}
		}
	case 1411:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7921
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetPreceding,
			}
		}
	case 1412:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:7928
		{
			sqlVAL.union.val = &tree.WindowFrameBound{
				OffsetExpr: sqlDollar[1].union.expr(),
				BoundType:  tree.OffsetFollowing,
			}
		}
	case 1413:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:7944
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[3].union.exprs(), Row: true}
		}
	case 1414:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7948
		{
			sqlVAL.union.val = sqlDollar[1].union.tuple()
		}
	case 1416:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:7955
		{
			t := sqlDollar[2].union.tuple()
			labels := sqlDollar[4].union.nameList()
			t.Labels = make([]string, len(labels))
			for i, l := range labels {
				t.Labels[i] = string(l)
			}
			sqlVAL.union.val = t
		}
	case 1417:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7967
		{
			sqlVAL.union.val = tree.Any
		}
	case 1418:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7971
		{
			sqlVAL.union.val = tree.Some
		}
	case 1419:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7975
		{
			sqlVAL.union.val = tree.All
		}
	case 1420:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7980
		{
			sqlVAL.union.val = tree.Plus
		}
	case 1421:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7981
		{
			sqlVAL.union.val = tree.Minus
		}
	case 1422:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7982
		{
			sqlVAL.union.val = tree.Mult
		}
	case 1423:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7983
		{
			sqlVAL.union.val = tree.Div
		}
	case 1424:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7984
		{
			sqlVAL.union.val = tree.FloorDiv
		}
	case 1425:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7985
		{
			sqlVAL.union.val = tree.Mod
		}
	case 1426:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7986
		{
			sqlVAL.union.val = tree.Bitand
		}
	case 1427:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7987
		{
			sqlVAL.union.val = tree.Bitor
		}
	case 1428:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7988
		{
			sqlVAL.union.val = tree.Pow
		}
	case 1429:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7989
		{
			sqlVAL.union.val = tree.Bitxor
		}
	case 1430:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7990
		{
			sqlVAL.union.val = tree.LT
		}
	case 1431:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7991
		{
			sqlVAL.union.val = tree.GT
		}
	case 1432:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7992
		{
			sqlVAL.union.val = tree.EQ
		}
	case 1433:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7993
		{
			sqlVAL.union.val = tree.LE
		}
	case 1434:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7994
		{
			sqlVAL.union.val = tree.GE
		}
	case 1435:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7995
		{
			sqlVAL.union.val = tree.NE
		}
	case 1437:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:7999
		{
			sqlVAL.union.val = tree.Like
		}
	case 1438:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8000
		{
			sqlVAL.union.val = tree.NotLike
		}
	case 1439:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8001
		{
			sqlVAL.union.val = tree.ILike
		}
	case 1440:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8002
		{
			sqlVAL.union.val = tree.NotILike
		}
	case 1441:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8025
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1442:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8029
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1443:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8035
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1444:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8039
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1445:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8043
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1446:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8054
		{
			sqlVAL.union.val = &tree.Tuple{}
		}
	case 1447:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8058
		{
			sqlVAL.union.val = &tree.Tuple{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1448:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8064
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1449:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8068
		{
			sqlVAL.union.val = append(tree.Exprs{sqlDollar[1].union.expr()}, sqlDollar[3].union.exprs()...)
		}
	case 1451:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8075
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1452:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8081
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1453:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8085
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1454:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8091
		{
			sqlVAL.union.val = []coltypes.T{sqlDollar[1].union.colType()}
		}
	case 1455:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8095
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colTypes(), sqlDollar[3].union.colType())
		}
	case 1456:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8101
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1457:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8105
		{
			sqlVAL.union.val = &tree.Array{Exprs: sqlDollar[2].union.exprs()}
		}
	case 1458:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8111
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr()}
		}
	case 1459:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8115
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprs(), sqlDollar[3].union.expr())
		}
	case 1460:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8121
		{
			sqlVAL.union.val = tree.Exprs{tree.NewStrVal(sqlDollar[1].str), sqlDollar[3].union.expr()}
		}
	case 1461:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8125
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1469:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:8147
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr(), sqlDollar[4].union.expr()}
		}
	case 1470:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8151
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1471:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8155
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1472:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8161
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1473:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8168
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[3].union.expr(), sqlDollar[1].union.expr()}
		}
	case 1474:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8172
		{
			sqlVAL.union.val = tree.Exprs(nil)
		}
	case 1475:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8189
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr(), sqlDollar[3].union.expr()}
		}
	case 1476:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8193
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[3].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1477:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8197
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), sqlDollar[2].union.expr()}
		}
	case 1478:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8201
		{
			sqlVAL.union.val = tree.Exprs{sqlDollar[1].union.expr(), tree.NewDInt(1), sqlDollar[2].union.expr()}
		}
	case 1479:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8205
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1480:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8211
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1481:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8217
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1482:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8223
		{
			sqlVAL.union.val = append(sqlDollar[3].union.exprs(), sqlDollar[1].union.expr())
		}
	case 1483:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8227
		{
			sqlVAL.union.val = sqlDollar[2].union.exprs()
		}
	case 1484:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8231
		{
			sqlVAL.union.val = sqlDollar[1].union.exprs()
		}
	case 1485:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8237
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[1].union.selectStmt()}
		}
	case 1487:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8249
		{
			sqlVAL.union.val = &tree.CaseExpr{Expr: sqlDollar[2].union.expr(), Whens: sqlDollar[3].union.whens(), Else: sqlDollar[4].union.expr()}
		}
	case 1488:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8256
		{
			sqlVAL.union.val = []*tree.When{sqlDollar[1].union.when()}
		}
	case 1489:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8260
		{
			sqlVAL.union.val = append(sqlDollar[1].union.whens(), sqlDollar[2].union.when())
		}
	case 1490:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql-gen.y:8266
		{
			sqlVAL.union.val = &tree.When{Cond: sqlDollar[2].union.expr(), Val: sqlDollar[4].union.expr()}
		}
	case 1491:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8272
		{
			sqlVAL.union.val = sqlDollar[2].union.expr()
		}
	case 1492:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8276
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1494:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8283
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1495:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8289
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr()}
		}
	case 1496:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8293
		{
			sqlVAL.union.val = &tree.ArraySubscript{Begin: sqlDollar[2].union.expr(), End: sqlDollar[4].union.expr(), Slice: true}
		}
	case 1498:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8300
		{
			sqlVAL.union.val = tree.Expr(nil)
		}
	case 1499:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8306
		{
			sqlVAL.union.val = tree.ArraySubscripts{sqlDollar[1].union.arraySubscript()}
		}
	case 1500:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8310
		{
			sqlVAL.union.val = append(sqlDollar[1].union.arraySubscripts(), sqlDollar[2].union.arraySubscript())
		}
	case 1501:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8315
		{
		}
	case 1502:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8316
		{
		}
	case 1503:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8320
		{
			sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selExpr()}
		}
	case 1504:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8324
		{
			sqlVAL.union.val = append(sqlDollar[1].union.selExprs(), sqlDollar[3].union.selExpr())
		}
	case 1505:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8330
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[3].str)}
		}
	case 1506:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8339
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr(), As: tree.UnrestrictedName(sqlDollar[2].str)}
		}
	case 1507:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8343
		{
			sqlVAL.union.val = tree.SelectExpr{Expr: sqlDollar[1].union.expr()}
		}
	case 1508:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8347
		{
			sqlVAL.union.val = tree.StarSelectExpr()
		}
	case 1509:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8355
		{
			sqlVAL.union.val = tree.TableNameWithIndexList{sqlDollar[1].union.newTableWithIdx()}
		}
	case 1510:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8359
		{
			sqlVAL.union.val = append(sqlDollar[1].union.newTableWithIdxList(), sqlDollar[3].union.newTableWithIdx())
		}
	case 1511:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8365
		{
			sqlVAL.union.val = tree.TablePatterns{sqlDollar[1].union.unresolvedName()}
		}
	case 1512:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8369
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tablePatterns(), sqlDollar[3].union.unresolvedName())
		}
	case 1513:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8375
		{
			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table: name,
				Index: tree.UnrestrictedName(sqlDollar[3].str),
			}
		}
	case 1514:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8387
		{

			name, err := tree.NormalizeTableName(sqlDollar[1].union.unresolvedName())
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = tree.TableNameWithIndex{
				Table:       name,
				SearchTable: true,
			}
		}
	case 1518:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8420
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1519:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8424
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1520:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8428
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 1}
		}
	case 1521:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8434
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 1522:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8438
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	case 1524:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8446
		{
			sqlVAL.union.val = sqlDollar[2].union.numVal()
		}
	case 1525:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql-gen.y:8450
		{
			n := sqlDollar[2].union.numVal()
			n.Negative = true
			sqlVAL.union.val = n
		}
	case 1526:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8461
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1527:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8472
		{
			val, err := sqlDollar[1].union.numVal().AsInt64()
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = val
		}
	case 1528:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8482
		{

			var err error
			var d tree.Datum
			if sqlDollar[3].union.val == nil {
				d, err = tree.ParseDInterval(sqlDollar[2].str)
			} else {
				d, err = tree.ParseDIntervalWithField(sqlDollar[2].str, sqlDollar[3].union.durationField())
			}
			if err != nil {
				sqllex.Error(err.Error())
				return 1
			}
			sqlVAL.union.val = d
		}
	case 1548:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8580
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1550:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8587
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1551:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8591
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1552:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8595
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 4, Parts: tree.NameParts{sqlDollar[7].str, sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1554:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql-gen.y:8609
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 4, Parts: tree.NameParts{"", sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1555:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8613
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 3, Parts: tree.NameParts{"", sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1556:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8617
		{
			sqlVAL.union.val = &tree.UnresolvedName{Star: true, NumParts: 2, Parts: tree.NameParts{"", sqlDollar[1].str}}
		}
	case 1557:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8630
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1561:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql-gen.y:8648
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 1, Parts: tree.NameParts{sqlDollar[1].str}}
		}
	case 1562:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8658
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 2, Parts: tree.NameParts{sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1563:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql-gen.y:8662
		{
			sqlVAL.union.val = &tree.UnresolvedName{NumParts: 3, Parts: tree.NameParts{sqlDollar[5].str, sqlDollar[3].str, sqlDollar[1].str}}
		}
	case 1571:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8684
		{
			sqlVAL.str = ""
		}
	case 1572:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql-gen.y:8690
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 1573:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql-gen.y:8694
		{
			sqlVAL.str = ""
		}
	}
	goto sqlstack /* stack new state and value */
}
